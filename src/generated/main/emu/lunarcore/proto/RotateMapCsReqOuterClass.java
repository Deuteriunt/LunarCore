// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;

public final class RotateMapCsReqOuterClass {
  /**
   * Protobuf type {@code RotateMapCsReq}
   */
  public static final class RotateMapCsReq extends ProtoMessage<RotateMapCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 unk_int = 8;</code>
     */
    private int unkInt;

    /**
     * <code>optional uint32 group_id = 11;</code>
     */
    private int groupId;

    /**
     * <code>optional .MotionInfo motion = 2;</code>
     */
    private final MotionInfoOuterClass.MotionInfo motion = MotionInfoOuterClass.MotionInfo.newInstance();

    /**
     * <code>optional .RotateMapCsReq.LHBLGBPKEAL rogue_map = 9;</code>
     */
    private final LHBLGBPKEAL rogueMap = LHBLGBPKEAL.newInstance();

    private RotateMapCsReq() {
    }

    /**
     * @return a new empty instance of {@code RotateMapCsReq}
     */
    public static RotateMapCsReq newInstance() {
      return new RotateMapCsReq();
    }

    /**
     * <code>optional uint32 unk_int = 8;</code>
     * @return whether the unkInt field is set
     */
    public boolean hasUnkInt() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 unk_int = 8;</code>
     * @return this
     */
    public RotateMapCsReq clearUnkInt() {
      bitField0_ &= ~0x00000001;
      unkInt = 0;
      return this;
    }

    /**
     * <code>optional uint32 unk_int = 8;</code>
     * @return the unkInt
     */
    public int getUnkInt() {
      return unkInt;
    }

    /**
     * <code>optional uint32 unk_int = 8;</code>
     * @param value the unkInt to set
     * @return this
     */
    public RotateMapCsReq setUnkInt(final int value) {
      bitField0_ |= 0x00000001;
      unkInt = value;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @return this
     */
    public RotateMapCsReq clearGroupId() {
      bitField0_ &= ~0x00000002;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 11;</code>
     * @param value the groupId to set
     * @return this
     */
    public RotateMapCsReq setGroupId(final int value) {
      bitField0_ |= 0x00000002;
      groupId = value;
      return this;
    }

    /**
     * <code>optional .MotionInfo motion = 2;</code>
     * @return whether the motion field is set
     */
    public boolean hasMotion() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .MotionInfo motion = 2;</code>
     * @return this
     */
    public RotateMapCsReq clearMotion() {
      bitField0_ &= ~0x00000004;
      motion.clear();
      return this;
    }

    /**
     * <code>optional .MotionInfo motion = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMotion()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public MotionInfoOuterClass.MotionInfo getMotion() {
      return motion;
    }

    /**
     * <code>optional .MotionInfo motion = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public MotionInfoOuterClass.MotionInfo getMutableMotion() {
      bitField0_ |= 0x00000004;
      return motion;
    }

    /**
     * <code>optional .MotionInfo motion = 2;</code>
     * @param value the motion to set
     * @return this
     */
    public RotateMapCsReq setMotion(final MotionInfoOuterClass.MotionInfo value) {
      bitField0_ |= 0x00000004;
      motion.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RotateMapCsReq.LHBLGBPKEAL rogue_map = 9;</code>
     * @return whether the rogueMap field is set
     */
    public boolean hasRogueMap() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .RotateMapCsReq.LHBLGBPKEAL rogue_map = 9;</code>
     * @return this
     */
    public RotateMapCsReq clearRogueMap() {
      bitField0_ &= ~0x00000008;
      rogueMap.clear();
      return this;
    }

    /**
     * <code>optional .RotateMapCsReq.LHBLGBPKEAL rogue_map = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueMap()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public LHBLGBPKEAL getRogueMap() {
      return rogueMap;
    }

    /**
     * <code>optional .RotateMapCsReq.LHBLGBPKEAL rogue_map = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public LHBLGBPKEAL getMutableRogueMap() {
      bitField0_ |= 0x00000008;
      return rogueMap;
    }

    /**
     * <code>optional .RotateMapCsReq.LHBLGBPKEAL rogue_map = 9;</code>
     * @param value the rogueMap to set
     * @return this
     */
    public RotateMapCsReq setRogueMap(final LHBLGBPKEAL value) {
      bitField0_ |= 0x00000008;
      rogueMap.copyFrom(value);
      return this;
    }

    @Override
    public RotateMapCsReq copyFrom(final RotateMapCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        unkInt = other.unkInt;
        groupId = other.groupId;
        motion.copyFrom(other.motion);
        rogueMap.copyFrom(other.rogueMap);
      }
      return this;
    }

    @Override
    public RotateMapCsReq mergeFrom(final RotateMapCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUnkInt()) {
        setUnkInt(other.unkInt);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasMotion()) {
        getMutableMotion().mergeFrom(other.motion);
      }
      if (other.hasRogueMap()) {
        getMutableRogueMap().mergeFrom(other.rogueMap);
      }
      return this;
    }

    @Override
    public RotateMapCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unkInt = 0;
      groupId = 0;
      motion.clear();
      rogueMap.clear();
      return this;
    }

    @Override
    public RotateMapCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      motion.clearQuick();
      rogueMap.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RotateMapCsReq)) {
        return false;
      }
      RotateMapCsReq other = (RotateMapCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasUnkInt() || unkInt == other.unkInt)
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasMotion() || motion.equals(other.motion))
        && (!hasRogueMap() || rogueMap.equals(other.rogueMap));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(unkInt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(motion);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 74);
        output.writeMessageNoTag(rogueMap);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(unkInt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(motion);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueMap);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RotateMapCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // unkInt
            unkInt = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // motion
            input.readMessage(motion);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // rogueMap
            input.readMessage(rogueMap);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.unkInt, unkInt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.motion, motion);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.rogueMap, rogueMap);
      }
      output.endObject();
    }

    @Override
    public RotateMapCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -840508003:
          case -285293790: {
            if (input.isAtField(FieldNames.unkInt)) {
              if (!input.trySkipNullValue()) {
                unkInt = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1068318794: {
            if (input.isAtField(FieldNames.motion)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(motion);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -394483422:
          case 656463223: {
            if (input.isAtField(FieldNames.rogueMap)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueMap);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RotateMapCsReq clone() {
      return new RotateMapCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RotateMapCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RotateMapCsReq(), data).checkInitialized();
    }

    public static RotateMapCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RotateMapCsReq(), input).checkInitialized();
    }

    public static RotateMapCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RotateMapCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating RotateMapCsReq messages
     */
    public static MessageFactory<RotateMapCsReq> getFactory() {
      return RotateMapCsReqFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code ICOFBBCMENF}
     */
    public static final class ICOFBBCMENF extends ProtoMessage<ICOFBBCMENF> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional float FAAFKIAENEO = 2;</code>
       */
      private float fAAFKIAENEO;

      /**
       * <code>optional float y = 3;</code>
       */
      private float y;

      /**
       * <code>optional float z = 4;</code>
       */
      private float z;

      /**
       * <code>optional float x = 15;</code>
       */
      private float x;

      private ICOFBBCMENF() {
      }

      /**
       * @return a new empty instance of {@code ICOFBBCMENF}
       */
      public static ICOFBBCMENF newInstance() {
        return new ICOFBBCMENF();
      }

      /**
       * <code>optional float FAAFKIAENEO = 2;</code>
       * @return whether the fAAFKIAENEO field is set
       */
      public boolean hasFAAFKIAENEO() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional float FAAFKIAENEO = 2;</code>
       * @return this
       */
      public ICOFBBCMENF clearFAAFKIAENEO() {
        bitField0_ &= ~0x00000001;
        fAAFKIAENEO = 0F;
        return this;
      }

      /**
       * <code>optional float FAAFKIAENEO = 2;</code>
       * @return the fAAFKIAENEO
       */
      public float getFAAFKIAENEO() {
        return fAAFKIAENEO;
      }

      /**
       * <code>optional float FAAFKIAENEO = 2;</code>
       * @param value the fAAFKIAENEO to set
       * @return this
       */
      public ICOFBBCMENF setFAAFKIAENEO(final float value) {
        bitField0_ |= 0x00000001;
        fAAFKIAENEO = value;
        return this;
      }

      /**
       * <code>optional float y = 3;</code>
       * @return whether the y field is set
       */
      public boolean hasY() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional float y = 3;</code>
       * @return this
       */
      public ICOFBBCMENF clearY() {
        bitField0_ &= ~0x00000002;
        y = 0F;
        return this;
      }

      /**
       * <code>optional float y = 3;</code>
       * @return the y
       */
      public float getY() {
        return y;
      }

      /**
       * <code>optional float y = 3;</code>
       * @param value the y to set
       * @return this
       */
      public ICOFBBCMENF setY(final float value) {
        bitField0_ |= 0x00000002;
        y = value;
        return this;
      }

      /**
       * <code>optional float z = 4;</code>
       * @return whether the z field is set
       */
      public boolean hasZ() {
        return (bitField0_ & 0x00000004) != 0;
      }

      /**
       * <code>optional float z = 4;</code>
       * @return this
       */
      public ICOFBBCMENF clearZ() {
        bitField0_ &= ~0x00000004;
        z = 0F;
        return this;
      }

      /**
       * <code>optional float z = 4;</code>
       * @return the z
       */
      public float getZ() {
        return z;
      }

      /**
       * <code>optional float z = 4;</code>
       * @param value the z to set
       * @return this
       */
      public ICOFBBCMENF setZ(final float value) {
        bitField0_ |= 0x00000004;
        z = value;
        return this;
      }

      /**
       * <code>optional float x = 15;</code>
       * @return whether the x field is set
       */
      public boolean hasX() {
        return (bitField0_ & 0x00000008) != 0;
      }

      /**
       * <code>optional float x = 15;</code>
       * @return this
       */
      public ICOFBBCMENF clearX() {
        bitField0_ &= ~0x00000008;
        x = 0F;
        return this;
      }

      /**
       * <code>optional float x = 15;</code>
       * @return the x
       */
      public float getX() {
        return x;
      }

      /**
       * <code>optional float x = 15;</code>
       * @param value the x to set
       * @return this
       */
      public ICOFBBCMENF setX(final float value) {
        bitField0_ |= 0x00000008;
        x = value;
        return this;
      }

      @Override
      public ICOFBBCMENF copyFrom(final ICOFBBCMENF other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          fAAFKIAENEO = other.fAAFKIAENEO;
          y = other.y;
          z = other.z;
          x = other.x;
        }
        return this;
      }

      @Override
      public ICOFBBCMENF mergeFrom(final ICOFBBCMENF other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasFAAFKIAENEO()) {
          setFAAFKIAENEO(other.fAAFKIAENEO);
        }
        if (other.hasY()) {
          setY(other.y);
        }
        if (other.hasZ()) {
          setZ(other.z);
        }
        if (other.hasX()) {
          setX(other.x);
        }
        return this;
      }

      @Override
      public ICOFBBCMENF clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        fAAFKIAENEO = 0F;
        y = 0F;
        z = 0F;
        x = 0F;
        return this;
      }

      @Override
      public ICOFBBCMENF clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof ICOFBBCMENF)) {
          return false;
        }
        ICOFBBCMENF other = (ICOFBBCMENF) o;
        return bitField0_ == other.bitField0_
          && (!hasFAAFKIAENEO() || ProtoUtil.isEqual(fAAFKIAENEO, other.fAAFKIAENEO))
          && (!hasY() || ProtoUtil.isEqual(y, other.y))
          && (!hasZ() || ProtoUtil.isEqual(z, other.z))
          && (!hasX() || ProtoUtil.isEqual(x, other.x));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 21);
          output.writeFloatNoTag(fAAFKIAENEO);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 29);
          output.writeFloatNoTag(y);
        }
        if ((bitField0_ & 0x00000004) != 0) {
          output.writeRawByte((byte) 37);
          output.writeFloatNoTag(z);
        }
        if ((bitField0_ & 0x00000008) != 0) {
          output.writeRawByte((byte) 125);
          output.writeFloatNoTag(x);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 5;
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 5;
        }
        if ((bitField0_ & 0x00000004) != 0) {
          size += 5;
        }
        if ((bitField0_ & 0x00000008) != 0) {
          size += 5;
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public ICOFBBCMENF mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 21: {
              // fAAFKIAENEO
              fAAFKIAENEO = input.readFloat();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 29) {
                break;
              }
            }
            case 29: {
              // y
              y = input.readFloat();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 37) {
                break;
              }
            }
            case 37: {
              // z
              z = input.readFloat();
              bitField0_ |= 0x00000004;
              tag = input.readTag();
              if (tag != 125) {
                break;
              }
            }
            case 125: {
              // x
              x = input.readFloat();
              bitField0_ |= 0x00000008;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeFloat(FieldNames.fAAFKIAENEO, fAAFKIAENEO);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeFloat(FieldNames.y, y);
        }
        if ((bitField0_ & 0x00000004) != 0) {
          output.writeFloat(FieldNames.z, z);
        }
        if ((bitField0_ & 0x00000008) != 0) {
          output.writeFloat(FieldNames.x, x);
        }
        output.endObject();
      }

      @Override
      public ICOFBBCMENF mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case -908414442: {
              if (input.isAtField(FieldNames.fAAFKIAENEO)) {
                if (!input.trySkipNullValue()) {
                  fAAFKIAENEO = input.readFloat();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 121: {
              if (input.isAtField(FieldNames.y)) {
                if (!input.trySkipNullValue()) {
                  y = input.readFloat();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 122: {
              if (input.isAtField(FieldNames.z)) {
                if (!input.trySkipNullValue()) {
                  z = input.readFloat();
                  bitField0_ |= 0x00000004;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 120: {
              if (input.isAtField(FieldNames.x)) {
                if (!input.trySkipNullValue()) {
                  x = input.readFloat();
                  bitField0_ |= 0x00000008;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public ICOFBBCMENF clone() {
        return new ICOFBBCMENF().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static ICOFBBCMENF parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new ICOFBBCMENF(), data).checkInitialized();
      }

      public static ICOFBBCMENF parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new ICOFBBCMENF(), input).checkInitialized();
      }

      public static ICOFBBCMENF parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new ICOFBBCMENF(), input).checkInitialized();
      }

      /**
       * @return factory for creating ICOFBBCMENF messages
       */
      public static MessageFactory<ICOFBBCMENF> getFactory() {
        return ICOFBBCMENFFactory.INSTANCE;
      }

      private enum ICOFBBCMENFFactory implements MessageFactory<ICOFBBCMENF> {
        INSTANCE;

        @Override
        public ICOFBBCMENF create() {
          return ICOFBBCMENF.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName fAAFKIAENEO = FieldName.forField("FAAFKIAENEO");

        static final FieldName y = FieldName.forField("y");

        static final FieldName z = FieldName.forField("z");

        static final FieldName x = FieldName.forField("x");
      }
    }

    /**
     * Protobuf type {@code LHBLGBPKEAL}
     */
    public static final class LHBLGBPKEAL extends ProtoMessage<LHBLGBPKEAL> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional .RotateMapCsReq.ICOFBBCMENF JBCABOABIDI = 9;</code>
       */
      private final ICOFBBCMENF jBCABOABIDI = ICOFBBCMENF.newInstance();

      /**
       * <code>optional .Vector IENLJAFIBOL = 15;</code>
       */
      private final VectorOuterClass.Vector iENLJAFIBOL = VectorOuterClass.Vector.newInstance();

      private LHBLGBPKEAL() {
      }

      /**
       * @return a new empty instance of {@code LHBLGBPKEAL}
       */
      public static LHBLGBPKEAL newInstance() {
        return new LHBLGBPKEAL();
      }

      /**
       * <code>optional .RotateMapCsReq.ICOFBBCMENF JBCABOABIDI = 9;</code>
       * @return whether the jBCABOABIDI field is set
       */
      public boolean hasJBCABOABIDI() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional .RotateMapCsReq.ICOFBBCMENF JBCABOABIDI = 9;</code>
       * @return this
       */
      public LHBLGBPKEAL clearJBCABOABIDI() {
        bitField0_ &= ~0x00000001;
        jBCABOABIDI.clear();
        return this;
      }

      /**
       * <code>optional .RotateMapCsReq.ICOFBBCMENF JBCABOABIDI = 9;</code>
       *
       * This method returns the internal storage object without modifying any has state.
       * The returned object should not be modified and be treated as read-only.
       *
       * Use {@link #getMutableJBCABOABIDI()} if you want to modify it.
       *
       * @return internal storage object for reading
       */
      public ICOFBBCMENF getJBCABOABIDI() {
        return jBCABOABIDI;
      }

      /**
       * <code>optional .RotateMapCsReq.ICOFBBCMENF JBCABOABIDI = 9;</code>
       *
       * This method returns the internal storage object and sets the corresponding
       * has state. The returned object will become part of this message and its
       * contents may be modified as long as the has state is not cleared.
       *
       * @return internal storage object for modifications
       */
      public ICOFBBCMENF getMutableJBCABOABIDI() {
        bitField0_ |= 0x00000001;
        return jBCABOABIDI;
      }

      /**
       * <code>optional .RotateMapCsReq.ICOFBBCMENF JBCABOABIDI = 9;</code>
       * @param value the jBCABOABIDI to set
       * @return this
       */
      public LHBLGBPKEAL setJBCABOABIDI(final ICOFBBCMENF value) {
        bitField0_ |= 0x00000001;
        jBCABOABIDI.copyFrom(value);
        return this;
      }

      /**
       * <code>optional .Vector IENLJAFIBOL = 15;</code>
       * @return whether the iENLJAFIBOL field is set
       */
      public boolean hasIENLJAFIBOL() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional .Vector IENLJAFIBOL = 15;</code>
       * @return this
       */
      public LHBLGBPKEAL clearIENLJAFIBOL() {
        bitField0_ &= ~0x00000002;
        iENLJAFIBOL.clear();
        return this;
      }

      /**
       * <code>optional .Vector IENLJAFIBOL = 15;</code>
       *
       * This method returns the internal storage object without modifying any has state.
       * The returned object should not be modified and be treated as read-only.
       *
       * Use {@link #getMutableIENLJAFIBOL()} if you want to modify it.
       *
       * @return internal storage object for reading
       */
      public VectorOuterClass.Vector getIENLJAFIBOL() {
        return iENLJAFIBOL;
      }

      /**
       * <code>optional .Vector IENLJAFIBOL = 15;</code>
       *
       * This method returns the internal storage object and sets the corresponding
       * has state. The returned object will become part of this message and its
       * contents may be modified as long as the has state is not cleared.
       *
       * @return internal storage object for modifications
       */
      public VectorOuterClass.Vector getMutableIENLJAFIBOL() {
        bitField0_ |= 0x00000002;
        return iENLJAFIBOL;
      }

      /**
       * <code>optional .Vector IENLJAFIBOL = 15;</code>
       * @param value the iENLJAFIBOL to set
       * @return this
       */
      public LHBLGBPKEAL setIENLJAFIBOL(final VectorOuterClass.Vector value) {
        bitField0_ |= 0x00000002;
        iENLJAFIBOL.copyFrom(value);
        return this;
      }

      @Override
      public LHBLGBPKEAL copyFrom(final LHBLGBPKEAL other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          jBCABOABIDI.copyFrom(other.jBCABOABIDI);
          iENLJAFIBOL.copyFrom(other.iENLJAFIBOL);
        }
        return this;
      }

      @Override
      public LHBLGBPKEAL mergeFrom(final LHBLGBPKEAL other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasJBCABOABIDI()) {
          getMutableJBCABOABIDI().mergeFrom(other.jBCABOABIDI);
        }
        if (other.hasIENLJAFIBOL()) {
          getMutableIENLJAFIBOL().mergeFrom(other.iENLJAFIBOL);
        }
        return this;
      }

      @Override
      public LHBLGBPKEAL clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        jBCABOABIDI.clear();
        iENLJAFIBOL.clear();
        return this;
      }

      @Override
      public LHBLGBPKEAL clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        jBCABOABIDI.clearQuick();
        iENLJAFIBOL.clearQuick();
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof LHBLGBPKEAL)) {
          return false;
        }
        LHBLGBPKEAL other = (LHBLGBPKEAL) o;
        return bitField0_ == other.bitField0_
          && (!hasJBCABOABIDI() || jBCABOABIDI.equals(other.jBCABOABIDI))
          && (!hasIENLJAFIBOL() || iENLJAFIBOL.equals(other.iENLJAFIBOL));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(jBCABOABIDI);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 122);
          output.writeMessageNoTag(iENLJAFIBOL);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeMessageSizeNoTag(jBCABOABIDI);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeMessageSizeNoTag(iENLJAFIBOL);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public LHBLGBPKEAL mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 74: {
              // jBCABOABIDI
              input.readMessage(jBCABOABIDI);
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 122) {
                break;
              }
            }
            case 122: {
              // iENLJAFIBOL
              input.readMessage(iENLJAFIBOL);
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeMessage(FieldNames.jBCABOABIDI, jBCABOABIDI);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeMessage(FieldNames.iENLJAFIBOL, iENLJAFIBOL);
        }
        output.endObject();
      }

      @Override
      public LHBLGBPKEAL mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 1627224650: {
              if (input.isAtField(FieldNames.jBCABOABIDI)) {
                if (!input.trySkipNullValue()) {
                  input.readMessage(jBCABOABIDI);
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 237656587: {
              if (input.isAtField(FieldNames.iENLJAFIBOL)) {
                if (!input.trySkipNullValue()) {
                  input.readMessage(iENLJAFIBOL);
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public LHBLGBPKEAL clone() {
        return new LHBLGBPKEAL().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static LHBLGBPKEAL parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new LHBLGBPKEAL(), data).checkInitialized();
      }

      public static LHBLGBPKEAL parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new LHBLGBPKEAL(), input).checkInitialized();
      }

      public static LHBLGBPKEAL parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new LHBLGBPKEAL(), input).checkInitialized();
      }

      /**
       * @return factory for creating LHBLGBPKEAL messages
       */
      public static MessageFactory<LHBLGBPKEAL> getFactory() {
        return LHBLGBPKEALFactory.INSTANCE;
      }

      private enum LHBLGBPKEALFactory implements MessageFactory<LHBLGBPKEAL> {
        INSTANCE;

        @Override
        public LHBLGBPKEAL create() {
          return LHBLGBPKEAL.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName jBCABOABIDI = FieldName.forField("JBCABOABIDI");

        static final FieldName iENLJAFIBOL = FieldName.forField("IENLJAFIBOL");
      }
    }

    private enum RotateMapCsReqFactory implements MessageFactory<RotateMapCsReq> {
      INSTANCE;

      @Override
      public RotateMapCsReq create() {
        return RotateMapCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName unkInt = FieldName.forField("unkInt", "unk_int");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName motion = FieldName.forField("motion");

      static final FieldName rogueMap = FieldName.forField("rogueMap", "rogue_map");
    }
  }
}
