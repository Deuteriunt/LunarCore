// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueCellOuterClass {
  /**
   * Protobuf type {@code ChessRogueCell}
   */
  public static final class ChessRogueCell extends ProtoMessage<ChessRogueCell> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 entrance_id = 1;</code>
     */
    private int entranceId;

    /**
     * <code>optional uint32 NNMNHHPJBDB = 2;</code>
     */
    private int nNMNHHPJBDB;

    /**
     * <code>optional uint32 NLBGDNLIONI = 3;</code>
     */
    private int nLBGDNLIONI;

    /**
     * <code>optional uint32 FOKKJJADPEA = 5;</code>
     */
    private int fOKKJJADPEA;

    /**
     * <pre>
     *  5, 3
     * </pre>
     *
     * <code>optional uint32 PNKFAINKKCE = 7;</code>
     */
    private int pNKFAINKKCE;

    /**
     * <code>optional uint32 cell_id = 9;</code>
     */
    private int cellId;

    /**
     * <pre>
     *  7, 4
     * </pre>
     *
     * <code>optional uint32 JLOBGDKNJLN = 10;</code>
     */
    private int jLOBGDKNJLN;

    /**
     * <code>optional uint32 new_room_id = 11;</code>
     */
    private int newRoomId;

    /**
     * <pre>
     * AKNBDONHPPM chess_rogue_info = 14;
     * </pre>
     *
     * <code>optional bool PMBLMGDFGAN = 6;</code>
     */
    private boolean pMBLMGDFGAN;

    /**
     * <pre>
     *  true
     * </pre>
     *
     * <code>optional bool is_unlocked = 8;</code>
     */
    private boolean isUnlocked;

    /**
     * <code>repeated uint32 IIJOCONHKND = 4;</code>
     */
    private final RepeatedInt iIJOCONHKND = RepeatedInt.newEmptyInstance();

    private ChessRogueCell() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueCell}
     */
    public static ChessRogueCell newInstance() {
      return new ChessRogueCell();
    }

    /**
     * <code>optional uint32 entrance_id = 1;</code>
     * @return whether the entranceId field is set
     */
    public boolean hasEntranceId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 entrance_id = 1;</code>
     * @return this
     */
    public ChessRogueCell clearEntranceId() {
      bitField0_ &= ~0x00000001;
      entranceId = 0;
      return this;
    }

    /**
     * <code>optional uint32 entrance_id = 1;</code>
     * @return the entranceId
     */
    public int getEntranceId() {
      return entranceId;
    }

    /**
     * <code>optional uint32 entrance_id = 1;</code>
     * @param value the entranceId to set
     * @return this
     */
    public ChessRogueCell setEntranceId(final int value) {
      bitField0_ |= 0x00000001;
      entranceId = value;
      return this;
    }

    /**
     * <code>optional uint32 NNMNHHPJBDB = 2;</code>
     * @return whether the nNMNHHPJBDB field is set
     */
    public boolean hasNNMNHHPJBDB() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 NNMNHHPJBDB = 2;</code>
     * @return this
     */
    public ChessRogueCell clearNNMNHHPJBDB() {
      bitField0_ &= ~0x00000002;
      nNMNHHPJBDB = 0;
      return this;
    }

    /**
     * <code>optional uint32 NNMNHHPJBDB = 2;</code>
     * @return the nNMNHHPJBDB
     */
    public int getNNMNHHPJBDB() {
      return nNMNHHPJBDB;
    }

    /**
     * <code>optional uint32 NNMNHHPJBDB = 2;</code>
     * @param value the nNMNHHPJBDB to set
     * @return this
     */
    public ChessRogueCell setNNMNHHPJBDB(final int value) {
      bitField0_ |= 0x00000002;
      nNMNHHPJBDB = value;
      return this;
    }

    /**
     * <code>optional uint32 NLBGDNLIONI = 3;</code>
     * @return whether the nLBGDNLIONI field is set
     */
    public boolean hasNLBGDNLIONI() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 NLBGDNLIONI = 3;</code>
     * @return this
     */
    public ChessRogueCell clearNLBGDNLIONI() {
      bitField0_ &= ~0x00000004;
      nLBGDNLIONI = 0;
      return this;
    }

    /**
     * <code>optional uint32 NLBGDNLIONI = 3;</code>
     * @return the nLBGDNLIONI
     */
    public int getNLBGDNLIONI() {
      return nLBGDNLIONI;
    }

    /**
     * <code>optional uint32 NLBGDNLIONI = 3;</code>
     * @param value the nLBGDNLIONI to set
     * @return this
     */
    public ChessRogueCell setNLBGDNLIONI(final int value) {
      bitField0_ |= 0x00000004;
      nLBGDNLIONI = value;
      return this;
    }

    /**
     * <code>optional uint32 FOKKJJADPEA = 5;</code>
     * @return whether the fOKKJJADPEA field is set
     */
    public boolean hasFOKKJJADPEA() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 FOKKJJADPEA = 5;</code>
     * @return this
     */
    public ChessRogueCell clearFOKKJJADPEA() {
      bitField0_ &= ~0x00000008;
      fOKKJJADPEA = 0;
      return this;
    }

    /**
     * <code>optional uint32 FOKKJJADPEA = 5;</code>
     * @return the fOKKJJADPEA
     */
    public int getFOKKJJADPEA() {
      return fOKKJJADPEA;
    }

    /**
     * <code>optional uint32 FOKKJJADPEA = 5;</code>
     * @param value the fOKKJJADPEA to set
     * @return this
     */
    public ChessRogueCell setFOKKJJADPEA(final int value) {
      bitField0_ |= 0x00000008;
      fOKKJJADPEA = value;
      return this;
    }

    /**
     * <pre>
     *  5, 3
     * </pre>
     *
     * <code>optional uint32 PNKFAINKKCE = 7;</code>
     * @return whether the pNKFAINKKCE field is set
     */
    public boolean hasPNKFAINKKCE() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     *  5, 3
     * </pre>
     *
     * <code>optional uint32 PNKFAINKKCE = 7;</code>
     * @return this
     */
    public ChessRogueCell clearPNKFAINKKCE() {
      bitField0_ &= ~0x00000010;
      pNKFAINKKCE = 0;
      return this;
    }

    /**
     * <pre>
     *  5, 3
     * </pre>
     *
     * <code>optional uint32 PNKFAINKKCE = 7;</code>
     * @return the pNKFAINKKCE
     */
    public int getPNKFAINKKCE() {
      return pNKFAINKKCE;
    }

    /**
     * <pre>
     *  5, 3
     * </pre>
     *
     * <code>optional uint32 PNKFAINKKCE = 7;</code>
     * @param value the pNKFAINKKCE to set
     * @return this
     */
    public ChessRogueCell setPNKFAINKKCE(final int value) {
      bitField0_ |= 0x00000010;
      pNKFAINKKCE = value;
      return this;
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @return whether the cellId field is set
     */
    public boolean hasCellId() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @return this
     */
    public ChessRogueCell clearCellId() {
      bitField0_ &= ~0x00000020;
      cellId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @return the cellId
     */
    public int getCellId() {
      return cellId;
    }

    /**
     * <code>optional uint32 cell_id = 9;</code>
     * @param value the cellId to set
     * @return this
     */
    public ChessRogueCell setCellId(final int value) {
      bitField0_ |= 0x00000020;
      cellId = value;
      return this;
    }

    /**
     * <pre>
     *  7, 4
     * </pre>
     *
     * <code>optional uint32 JLOBGDKNJLN = 10;</code>
     * @return whether the jLOBGDKNJLN field is set
     */
    public boolean hasJLOBGDKNJLN() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <pre>
     *  7, 4
     * </pre>
     *
     * <code>optional uint32 JLOBGDKNJLN = 10;</code>
     * @return this
     */
    public ChessRogueCell clearJLOBGDKNJLN() {
      bitField0_ &= ~0x00000040;
      jLOBGDKNJLN = 0;
      return this;
    }

    /**
     * <pre>
     *  7, 4
     * </pre>
     *
     * <code>optional uint32 JLOBGDKNJLN = 10;</code>
     * @return the jLOBGDKNJLN
     */
    public int getJLOBGDKNJLN() {
      return jLOBGDKNJLN;
    }

    /**
     * <pre>
     *  7, 4
     * </pre>
     *
     * <code>optional uint32 JLOBGDKNJLN = 10;</code>
     * @param value the jLOBGDKNJLN to set
     * @return this
     */
    public ChessRogueCell setJLOBGDKNJLN(final int value) {
      bitField0_ |= 0x00000040;
      jLOBGDKNJLN = value;
      return this;
    }

    /**
     * <code>optional uint32 new_room_id = 11;</code>
     * @return whether the newRoomId field is set
     */
    public boolean hasNewRoomId() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional uint32 new_room_id = 11;</code>
     * @return this
     */
    public ChessRogueCell clearNewRoomId() {
      bitField0_ &= ~0x00000080;
      newRoomId = 0;
      return this;
    }

    /**
     * <code>optional uint32 new_room_id = 11;</code>
     * @return the newRoomId
     */
    public int getNewRoomId() {
      return newRoomId;
    }

    /**
     * <code>optional uint32 new_room_id = 11;</code>
     * @param value the newRoomId to set
     * @return this
     */
    public ChessRogueCell setNewRoomId(final int value) {
      bitField0_ |= 0x00000080;
      newRoomId = value;
      return this;
    }

    /**
     * <pre>
     * AKNBDONHPPM chess_rogue_info = 14;
     * </pre>
     *
     * <code>optional bool PMBLMGDFGAN = 6;</code>
     * @return whether the pMBLMGDFGAN field is set
     */
    public boolean hasPMBLMGDFGAN() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <pre>
     * AKNBDONHPPM chess_rogue_info = 14;
     * </pre>
     *
     * <code>optional bool PMBLMGDFGAN = 6;</code>
     * @return this
     */
    public ChessRogueCell clearPMBLMGDFGAN() {
      bitField0_ &= ~0x00000100;
      pMBLMGDFGAN = false;
      return this;
    }

    /**
     * <pre>
     * AKNBDONHPPM chess_rogue_info = 14;
     * </pre>
     *
     * <code>optional bool PMBLMGDFGAN = 6;</code>
     * @return the pMBLMGDFGAN
     */
    public boolean getPMBLMGDFGAN() {
      return pMBLMGDFGAN;
    }

    /**
     * <pre>
     * AKNBDONHPPM chess_rogue_info = 14;
     * </pre>
     *
     * <code>optional bool PMBLMGDFGAN = 6;</code>
     * @param value the pMBLMGDFGAN to set
     * @return this
     */
    public ChessRogueCell setPMBLMGDFGAN(final boolean value) {
      bitField0_ |= 0x00000100;
      pMBLMGDFGAN = value;
      return this;
    }

    /**
     * <pre>
     *  true
     * </pre>
     *
     * <code>optional bool is_unlocked = 8;</code>
     * @return whether the isUnlocked field is set
     */
    public boolean hasIsUnlocked() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <pre>
     *  true
     * </pre>
     *
     * <code>optional bool is_unlocked = 8;</code>
     * @return this
     */
    public ChessRogueCell clearIsUnlocked() {
      bitField0_ &= ~0x00000200;
      isUnlocked = false;
      return this;
    }

    /**
     * <pre>
     *  true
     * </pre>
     *
     * <code>optional bool is_unlocked = 8;</code>
     * @return the isUnlocked
     */
    public boolean getIsUnlocked() {
      return isUnlocked;
    }

    /**
     * <pre>
     *  true
     * </pre>
     *
     * <code>optional bool is_unlocked = 8;</code>
     * @param value the isUnlocked to set
     * @return this
     */
    public ChessRogueCell setIsUnlocked(final boolean value) {
      bitField0_ |= 0x00000200;
      isUnlocked = value;
      return this;
    }

    /**
     * <code>repeated uint32 IIJOCONHKND = 4;</code>
     * @return whether the iIJOCONHKND field is set
     */
    public boolean hasIIJOCONHKND() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>repeated uint32 IIJOCONHKND = 4;</code>
     * @return this
     */
    public ChessRogueCell clearIIJOCONHKND() {
      bitField0_ &= ~0x00000400;
      iIJOCONHKND.clear();
      return this;
    }

    /**
     * <code>repeated uint32 IIJOCONHKND = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableIIJOCONHKND()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getIIJOCONHKND() {
      return iIJOCONHKND;
    }

    /**
     * <code>repeated uint32 IIJOCONHKND = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableIIJOCONHKND() {
      bitField0_ |= 0x00000400;
      return iIJOCONHKND;
    }

    /**
     * <code>repeated uint32 IIJOCONHKND = 4;</code>
     * @param value the iIJOCONHKND to add
     * @return this
     */
    public ChessRogueCell addIIJOCONHKND(final int value) {
      bitField0_ |= 0x00000400;
      iIJOCONHKND.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 IIJOCONHKND = 4;</code>
     * @param values the iIJOCONHKND to add
     * @return this
     */
    public ChessRogueCell addAllIIJOCONHKND(final int... values) {
      bitField0_ |= 0x00000400;
      iIJOCONHKND.addAll(values);
      return this;
    }

    @Override
    public ChessRogueCell copyFrom(final ChessRogueCell other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        entranceId = other.entranceId;
        nNMNHHPJBDB = other.nNMNHHPJBDB;
        nLBGDNLIONI = other.nLBGDNLIONI;
        fOKKJJADPEA = other.fOKKJJADPEA;
        pNKFAINKKCE = other.pNKFAINKKCE;
        cellId = other.cellId;
        jLOBGDKNJLN = other.jLOBGDKNJLN;
        newRoomId = other.newRoomId;
        pMBLMGDFGAN = other.pMBLMGDFGAN;
        isUnlocked = other.isUnlocked;
        iIJOCONHKND.copyFrom(other.iIJOCONHKND);
      }
      return this;
    }

    @Override
    public ChessRogueCell mergeFrom(final ChessRogueCell other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasEntranceId()) {
        setEntranceId(other.entranceId);
      }
      if (other.hasNNMNHHPJBDB()) {
        setNNMNHHPJBDB(other.nNMNHHPJBDB);
      }
      if (other.hasNLBGDNLIONI()) {
        setNLBGDNLIONI(other.nLBGDNLIONI);
      }
      if (other.hasFOKKJJADPEA()) {
        setFOKKJJADPEA(other.fOKKJJADPEA);
      }
      if (other.hasPNKFAINKKCE()) {
        setPNKFAINKKCE(other.pNKFAINKKCE);
      }
      if (other.hasCellId()) {
        setCellId(other.cellId);
      }
      if (other.hasJLOBGDKNJLN()) {
        setJLOBGDKNJLN(other.jLOBGDKNJLN);
      }
      if (other.hasNewRoomId()) {
        setNewRoomId(other.newRoomId);
      }
      if (other.hasPMBLMGDFGAN()) {
        setPMBLMGDFGAN(other.pMBLMGDFGAN);
      }
      if (other.hasIsUnlocked()) {
        setIsUnlocked(other.isUnlocked);
      }
      if (other.hasIIJOCONHKND()) {
        getMutableIIJOCONHKND().addAll(other.iIJOCONHKND);
      }
      return this;
    }

    @Override
    public ChessRogueCell clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      entranceId = 0;
      nNMNHHPJBDB = 0;
      nLBGDNLIONI = 0;
      fOKKJJADPEA = 0;
      pNKFAINKKCE = 0;
      cellId = 0;
      jLOBGDKNJLN = 0;
      newRoomId = 0;
      pMBLMGDFGAN = false;
      isUnlocked = false;
      iIJOCONHKND.clear();
      return this;
    }

    @Override
    public ChessRogueCell clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      iIJOCONHKND.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueCell)) {
        return false;
      }
      ChessRogueCell other = (ChessRogueCell) o;
      return bitField0_ == other.bitField0_
        && (!hasEntranceId() || entranceId == other.entranceId)
        && (!hasNNMNHHPJBDB() || nNMNHHPJBDB == other.nNMNHHPJBDB)
        && (!hasNLBGDNLIONI() || nLBGDNLIONI == other.nLBGDNLIONI)
        && (!hasFOKKJJADPEA() || fOKKJJADPEA == other.fOKKJJADPEA)
        && (!hasPNKFAINKKCE() || pNKFAINKKCE == other.pNKFAINKKCE)
        && (!hasCellId() || cellId == other.cellId)
        && (!hasJLOBGDKNJLN() || jLOBGDKNJLN == other.jLOBGDKNJLN)
        && (!hasNewRoomId() || newRoomId == other.newRoomId)
        && (!hasPMBLMGDFGAN() || pMBLMGDFGAN == other.pMBLMGDFGAN)
        && (!hasIsUnlocked() || isUnlocked == other.isUnlocked)
        && (!hasIIJOCONHKND() || iIJOCONHKND.equals(other.iIJOCONHKND));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(entranceId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(nNMNHHPJBDB);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(nLBGDNLIONI);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(fOKKJJADPEA);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(pNKFAINKKCE);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(cellId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(jLOBGDKNJLN);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(newRoomId);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(pMBLMGDFGAN);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawByte((byte) 64);
        output.writeBoolNoTag(isUnlocked);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        for (int i = 0; i < iIJOCONHKND.length(); i++) {
          output.writeRawByte((byte) 32);
          output.writeUInt32NoTag(iIJOCONHKND.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(entranceId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(nNMNHHPJBDB);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(nLBGDNLIONI);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fOKKJJADPEA);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(pNKFAINKKCE);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cellId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(jLOBGDKNJLN);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(newRoomId);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += (1 * iIJOCONHKND.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(iIJOCONHKND);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueCell mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // entranceId
            entranceId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // nNMNHHPJBDB
            nNMNHHPJBDB = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // nLBGDNLIONI
            nLBGDNLIONI = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // fOKKJJADPEA
            fOKKJJADPEA = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // pNKFAINKKCE
            pNKFAINKKCE = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // cellId
            cellId = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // jLOBGDKNJLN
            jLOBGDKNJLN = input.readUInt32();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // newRoomId
            newRoomId = input.readUInt32();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // pMBLMGDFGAN
            pMBLMGDFGAN = input.readBool();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // isUnlocked
            isUnlocked = input.readBool();
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // iIJOCONHKND [packed=true]
            input.readPackedUInt32(iIJOCONHKND, tag);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 32: {
            // iIJOCONHKND [packed=false]
            tag = input.readRepeatedUInt32(iIJOCONHKND, tag);
            bitField0_ |= 0x00000400;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.entranceId, entranceId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.nNMNHHPJBDB, nNMNHHPJBDB);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.nLBGDNLIONI, nLBGDNLIONI);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.fOKKJJADPEA, fOKKJJADPEA);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.pNKFAINKKCE, pNKFAINKKCE);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.cellId, cellId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeUInt32(FieldNames.jLOBGDKNJLN, jLOBGDKNJLN);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeUInt32(FieldNames.newRoomId, newRoomId);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeBool(FieldNames.pMBLMGDFGAN, pMBLMGDFGAN);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeBool(FieldNames.isUnlocked, isUnlocked);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRepeatedUInt32(FieldNames.iIJOCONHKND, iIJOCONHKND);
      }
      output.endObject();
    }

    @Override
    public ChessRogueCell mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1655881329:
          case -207264956: {
            if (input.isAtField(FieldNames.entranceId)) {
              if (!input.trySkipNullValue()) {
                entranceId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1801949317: {
            if (input.isAtField(FieldNames.nNMNHHPJBDB)) {
              if (!input.trySkipNullValue()) {
                nNMNHHPJBDB = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2094582400: {
            if (input.isAtField(FieldNames.nLBGDNLIONI)) {
              if (!input.trySkipNullValue()) {
                nLBGDNLIONI = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -994096992: {
            if (input.isAtField(FieldNames.fOKKJJADPEA)) {
              if (!input.trySkipNullValue()) {
                fOKKJJADPEA = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1125363217: {
            if (input.isAtField(FieldNames.pNKFAINKKCE)) {
              if (!input.trySkipNullValue()) {
                pNKFAINKKCE = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1364082147:
          case 663147800: {
            if (input.isAtField(FieldNames.cellId)) {
              if (!input.trySkipNullValue()) {
                cellId = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1027507223: {
            if (input.isAtField(FieldNames.jLOBGDKNJLN)) {
              if (!input.trySkipNullValue()) {
                jLOBGDKNJLN = input.readUInt32();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -629039850:
          case 635252576: {
            if (input.isAtField(FieldNames.newRoomId)) {
              if (!input.trySkipNullValue()) {
                newRoomId = input.readUInt32();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2018761905: {
            if (input.isAtField(FieldNames.pMBLMGDFGAN)) {
              if (!input.trySkipNullValue()) {
                pMBLMGDFGAN = input.readBool();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1004219859:
          case -945979816: {
            if (input.isAtField(FieldNames.isUnlocked)) {
              if (!input.trySkipNullValue()) {
                isUnlocked = input.readBool();
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1810533462: {
            if (input.isAtField(FieldNames.iIJOCONHKND)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(iIJOCONHKND);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueCell clone() {
      return new ChessRogueCell().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueCell parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueCell(), data).checkInitialized();
    }

    public static ChessRogueCell parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueCell(), input).checkInitialized();
    }

    public static ChessRogueCell parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueCell(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueCell messages
     */
    public static MessageFactory<ChessRogueCell> getFactory() {
      return ChessRogueCellFactory.INSTANCE;
    }

    private enum ChessRogueCellFactory implements MessageFactory<ChessRogueCell> {
      INSTANCE;

      @Override
      public ChessRogueCell create() {
        return ChessRogueCell.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName entranceId = FieldName.forField("entranceId", "entrance_id");

      static final FieldName nNMNHHPJBDB = FieldName.forField("NNMNHHPJBDB");

      static final FieldName nLBGDNLIONI = FieldName.forField("NLBGDNLIONI");

      static final FieldName fOKKJJADPEA = FieldName.forField("FOKKJJADPEA");

      static final FieldName pNKFAINKKCE = FieldName.forField("PNKFAINKKCE");

      static final FieldName cellId = FieldName.forField("cellId", "cell_id");

      static final FieldName jLOBGDKNJLN = FieldName.forField("JLOBGDKNJLN");

      static final FieldName newRoomId = FieldName.forField("newRoomId", "new_room_id");

      static final FieldName pMBLMGDFGAN = FieldName.forField("PMBLMGDFGAN");

      static final FieldName isUnlocked = FieldName.forField("isUnlocked", "is_unlocked");

      static final FieldName iIJOCONHKND = FieldName.forField("IIJOCONHKND");
    }
  }
}
