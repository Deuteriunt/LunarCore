// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;
import us.hebi.quickbuf.RepeatedInt;

public final class QuestOuterClass {
  /**
   * Protobuf type {@code Quest}
   */
  public static final class Quest extends ProtoMessage<Quest> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int64 finish_time = 13;</code>
     */
    private long finishTime;

    /**
     * <code>optional uint32 id = 3;</code>
     */
    private int id;

    /**
     * <code>optional uint32 progress = 9;</code>
     */
    private int progress;

    /**
     * <code>optional .Quest.QuestStatus status = 5;</code>
     */
    private int status;

    /**
     * <code>repeated uint32 taken_achievement_level_list = 7;</code>
     */
    private final RepeatedInt takenAchievementLevelList = RepeatedInt.newEmptyInstance();

    private Quest() {
    }

    /**
     * @return a new empty instance of {@code Quest}
     */
    public static Quest newInstance() {
      return new Quest();
    }

    /**
     * <code>optional int64 finish_time = 13;</code>
     * @return whether the finishTime field is set
     */
    public boolean hasFinishTime() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 finish_time = 13;</code>
     * @return this
     */
    public Quest clearFinishTime() {
      bitField0_ &= ~0x00000001;
      finishTime = 0L;
      return this;
    }

    /**
     * <code>optional int64 finish_time = 13;</code>
     * @return the finishTime
     */
    public long getFinishTime() {
      return finishTime;
    }

    /**
     * <code>optional int64 finish_time = 13;</code>
     * @param value the finishTime to set
     * @return this
     */
    public Quest setFinishTime(final long value) {
      bitField0_ |= 0x00000001;
      finishTime = value;
      return this;
    }

    /**
     * <code>optional uint32 id = 3;</code>
     * @return whether the id field is set
     */
    public boolean hasId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 id = 3;</code>
     * @return this
     */
    public Quest clearId() {
      bitField0_ &= ~0x00000002;
      id = 0;
      return this;
    }

    /**
     * <code>optional uint32 id = 3;</code>
     * @return the id
     */
    public int getId() {
      return id;
    }

    /**
     * <code>optional uint32 id = 3;</code>
     * @param value the id to set
     * @return this
     */
    public Quest setId(final int value) {
      bitField0_ |= 0x00000002;
      id = value;
      return this;
    }

    /**
     * <code>optional uint32 progress = 9;</code>
     * @return whether the progress field is set
     */
    public boolean hasProgress() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 progress = 9;</code>
     * @return this
     */
    public Quest clearProgress() {
      bitField0_ &= ~0x00000004;
      progress = 0;
      return this;
    }

    /**
     * <code>optional uint32 progress = 9;</code>
     * @return the progress
     */
    public int getProgress() {
      return progress;
    }

    /**
     * <code>optional uint32 progress = 9;</code>
     * @param value the progress to set
     * @return this
     */
    public Quest setProgress(final int value) {
      bitField0_ |= 0x00000004;
      progress = value;
      return this;
    }

    /**
     * <code>optional .Quest.QuestStatus status = 5;</code>
     * @return whether the status field is set
     */
    public boolean hasStatus() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .Quest.QuestStatus status = 5;</code>
     * @return this
     */
    public Quest clearStatus() {
      bitField0_ &= ~0x00000008;
      status = 0;
      return this;
    }

    /**
     * <code>optional .Quest.QuestStatus status = 5;</code>
     * @return the status
     */
    public QuestStatus getStatus() {
      return QuestStatus.forNumber(status);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link Quest#getStatus()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getStatusValue() {
      return status;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link QuestStatus}. Setting an invalid value
     * can cause {@link Quest#getStatus()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public Quest setStatusValue(final int value) {
      bitField0_ |= 0x00000008;
      status = value;
      return this;
    }

    /**
     * <code>optional .Quest.QuestStatus status = 5;</code>
     * @param value the status to set
     * @return this
     */
    public Quest setStatus(final QuestStatus value) {
      bitField0_ |= 0x00000008;
      status = value.getNumber();
      return this;
    }

    /**
     * <code>repeated uint32 taken_achievement_level_list = 7;</code>
     * @return whether the takenAchievementLevelList field is set
     */
    public boolean hasTakenAchievementLevelList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 taken_achievement_level_list = 7;</code>
     * @return this
     */
    public Quest clearTakenAchievementLevelList() {
      bitField0_ &= ~0x00000010;
      takenAchievementLevelList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 taken_achievement_level_list = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableTakenAchievementLevelList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getTakenAchievementLevelList() {
      return takenAchievementLevelList;
    }

    /**
     * <code>repeated uint32 taken_achievement_level_list = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableTakenAchievementLevelList() {
      bitField0_ |= 0x00000010;
      return takenAchievementLevelList;
    }

    /**
     * <code>repeated uint32 taken_achievement_level_list = 7;</code>
     * @param value the takenAchievementLevelList to add
     * @return this
     */
    public Quest addTakenAchievementLevelList(final int value) {
      bitField0_ |= 0x00000010;
      takenAchievementLevelList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 taken_achievement_level_list = 7;</code>
     * @param values the takenAchievementLevelList to add
     * @return this
     */
    public Quest addAllTakenAchievementLevelList(final int... values) {
      bitField0_ |= 0x00000010;
      takenAchievementLevelList.addAll(values);
      return this;
    }

    @Override
    public Quest copyFrom(final Quest other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        finishTime = other.finishTime;
        id = other.id;
        progress = other.progress;
        status = other.status;
        takenAchievementLevelList.copyFrom(other.takenAchievementLevelList);
      }
      return this;
    }

    @Override
    public Quest mergeFrom(final Quest other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFinishTime()) {
        setFinishTime(other.finishTime);
      }
      if (other.hasId()) {
        setId(other.id);
      }
      if (other.hasProgress()) {
        setProgress(other.progress);
      }
      if (other.hasStatus()) {
        setStatusValue(other.status);
      }
      if (other.hasTakenAchievementLevelList()) {
        getMutableTakenAchievementLevelList().addAll(other.takenAchievementLevelList);
      }
      return this;
    }

    @Override
    public Quest clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      finishTime = 0L;
      id = 0;
      progress = 0;
      status = 0;
      takenAchievementLevelList.clear();
      return this;
    }

    @Override
    public Quest clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      takenAchievementLevelList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof Quest)) {
        return false;
      }
      Quest other = (Quest) o;
      return bitField0_ == other.bitField0_
        && (!hasFinishTime() || finishTime == other.finishTime)
        && (!hasId() || id == other.id)
        && (!hasProgress() || progress == other.progress)
        && (!hasStatus() || status == other.status)
        && (!hasTakenAchievementLevelList() || takenAchievementLevelList.equals(other.takenAchievementLevelList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 104);
        output.writeInt64NoTag(finishTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(progress);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 40);
        output.writeEnumNoTag(status);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < takenAchievementLevelList.length(); i++) {
          output.writeRawByte((byte) 56);
          output.writeUInt32NoTag(takenAchievementLevelList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(finishTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(progress);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(status);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * takenAchievementLevelList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(takenAchievementLevelList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public Quest mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 104: {
            // finishTime
            finishTime = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // id
            id = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // progress
            progress = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // status
            final int value = input.readInt32();
            if (QuestStatus.forNumber(value) != null) {
              status = value;
              bitField0_ |= 0x00000008;
            }
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // takenAchievementLevelList [packed=true]
            input.readPackedUInt32(takenAchievementLevelList, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 56: {
            // takenAchievementLevelList [packed=false]
            tag = input.readRepeatedUInt32(takenAchievementLevelList, tag);
            bitField0_ |= 0x00000010;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.finishTime, finishTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.id, id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.progress, progress);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeEnum(FieldNames.status, status, QuestStatus.converter());
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.takenAchievementLevelList, takenAchievementLevelList);
      }
      output.endObject();
    }

    @Override
    public Quest mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1151521280:
          case 1347904249: {
            if (input.isAtField(FieldNames.finishTime)) {
              if (!input.trySkipNullValue()) {
                finishTime = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3355: {
            if (input.isAtField(FieldNames.id)) {
              if (!input.trySkipNullValue()) {
                id = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1001078227: {
            if (input.isAtField(FieldNames.progress)) {
              if (!input.trySkipNullValue()) {
                progress = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -892481550: {
            if (input.isAtField(FieldNames.status)) {
              if (!input.trySkipNullValue()) {
                final QuestStatus value = input.readEnum(QuestStatus.converter());
                if (value != null) {
                  status = value.getNumber();
                  bitField0_ |= 0x00000008;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 149879610:
          case 1076639233: {
            if (input.isAtField(FieldNames.takenAchievementLevelList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(takenAchievementLevelList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public Quest clone() {
      return new Quest().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static Quest parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new Quest(), data).checkInitialized();
    }

    public static Quest parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Quest(), input).checkInitialized();
    }

    public static Quest parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new Quest(), input).checkInitialized();
    }

    /**
     * @return factory for creating Quest messages
     */
    public static MessageFactory<Quest> getFactory() {
      return QuestFactory.INSTANCE;
    }

    /**
     * Protobuf enum {@code QuestStatus}
     */
    public enum QuestStatus implements ProtoEnum<QuestStatus> {
      /**
       * <code>QUEST_NONE = 0;</code>
       */
      QUEST_NONE("QUEST_NONE", 0),

      /**
       * <code>QUEST_DOING = 1;</code>
       */
      QUEST_DOING("QUEST_DOING", 1),

      /**
       * <code>QUEST_FINISH = 2;</code>
       */
      QUEST_FINISH("QUEST_FINISH", 2),

      /**
       * <code>QUEST_CLOSE = 3;</code>
       */
      QUEST_CLOSE("QUEST_CLOSE", 3),

      /**
       * <code>QUEST_DELETE = 4;</code>
       */
      QUEST_DELETE("QUEST_DELETE", 4);

      /**
       * <code>QUEST_NONE = 0;</code>
       */
      public static final int QUEST_NONE_VALUE = 0;

      /**
       * <code>QUEST_DOING = 1;</code>
       */
      public static final int QUEST_DOING_VALUE = 1;

      /**
       * <code>QUEST_FINISH = 2;</code>
       */
      public static final int QUEST_FINISH_VALUE = 2;

      /**
       * <code>QUEST_CLOSE = 3;</code>
       */
      public static final int QUEST_CLOSE_VALUE = 3;

      /**
       * <code>QUEST_DELETE = 4;</code>
       */
      public static final int QUEST_DELETE_VALUE = 4;

      private final String name;

      private final int number;

      private QuestStatus(String name, int number) {
        this.name = name;
        this.number = number;
      }

      /**
       * @return the string representation of enum entry
       */
      @Override
      public String getName() {
        return name;
      }

      /**
       * @return the numeric wire value of this enum entry
       */
      @Override
      public int getNumber() {
        return number;
      }

      /**
       * @return a converter that maps between this enum's numeric and text representations
       */
      public static ProtoEnum.EnumConverter<QuestStatus> converter() {
        return QuestStatusConverter.INSTANCE;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value, or null if unknown.
       */
      public static QuestStatus forNumber(int value) {
        return QuestStatusConverter.INSTANCE.forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @param other Fallback value in case the value is not known.
       * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
       */
      public static QuestStatus forNumberOr(int number, QuestStatus other) {
        QuestStatus value = forNumber(number);
        return value == null ? other : value;
      }

      enum QuestStatusConverter implements ProtoEnum.EnumConverter<QuestStatus> {
        INSTANCE;

        private static final QuestStatus[] lookup = new QuestStatus[5];

        static {
          lookup[0] = QUEST_NONE;
          lookup[1] = QUEST_DOING;
          lookup[2] = QUEST_FINISH;
          lookup[3] = QUEST_CLOSE;
          lookup[4] = QUEST_DELETE;
        }

        @Override
        public final QuestStatus forNumber(final int value) {
          if (value >= 0 && value < lookup.length) {
            return lookup[value];
          }
          return null;
        }

        @Override
        public final QuestStatus forName(final CharSequence value) {
          if (value.length() == 10) {
            if (ProtoUtil.isEqual("QUEST_NONE", value)) {
              return QUEST_NONE;
            }
          }
          if (value.length() == 11) {
            if (ProtoUtil.isEqual("QUEST_DOING", value)) {
              return QUEST_DOING;
            }
            if (ProtoUtil.isEqual("QUEST_CLOSE", value)) {
              return QUEST_CLOSE;
            }
          }
          if (value.length() == 12) {
            if (ProtoUtil.isEqual("QUEST_FINISH", value)) {
              return QUEST_FINISH;
            }
            if (ProtoUtil.isEqual("QUEST_DELETE", value)) {
              return QUEST_DELETE;
            }
          }
          return null;
        }
      }
    }

    private enum QuestFactory implements MessageFactory<Quest> {
      INSTANCE;

      @Override
      public Quest create() {
        return Quest.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName finishTime = FieldName.forField("finishTime", "finish_time");

      static final FieldName id = FieldName.forField("id");

      static final FieldName progress = FieldName.forField("progress");

      static final FieldName status = FieldName.forField("status");

      static final FieldName takenAchievementLevelList = FieldName.forField("takenAchievementLevelList", "taken_achievement_level_list");
    }
  }
}
