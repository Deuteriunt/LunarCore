// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueNousDiceOuterClass {
  /**
   * Protobuf type {@code ChessRogueNousDice}
   */
  public static final class ChessRogueNousDice extends ProtoMessage<ChessRogueNousDice> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 dice_branch_id = 1;</code>
     */
    private int diceBranchId;

    /**
     * <pre>
     * FEDEMDEEJML JLCEDGIHAFF = 12;
     * </pre>
     *
     * <code>optional uint32 reroll_times = 2;</code>
     */
    private int rerollTimes;

    /**
     * <pre>
     * NMNBNLMAJGC cur_surface_effect = 6;
     * </pre>
     *
     * <code>optional uint32 cur_surface_id = 3;</code>
     */
    private int curSurfaceId;

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 cheat_times = 4;</code>
     */
    private int cheatTimes;

    /**
     * <pre>
     *  10
     * </pre>
     *
     * <code>optional uint32 HIJBOPMGBAP = 5;</code>
     */
    private int hIJBOPMGBAP;

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 GFGCPJOHMEL = 9;</code>
     */
    private int gFGCPJOHMEL;

    /**
     * <code>optional uint32 cur_surface_index = 13;</code>
     */
    private int curSurfaceIndex;

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 dice_branch_id_remote = 14;</code>
     */
    private int diceBranchIdRemote;

    /**
     * <pre>
     * sint32 PAOHKKNCNCD = 625;
     * </pre>
     *
     * <code>optional bool BDENADDOCAC = 10;</code>
     */
    private boolean bDENADDOCAC;

    /**
     * <pre>
     * NMNBNLMAJGC POHKHEGDOHO = 343;  // guess its about modifier
     * </pre>
     *
     * <code>optional bool CHGLMLDAMJH = 1185;</code>
     */
    private boolean cHGLMLDAMJH;

    /**
     * <code>optional .ChessRogueNousDiceInfo dice_info = 208;</code>
     */
    private final ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo diceInfo = ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo.newInstance();

    /**
     * <code>repeated uint32 NOGJMMEDGLL = 833;</code>
     */
    private final RepeatedInt nOGJMMEDGLL = RepeatedInt.newEmptyInstance();

    private ChessRogueNousDice() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueNousDice}
     */
    public static ChessRogueNousDice newInstance() {
      return new ChessRogueNousDice();
    }

    /**
     * <code>optional uint32 dice_branch_id = 1;</code>
     * @return whether the diceBranchId field is set
     */
    public boolean hasDiceBranchId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 dice_branch_id = 1;</code>
     * @return this
     */
    public ChessRogueNousDice clearDiceBranchId() {
      bitField0_ &= ~0x00000001;
      diceBranchId = 0;
      return this;
    }

    /**
     * <code>optional uint32 dice_branch_id = 1;</code>
     * @return the diceBranchId
     */
    public int getDiceBranchId() {
      return diceBranchId;
    }

    /**
     * <code>optional uint32 dice_branch_id = 1;</code>
     * @param value the diceBranchId to set
     * @return this
     */
    public ChessRogueNousDice setDiceBranchId(final int value) {
      bitField0_ |= 0x00000001;
      diceBranchId = value;
      return this;
    }

    /**
     * <pre>
     * FEDEMDEEJML JLCEDGIHAFF = 12;
     * </pre>
     *
     * <code>optional uint32 reroll_times = 2;</code>
     * @return whether the rerollTimes field is set
     */
    public boolean hasRerollTimes() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     * FEDEMDEEJML JLCEDGIHAFF = 12;
     * </pre>
     *
     * <code>optional uint32 reroll_times = 2;</code>
     * @return this
     */
    public ChessRogueNousDice clearRerollTimes() {
      bitField0_ &= ~0x00000002;
      rerollTimes = 0;
      return this;
    }

    /**
     * <pre>
     * FEDEMDEEJML JLCEDGIHAFF = 12;
     * </pre>
     *
     * <code>optional uint32 reroll_times = 2;</code>
     * @return the rerollTimes
     */
    public int getRerollTimes() {
      return rerollTimes;
    }

    /**
     * <pre>
     * FEDEMDEEJML JLCEDGIHAFF = 12;
     * </pre>
     *
     * <code>optional uint32 reroll_times = 2;</code>
     * @param value the rerollTimes to set
     * @return this
     */
    public ChessRogueNousDice setRerollTimes(final int value) {
      bitField0_ |= 0x00000002;
      rerollTimes = value;
      return this;
    }

    /**
     * <pre>
     * NMNBNLMAJGC cur_surface_effect = 6;
     * </pre>
     *
     * <code>optional uint32 cur_surface_id = 3;</code>
     * @return whether the curSurfaceId field is set
     */
    public boolean hasCurSurfaceId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <pre>
     * NMNBNLMAJGC cur_surface_effect = 6;
     * </pre>
     *
     * <code>optional uint32 cur_surface_id = 3;</code>
     * @return this
     */
    public ChessRogueNousDice clearCurSurfaceId() {
      bitField0_ &= ~0x00000004;
      curSurfaceId = 0;
      return this;
    }

    /**
     * <pre>
     * NMNBNLMAJGC cur_surface_effect = 6;
     * </pre>
     *
     * <code>optional uint32 cur_surface_id = 3;</code>
     * @return the curSurfaceId
     */
    public int getCurSurfaceId() {
      return curSurfaceId;
    }

    /**
     * <pre>
     * NMNBNLMAJGC cur_surface_effect = 6;
     * </pre>
     *
     * <code>optional uint32 cur_surface_id = 3;</code>
     * @param value the curSurfaceId to set
     * @return this
     */
    public ChessRogueNousDice setCurSurfaceId(final int value) {
      bitField0_ |= 0x00000004;
      curSurfaceId = value;
      return this;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 cheat_times = 4;</code>
     * @return whether the cheatTimes field is set
     */
    public boolean hasCheatTimes() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 cheat_times = 4;</code>
     * @return this
     */
    public ChessRogueNousDice clearCheatTimes() {
      bitField0_ &= ~0x00000008;
      cheatTimes = 0;
      return this;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 cheat_times = 4;</code>
     * @return the cheatTimes
     */
    public int getCheatTimes() {
      return cheatTimes;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 cheat_times = 4;</code>
     * @param value the cheatTimes to set
     * @return this
     */
    public ChessRogueNousDice setCheatTimes(final int value) {
      bitField0_ |= 0x00000008;
      cheatTimes = value;
      return this;
    }

    /**
     * <pre>
     *  10
     * </pre>
     *
     * <code>optional uint32 HIJBOPMGBAP = 5;</code>
     * @return whether the hIJBOPMGBAP field is set
     */
    public boolean hasHIJBOPMGBAP() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     *  10
     * </pre>
     *
     * <code>optional uint32 HIJBOPMGBAP = 5;</code>
     * @return this
     */
    public ChessRogueNousDice clearHIJBOPMGBAP() {
      bitField0_ &= ~0x00000010;
      hIJBOPMGBAP = 0;
      return this;
    }

    /**
     * <pre>
     *  10
     * </pre>
     *
     * <code>optional uint32 HIJBOPMGBAP = 5;</code>
     * @return the hIJBOPMGBAP
     */
    public int getHIJBOPMGBAP() {
      return hIJBOPMGBAP;
    }

    /**
     * <pre>
     *  10
     * </pre>
     *
     * <code>optional uint32 HIJBOPMGBAP = 5;</code>
     * @param value the hIJBOPMGBAP to set
     * @return this
     */
    public ChessRogueNousDice setHIJBOPMGBAP(final int value) {
      bitField0_ |= 0x00000010;
      hIJBOPMGBAP = value;
      return this;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 GFGCPJOHMEL = 9;</code>
     * @return whether the gFGCPJOHMEL field is set
     */
    public boolean hasGFGCPJOHMEL() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 GFGCPJOHMEL = 9;</code>
     * @return this
     */
    public ChessRogueNousDice clearGFGCPJOHMEL() {
      bitField0_ &= ~0x00000020;
      gFGCPJOHMEL = 0;
      return this;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 GFGCPJOHMEL = 9;</code>
     * @return the gFGCPJOHMEL
     */
    public int getGFGCPJOHMEL() {
      return gFGCPJOHMEL;
    }

    /**
     * <pre>
     *  1
     * </pre>
     *
     * <code>optional uint32 GFGCPJOHMEL = 9;</code>
     * @param value the gFGCPJOHMEL to set
     * @return this
     */
    public ChessRogueNousDice setGFGCPJOHMEL(final int value) {
      bitField0_ |= 0x00000020;
      gFGCPJOHMEL = value;
      return this;
    }

    /**
     * <code>optional uint32 cur_surface_index = 13;</code>
     * @return whether the curSurfaceIndex field is set
     */
    public boolean hasCurSurfaceIndex() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional uint32 cur_surface_index = 13;</code>
     * @return this
     */
    public ChessRogueNousDice clearCurSurfaceIndex() {
      bitField0_ &= ~0x00000040;
      curSurfaceIndex = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_surface_index = 13;</code>
     * @return the curSurfaceIndex
     */
    public int getCurSurfaceIndex() {
      return curSurfaceIndex;
    }

    /**
     * <code>optional uint32 cur_surface_index = 13;</code>
     * @param value the curSurfaceIndex to set
     * @return this
     */
    public ChessRogueNousDice setCurSurfaceIndex(final int value) {
      bitField0_ |= 0x00000040;
      curSurfaceIndex = value;
      return this;
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 dice_branch_id_remote = 14;</code>
     * @return whether the diceBranchIdRemote field is set
     */
    public boolean hasDiceBranchIdRemote() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 dice_branch_id_remote = 14;</code>
     * @return this
     */
    public ChessRogueNousDice clearDiceBranchIdRemote() {
      bitField0_ &= ~0x00000080;
      diceBranchIdRemote = 0;
      return this;
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 dice_branch_id_remote = 14;</code>
     * @return the diceBranchIdRemote
     */
    public int getDiceBranchIdRemote() {
      return diceBranchIdRemote;
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 dice_branch_id_remote = 14;</code>
     * @param value the diceBranchIdRemote to set
     * @return this
     */
    public ChessRogueNousDice setDiceBranchIdRemote(final int value) {
      bitField0_ |= 0x00000080;
      diceBranchIdRemote = value;
      return this;
    }

    /**
     * <pre>
     * sint32 PAOHKKNCNCD = 625;
     * </pre>
     *
     * <code>optional bool BDENADDOCAC = 10;</code>
     * @return whether the bDENADDOCAC field is set
     */
    public boolean hasBDENADDOCAC() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <pre>
     * sint32 PAOHKKNCNCD = 625;
     * </pre>
     *
     * <code>optional bool BDENADDOCAC = 10;</code>
     * @return this
     */
    public ChessRogueNousDice clearBDENADDOCAC() {
      bitField0_ &= ~0x00000100;
      bDENADDOCAC = false;
      return this;
    }

    /**
     * <pre>
     * sint32 PAOHKKNCNCD = 625;
     * </pre>
     *
     * <code>optional bool BDENADDOCAC = 10;</code>
     * @return the bDENADDOCAC
     */
    public boolean getBDENADDOCAC() {
      return bDENADDOCAC;
    }

    /**
     * <pre>
     * sint32 PAOHKKNCNCD = 625;
     * </pre>
     *
     * <code>optional bool BDENADDOCAC = 10;</code>
     * @param value the bDENADDOCAC to set
     * @return this
     */
    public ChessRogueNousDice setBDENADDOCAC(final boolean value) {
      bitField0_ |= 0x00000100;
      bDENADDOCAC = value;
      return this;
    }

    /**
     * <pre>
     * NMNBNLMAJGC POHKHEGDOHO = 343;  // guess its about modifier
     * </pre>
     *
     * <code>optional bool CHGLMLDAMJH = 1185;</code>
     * @return whether the cHGLMLDAMJH field is set
     */
    public boolean hasCHGLMLDAMJH() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <pre>
     * NMNBNLMAJGC POHKHEGDOHO = 343;  // guess its about modifier
     * </pre>
     *
     * <code>optional bool CHGLMLDAMJH = 1185;</code>
     * @return this
     */
    public ChessRogueNousDice clearCHGLMLDAMJH() {
      bitField0_ &= ~0x00000200;
      cHGLMLDAMJH = false;
      return this;
    }

    /**
     * <pre>
     * NMNBNLMAJGC POHKHEGDOHO = 343;  // guess its about modifier
     * </pre>
     *
     * <code>optional bool CHGLMLDAMJH = 1185;</code>
     * @return the cHGLMLDAMJH
     */
    public boolean getCHGLMLDAMJH() {
      return cHGLMLDAMJH;
    }

    /**
     * <pre>
     * NMNBNLMAJGC POHKHEGDOHO = 343;  // guess its about modifier
     * </pre>
     *
     * <code>optional bool CHGLMLDAMJH = 1185;</code>
     * @param value the cHGLMLDAMJH to set
     * @return this
     */
    public ChessRogueNousDice setCHGLMLDAMJH(final boolean value) {
      bitField0_ |= 0x00000200;
      cHGLMLDAMJH = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueNousDiceInfo dice_info = 208;</code>
     * @return whether the diceInfo field is set
     */
    public boolean hasDiceInfo() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>optional .ChessRogueNousDiceInfo dice_info = 208;</code>
     * @return this
     */
    public ChessRogueNousDice clearDiceInfo() {
      bitField0_ &= ~0x00000400;
      diceInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueNousDiceInfo dice_info = 208;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDiceInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo getDiceInfo() {
      return diceInfo;
    }

    /**
     * <code>optional .ChessRogueNousDiceInfo dice_info = 208;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo getMutableDiceInfo() {
      bitField0_ |= 0x00000400;
      return diceInfo;
    }

    /**
     * <code>optional .ChessRogueNousDiceInfo dice_info = 208;</code>
     * @param value the diceInfo to set
     * @return this
     */
    public ChessRogueNousDice setDiceInfo(
        final ChessRogueNousDiceInfoOuterClass.ChessRogueNousDiceInfo value) {
      bitField0_ |= 0x00000400;
      diceInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 NOGJMMEDGLL = 833;</code>
     * @return whether the nOGJMMEDGLL field is set
     */
    public boolean hasNOGJMMEDGLL() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>repeated uint32 NOGJMMEDGLL = 833;</code>
     * @return this
     */
    public ChessRogueNousDice clearNOGJMMEDGLL() {
      bitField0_ &= ~0x00000800;
      nOGJMMEDGLL.clear();
      return this;
    }

    /**
     * <code>repeated uint32 NOGJMMEDGLL = 833;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableNOGJMMEDGLL()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getNOGJMMEDGLL() {
      return nOGJMMEDGLL;
    }

    /**
     * <code>repeated uint32 NOGJMMEDGLL = 833;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableNOGJMMEDGLL() {
      bitField0_ |= 0x00000800;
      return nOGJMMEDGLL;
    }

    /**
     * <code>repeated uint32 NOGJMMEDGLL = 833;</code>
     * @param value the nOGJMMEDGLL to add
     * @return this
     */
    public ChessRogueNousDice addNOGJMMEDGLL(final int value) {
      bitField0_ |= 0x00000800;
      nOGJMMEDGLL.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 NOGJMMEDGLL = 833;</code>
     * @param values the nOGJMMEDGLL to add
     * @return this
     */
    public ChessRogueNousDice addAllNOGJMMEDGLL(final int... values) {
      bitField0_ |= 0x00000800;
      nOGJMMEDGLL.addAll(values);
      return this;
    }

    @Override
    public ChessRogueNousDice copyFrom(final ChessRogueNousDice other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        diceBranchId = other.diceBranchId;
        rerollTimes = other.rerollTimes;
        curSurfaceId = other.curSurfaceId;
        cheatTimes = other.cheatTimes;
        hIJBOPMGBAP = other.hIJBOPMGBAP;
        gFGCPJOHMEL = other.gFGCPJOHMEL;
        curSurfaceIndex = other.curSurfaceIndex;
        diceBranchIdRemote = other.diceBranchIdRemote;
        bDENADDOCAC = other.bDENADDOCAC;
        cHGLMLDAMJH = other.cHGLMLDAMJH;
        diceInfo.copyFrom(other.diceInfo);
        nOGJMMEDGLL.copyFrom(other.nOGJMMEDGLL);
      }
      return this;
    }

    @Override
    public ChessRogueNousDice mergeFrom(final ChessRogueNousDice other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDiceBranchId()) {
        setDiceBranchId(other.diceBranchId);
      }
      if (other.hasRerollTimes()) {
        setRerollTimes(other.rerollTimes);
      }
      if (other.hasCurSurfaceId()) {
        setCurSurfaceId(other.curSurfaceId);
      }
      if (other.hasCheatTimes()) {
        setCheatTimes(other.cheatTimes);
      }
      if (other.hasHIJBOPMGBAP()) {
        setHIJBOPMGBAP(other.hIJBOPMGBAP);
      }
      if (other.hasGFGCPJOHMEL()) {
        setGFGCPJOHMEL(other.gFGCPJOHMEL);
      }
      if (other.hasCurSurfaceIndex()) {
        setCurSurfaceIndex(other.curSurfaceIndex);
      }
      if (other.hasDiceBranchIdRemote()) {
        setDiceBranchIdRemote(other.diceBranchIdRemote);
      }
      if (other.hasBDENADDOCAC()) {
        setBDENADDOCAC(other.bDENADDOCAC);
      }
      if (other.hasCHGLMLDAMJH()) {
        setCHGLMLDAMJH(other.cHGLMLDAMJH);
      }
      if (other.hasDiceInfo()) {
        getMutableDiceInfo().mergeFrom(other.diceInfo);
      }
      if (other.hasNOGJMMEDGLL()) {
        getMutableNOGJMMEDGLL().addAll(other.nOGJMMEDGLL);
      }
      return this;
    }

    @Override
    public ChessRogueNousDice clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      diceBranchId = 0;
      rerollTimes = 0;
      curSurfaceId = 0;
      cheatTimes = 0;
      hIJBOPMGBAP = 0;
      gFGCPJOHMEL = 0;
      curSurfaceIndex = 0;
      diceBranchIdRemote = 0;
      bDENADDOCAC = false;
      cHGLMLDAMJH = false;
      diceInfo.clear();
      nOGJMMEDGLL.clear();
      return this;
    }

    @Override
    public ChessRogueNousDice clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      diceInfo.clearQuick();
      nOGJMMEDGLL.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueNousDice)) {
        return false;
      }
      ChessRogueNousDice other = (ChessRogueNousDice) o;
      return bitField0_ == other.bitField0_
        && (!hasDiceBranchId() || diceBranchId == other.diceBranchId)
        && (!hasRerollTimes() || rerollTimes == other.rerollTimes)
        && (!hasCurSurfaceId() || curSurfaceId == other.curSurfaceId)
        && (!hasCheatTimes() || cheatTimes == other.cheatTimes)
        && (!hasHIJBOPMGBAP() || hIJBOPMGBAP == other.hIJBOPMGBAP)
        && (!hasGFGCPJOHMEL() || gFGCPJOHMEL == other.gFGCPJOHMEL)
        && (!hasCurSurfaceIndex() || curSurfaceIndex == other.curSurfaceIndex)
        && (!hasDiceBranchIdRemote() || diceBranchIdRemote == other.diceBranchIdRemote)
        && (!hasBDENADDOCAC() || bDENADDOCAC == other.bDENADDOCAC)
        && (!hasCHGLMLDAMJH() || cHGLMLDAMJH == other.cHGLMLDAMJH)
        && (!hasDiceInfo() || diceInfo.equals(other.diceInfo))
        && (!hasNOGJMMEDGLL() || nOGJMMEDGLL.equals(other.nOGJMMEDGLL));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(diceBranchId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(rerollTimes);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(curSurfaceId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(cheatTimes);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(hIJBOPMGBAP);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(gFGCPJOHMEL);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(curSurfaceIndex);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(diceBranchIdRemote);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 80);
        output.writeBoolNoTag(bDENADDOCAC);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawLittleEndian16((short) 19080);
        output.writeBoolNoTag(cHGLMLDAMJH);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawLittleEndian16((short) 3458);
        output.writeMessageNoTag(diceInfo);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        for (int i = 0; i < nOGJMMEDGLL.length(); i++) {
          output.writeRawLittleEndian16((short) 13448);
          output.writeUInt32NoTag(nOGJMMEDGLL.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(diceBranchId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rerollTimes);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curSurfaceId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cheatTimes);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(hIJBOPMGBAP);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gFGCPJOHMEL);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curSurfaceIndex);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(diceBranchIdRemote);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 3;
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 2 + ProtoSink.computeMessageSizeNoTag(diceInfo);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += (2 * nOGJMMEDGLL.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(nOGJMMEDGLL);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueNousDice mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // diceBranchId
            diceBranchId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // rerollTimes
            rerollTimes = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // curSurfaceId
            curSurfaceId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // cheatTimes
            cheatTimes = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // hIJBOPMGBAP
            hIJBOPMGBAP = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // gFGCPJOHMEL
            gFGCPJOHMEL = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // curSurfaceIndex
            curSurfaceIndex = input.readUInt32();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // diceBranchIdRemote
            diceBranchIdRemote = input.readUInt32();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // bDENADDOCAC
            bDENADDOCAC = input.readBool();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 9480) {
              break;
            }
          }
          case 9480: {
            // cHGLMLDAMJH
            cHGLMLDAMJH = input.readBool();
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 1666) {
              break;
            }
          }
          case 1666: {
            // diceInfo
            input.readMessage(diceInfo);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 6666) {
              break;
            }
          }
          case 6666: {
            // nOGJMMEDGLL [packed=true]
            input.readPackedUInt32(nOGJMMEDGLL, tag);
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 6664: {
            // nOGJMMEDGLL [packed=false]
            tag = input.readRepeatedUInt32(nOGJMMEDGLL, tag);
            bitField0_ |= 0x00000800;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.diceBranchId, diceBranchId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.rerollTimes, rerollTimes);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.curSurfaceId, curSurfaceId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.cheatTimes, cheatTimes);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.hIJBOPMGBAP, hIJBOPMGBAP);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.gFGCPJOHMEL, gFGCPJOHMEL);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeUInt32(FieldNames.curSurfaceIndex, curSurfaceIndex);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeUInt32(FieldNames.diceBranchIdRemote, diceBranchIdRemote);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeBool(FieldNames.bDENADDOCAC, bDENADDOCAC);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeBool(FieldNames.cHGLMLDAMJH, cHGLMLDAMJH);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeMessage(FieldNames.diceInfo, diceInfo);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRepeatedUInt32(FieldNames.nOGJMMEDGLL, nOGJMMEDGLL);
      }
      output.endObject();
    }

    @Override
    public ChessRogueNousDice mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 216999716:
          case 1050456640: {
            if (input.isAtField(FieldNames.diceBranchId)) {
              if (!input.trySkipNullValue()) {
                diceBranchId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -836069386:
          case 176620407: {
            if (input.isAtField(FieldNames.rerollTimes)) {
              if (!input.trySkipNullValue()) {
                rerollTimes = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1658805176:
          case -1978690228: {
            if (input.isAtField(FieldNames.curSurfaceId)) {
              if (!input.trySkipNullValue()) {
                curSurfaceId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2046149069:
          case 1318855898: {
            if (input.isAtField(FieldNames.cheatTimes)) {
              if (!input.trySkipNullValue()) {
                cheatTimes = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 218596029: {
            if (input.isAtField(FieldNames.hIJBOPMGBAP)) {
              if (!input.trySkipNullValue()) {
                hIJBOPMGBAP = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1897943334: {
            if (input.isAtField(FieldNames.gFGCPJOHMEL)) {
              if (!input.trySkipNullValue()) {
                gFGCPJOHMEL = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 429106821:
          case 1265952513: {
            if (input.isAtField(FieldNames.curSurfaceIndex)) {
              if (!input.trySkipNullValue()) {
                curSurfaceIndex = input.readUInt32();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1925587082:
          case 1293761317: {
            if (input.isAtField(FieldNames.diceBranchIdRemote)) {
              if (!input.trySkipNullValue()) {
                diceBranchIdRemote = input.readUInt32();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -907576788: {
            if (input.isAtField(FieldNames.bDENADDOCAC)) {
              if (!input.trySkipNullValue()) {
                bDENADDOCAC = input.readBool();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 287558437: {
            if (input.isAtField(FieldNames.cHGLMLDAMJH)) {
              if (!input.trySkipNullValue()) {
                cHGLMLDAMJH = input.readBool();
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -184174347:
          case -1394261434: {
            if (input.isAtField(FieldNames.diceInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(diceInfo);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1459318404: {
            if (input.isAtField(FieldNames.nOGJMMEDGLL)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(nOGJMMEDGLL);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueNousDice clone() {
      return new ChessRogueNousDice().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueNousDice parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueNousDice(), data).checkInitialized();
    }

    public static ChessRogueNousDice parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousDice(), input).checkInitialized();
    }

    public static ChessRogueNousDice parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousDice(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueNousDice messages
     */
    public static MessageFactory<ChessRogueNousDice> getFactory() {
      return ChessRogueNousDiceFactory.INSTANCE;
    }

    private enum ChessRogueNousDiceFactory implements MessageFactory<ChessRogueNousDice> {
      INSTANCE;

      @Override
      public ChessRogueNousDice create() {
        return ChessRogueNousDice.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName diceBranchId = FieldName.forField("diceBranchId", "dice_branch_id");

      static final FieldName rerollTimes = FieldName.forField("rerollTimes", "reroll_times");

      static final FieldName curSurfaceId = FieldName.forField("curSurfaceId", "cur_surface_id");

      static final FieldName cheatTimes = FieldName.forField("cheatTimes", "cheat_times");

      static final FieldName hIJBOPMGBAP = FieldName.forField("HIJBOPMGBAP");

      static final FieldName gFGCPJOHMEL = FieldName.forField("GFGCPJOHMEL");

      static final FieldName curSurfaceIndex = FieldName.forField("curSurfaceIndex", "cur_surface_index");

      static final FieldName diceBranchIdRemote = FieldName.forField("diceBranchIdRemote", "dice_branch_id_remote");

      static final FieldName bDENADDOCAC = FieldName.forField("BDENADDOCAC");

      static final FieldName cHGLMLDAMJH = FieldName.forField("CHGLMLDAMJH");

      static final FieldName diceInfo = FieldName.forField("diceInfo", "dice_info");

      static final FieldName nOGJMMEDGLL = FieldName.forField("NOGJMMEDGLL");
    }
  }
}
