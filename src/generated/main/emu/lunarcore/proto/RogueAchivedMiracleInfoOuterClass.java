// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueAchivedMiracleInfoOuterClass {
  /**
   * Protobuf type {@code RogueAchivedMiracleInfo}
   */
  public static final class RogueAchivedMiracleInfo extends ProtoMessage<RogueAchivedMiracleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 unlock_slot_count = 9;</code>
     */
    private int unlockSlotCount;

    /**
     * <code>optional uint32 total_slot_count = 10;</code>
     */
    private int totalSlotCount;

    /**
     * <code>repeated .RogueMiracle miracle_list = 14;</code>
     */
    private final RepeatedMessage<RogueMiracleOuterClass.RogueMiracle> miracleList = RepeatedMessage.newEmptyInstance(RogueMiracleOuterClass.RogueMiracle.getFactory());

    private RogueAchivedMiracleInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueAchivedMiracleInfo}
     */
    public static RogueAchivedMiracleInfo newInstance() {
      return new RogueAchivedMiracleInfo();
    }

    /**
     * <code>optional uint32 unlock_slot_count = 9;</code>
     * @return whether the unlockSlotCount field is set
     */
    public boolean hasUnlockSlotCount() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 unlock_slot_count = 9;</code>
     * @return this
     */
    public RogueAchivedMiracleInfo clearUnlockSlotCount() {
      bitField0_ &= ~0x00000001;
      unlockSlotCount = 0;
      return this;
    }

    /**
     * <code>optional uint32 unlock_slot_count = 9;</code>
     * @return the unlockSlotCount
     */
    public int getUnlockSlotCount() {
      return unlockSlotCount;
    }

    /**
     * <code>optional uint32 unlock_slot_count = 9;</code>
     * @param value the unlockSlotCount to set
     * @return this
     */
    public RogueAchivedMiracleInfo setUnlockSlotCount(final int value) {
      bitField0_ |= 0x00000001;
      unlockSlotCount = value;
      return this;
    }

    /**
     * <code>optional uint32 total_slot_count = 10;</code>
     * @return whether the totalSlotCount field is set
     */
    public boolean hasTotalSlotCount() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 total_slot_count = 10;</code>
     * @return this
     */
    public RogueAchivedMiracleInfo clearTotalSlotCount() {
      bitField0_ &= ~0x00000002;
      totalSlotCount = 0;
      return this;
    }

    /**
     * <code>optional uint32 total_slot_count = 10;</code>
     * @return the totalSlotCount
     */
    public int getTotalSlotCount() {
      return totalSlotCount;
    }

    /**
     * <code>optional uint32 total_slot_count = 10;</code>
     * @param value the totalSlotCount to set
     * @return this
     */
    public RogueAchivedMiracleInfo setTotalSlotCount(final int value) {
      bitField0_ |= 0x00000002;
      totalSlotCount = value;
      return this;
    }

    /**
     * <code>repeated .RogueMiracle miracle_list = 14;</code>
     * @return whether the miracleList field is set
     */
    public boolean hasMiracleList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .RogueMiracle miracle_list = 14;</code>
     * @return this
     */
    public RogueAchivedMiracleInfo clearMiracleList() {
      bitField0_ &= ~0x00000004;
      miracleList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueMiracle miracle_list = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMiracleList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueMiracleOuterClass.RogueMiracle> getMiracleList() {
      return miracleList;
    }

    /**
     * <code>repeated .RogueMiracle miracle_list = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueMiracleOuterClass.RogueMiracle> getMutableMiracleList() {
      bitField0_ |= 0x00000004;
      return miracleList;
    }

    /**
     * <code>repeated .RogueMiracle miracle_list = 14;</code>
     * @param value the miracleList to add
     * @return this
     */
    public RogueAchivedMiracleInfo addMiracleList(final RogueMiracleOuterClass.RogueMiracle value) {
      bitField0_ |= 0x00000004;
      miracleList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueMiracle miracle_list = 14;</code>
     * @param values the miracleList to add
     * @return this
     */
    public RogueAchivedMiracleInfo addAllMiracleList(
        final RogueMiracleOuterClass.RogueMiracle... values) {
      bitField0_ |= 0x00000004;
      miracleList.addAll(values);
      return this;
    }

    @Override
    public RogueAchivedMiracleInfo copyFrom(final RogueAchivedMiracleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        unlockSlotCount = other.unlockSlotCount;
        totalSlotCount = other.totalSlotCount;
        miracleList.copyFrom(other.miracleList);
      }
      return this;
    }

    @Override
    public RogueAchivedMiracleInfo mergeFrom(final RogueAchivedMiracleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUnlockSlotCount()) {
        setUnlockSlotCount(other.unlockSlotCount);
      }
      if (other.hasTotalSlotCount()) {
        setTotalSlotCount(other.totalSlotCount);
      }
      if (other.hasMiracleList()) {
        getMutableMiracleList().addAll(other.miracleList);
      }
      return this;
    }

    @Override
    public RogueAchivedMiracleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unlockSlotCount = 0;
      totalSlotCount = 0;
      miracleList.clear();
      return this;
    }

    @Override
    public RogueAchivedMiracleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      miracleList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueAchivedMiracleInfo)) {
        return false;
      }
      RogueAchivedMiracleInfo other = (RogueAchivedMiracleInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasUnlockSlotCount() || unlockSlotCount == other.unlockSlotCount)
        && (!hasTotalSlotCount() || totalSlotCount == other.totalSlotCount)
        && (!hasMiracleList() || miracleList.equals(other.miracleList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(unlockSlotCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(totalSlotCount);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < miracleList.length(); i++) {
          output.writeRawByte((byte) 114);
          output.writeMessageNoTag(miracleList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(unlockSlotCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(totalSlotCount);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * miracleList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(miracleList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueAchivedMiracleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 72: {
            // unlockSlotCount
            unlockSlotCount = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // totalSlotCount
            totalSlotCount = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // miracleList
            tag = input.readRepeatedMessage(miracleList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.unlockSlotCount, unlockSlotCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.totalSlotCount, totalSlotCount);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.miracleList, miracleList);
      }
      output.endObject();
    }

    @Override
    public RogueAchivedMiracleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1641951949:
          case 1265281897: {
            if (input.isAtField(FieldNames.unlockSlotCount)) {
              if (!input.trySkipNullValue()) {
                unlockSlotCount = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1481291469:
          case 1489383273: {
            if (input.isAtField(FieldNames.totalSlotCount)) {
              if (!input.trySkipNullValue()) {
                totalSlotCount = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 760391855:
          case 2114937772: {
            if (input.isAtField(FieldNames.miracleList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(miracleList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueAchivedMiracleInfo clone() {
      return new RogueAchivedMiracleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueAchivedMiracleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueAchivedMiracleInfo(), data).checkInitialized();
    }

    public static RogueAchivedMiracleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueAchivedMiracleInfo(), input).checkInitialized();
    }

    public static RogueAchivedMiracleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueAchivedMiracleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueAchivedMiracleInfo messages
     */
    public static MessageFactory<RogueAchivedMiracleInfo> getFactory() {
      return RogueAchivedMiracleInfoFactory.INSTANCE;
    }

    private enum RogueAchivedMiracleInfoFactory implements MessageFactory<RogueAchivedMiracleInfo> {
      INSTANCE;

      @Override
      public RogueAchivedMiracleInfo create() {
        return RogueAchivedMiracleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName unlockSlotCount = FieldName.forField("unlockSlotCount", "unlock_slot_count");

      static final FieldName totalSlotCount = FieldName.forField("totalSlotCount", "total_slot_count");

      static final FieldName miracleList = FieldName.forField("miracleList", "miracle_list");
    }
  }
}
