// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class EnterRogueMapRoomScRspOuterClass {
  /**
   * Protobuf type {@code EnterRogueMapRoomScRsp}
   */
  public static final class EnterRogueMapRoomScRsp extends ProtoMessage<EnterRogueMapRoomScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cur_site_id = 2;</code>
     */
    private int curSiteId;

    /**
     * <code>optional uint32 retcode = 5;</code>
     */
    private int retcode;

    /**
     * <code>optional .LineupInfo lineup = 4;</code>
     */
    private final LineupInfoOuterClass.LineupInfo lineup = LineupInfoOuterClass.LineupInfo.newInstance();

    /**
     * <code>optional .SceneInfo scene = 7;</code>
     */
    private final SceneInfoOuterClass.SceneInfo scene = SceneInfoOuterClass.SceneInfo.newInstance();

    private EnterRogueMapRoomScRsp() {
    }

    /**
     * @return a new empty instance of {@code EnterRogueMapRoomScRsp}
     */
    public static EnterRogueMapRoomScRsp newInstance() {
      return new EnterRogueMapRoomScRsp();
    }

    /**
     * <code>optional uint32 cur_site_id = 2;</code>
     * @return whether the curSiteId field is set
     */
    public boolean hasCurSiteId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cur_site_id = 2;</code>
     * @return this
     */
    public EnterRogueMapRoomScRsp clearCurSiteId() {
      bitField0_ &= ~0x00000001;
      curSiteId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_site_id = 2;</code>
     * @return the curSiteId
     */
    public int getCurSiteId() {
      return curSiteId;
    }

    /**
     * <code>optional uint32 cur_site_id = 2;</code>
     * @param value the curSiteId to set
     * @return this
     */
    public EnterRogueMapRoomScRsp setCurSiteId(final int value) {
      bitField0_ |= 0x00000001;
      curSiteId = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @return this
     */
    public EnterRogueMapRoomScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 5;</code>
     * @param value the retcode to set
     * @return this
     */
    public EnterRogueMapRoomScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional .LineupInfo lineup = 4;</code>
     * @return whether the lineup field is set
     */
    public boolean hasLineup() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .LineupInfo lineup = 4;</code>
     * @return this
     */
    public EnterRogueMapRoomScRsp clearLineup() {
      bitField0_ &= ~0x00000004;
      lineup.clear();
      return this;
    }

    /**
     * <code>optional .LineupInfo lineup = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLineup()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public LineupInfoOuterClass.LineupInfo getLineup() {
      return lineup;
    }

    /**
     * <code>optional .LineupInfo lineup = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public LineupInfoOuterClass.LineupInfo getMutableLineup() {
      bitField0_ |= 0x00000004;
      return lineup;
    }

    /**
     * <code>optional .LineupInfo lineup = 4;</code>
     * @param value the lineup to set
     * @return this
     */
    public EnterRogueMapRoomScRsp setLineup(final LineupInfoOuterClass.LineupInfo value) {
      bitField0_ |= 0x00000004;
      lineup.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .SceneInfo scene = 7;</code>
     * @return whether the scene field is set
     */
    public boolean hasScene() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .SceneInfo scene = 7;</code>
     * @return this
     */
    public EnterRogueMapRoomScRsp clearScene() {
      bitField0_ &= ~0x00000008;
      scene.clear();
      return this;
    }

    /**
     * <code>optional .SceneInfo scene = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableScene()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public SceneInfoOuterClass.SceneInfo getScene() {
      return scene;
    }

    /**
     * <code>optional .SceneInfo scene = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public SceneInfoOuterClass.SceneInfo getMutableScene() {
      bitField0_ |= 0x00000008;
      return scene;
    }

    /**
     * <code>optional .SceneInfo scene = 7;</code>
     * @param value the scene to set
     * @return this
     */
    public EnterRogueMapRoomScRsp setScene(final SceneInfoOuterClass.SceneInfo value) {
      bitField0_ |= 0x00000008;
      scene.copyFrom(value);
      return this;
    }

    @Override
    public EnterRogueMapRoomScRsp copyFrom(final EnterRogueMapRoomScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curSiteId = other.curSiteId;
        retcode = other.retcode;
        lineup.copyFrom(other.lineup);
        scene.copyFrom(other.scene);
      }
      return this;
    }

    @Override
    public EnterRogueMapRoomScRsp mergeFrom(final EnterRogueMapRoomScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurSiteId()) {
        setCurSiteId(other.curSiteId);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasLineup()) {
        getMutableLineup().mergeFrom(other.lineup);
      }
      if (other.hasScene()) {
        getMutableScene().mergeFrom(other.scene);
      }
      return this;
    }

    @Override
    public EnterRogueMapRoomScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curSiteId = 0;
      retcode = 0;
      lineup.clear();
      scene.clear();
      return this;
    }

    @Override
    public EnterRogueMapRoomScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      lineup.clearQuick();
      scene.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof EnterRogueMapRoomScRsp)) {
        return false;
      }
      EnterRogueMapRoomScRsp other = (EnterRogueMapRoomScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasCurSiteId() || curSiteId == other.curSiteId)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasLineup() || lineup.equals(other.lineup))
        && (!hasScene() || scene.equals(other.scene));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(curSiteId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 34);
        output.writeMessageNoTag(lineup);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(scene);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curSiteId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(lineup);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(scene);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public EnterRogueMapRoomScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // curSiteId
            curSiteId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // lineup
            input.readMessage(lineup);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // scene
            input.readMessage(scene);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.curSiteId, curSiteId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.lineup, lineup);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.scene, scene);
      }
      output.endObject();
    }

    @Override
    public EnterRogueMapRoomScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -226037470:
          case 1245078036: {
            if (input.isAtField(FieldNames.curSiteId)) {
              if (!input.trySkipNullValue()) {
                curSiteId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1102671473: {
            if (input.isAtField(FieldNames.lineup)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(lineup);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 109254796: {
            if (input.isAtField(FieldNames.scene)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(scene);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public EnterRogueMapRoomScRsp clone() {
      return new EnterRogueMapRoomScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static EnterRogueMapRoomScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new EnterRogueMapRoomScRsp(), data).checkInitialized();
    }

    public static EnterRogueMapRoomScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new EnterRogueMapRoomScRsp(), input).checkInitialized();
    }

    public static EnterRogueMapRoomScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new EnterRogueMapRoomScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating EnterRogueMapRoomScRsp messages
     */
    public static MessageFactory<EnterRogueMapRoomScRsp> getFactory() {
      return EnterRogueMapRoomScRspFactory.INSTANCE;
    }

    private enum EnterRogueMapRoomScRspFactory implements MessageFactory<EnterRogueMapRoomScRsp> {
      INSTANCE;

      @Override
      public EnterRogueMapRoomScRsp create() {
        return EnterRogueMapRoomScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curSiteId = FieldName.forField("curSiteId", "cur_site_id");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName lineup = FieldName.forField("lineup");

      static final FieldName scene = FieldName.forField("scene");
    }
  }
}
