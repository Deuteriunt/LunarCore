// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChessRogueNousDiceInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueNousDiceInfo}
   */
  public static final class ChessRogueNousDiceInfo extends ProtoMessage<ChessRogueNousDiceInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 dice_branch_id = 5;</code>
     */
    private int diceBranchId;

    /**
     * <code>optional uint32 question_difficulty = 10;</code>
     */
    private int questionDifficulty;

    /**
     * <code>optional uint32 max_difficulty = 14;</code>
     */
    private int maxDifficulty;

    /**
     * <code>repeated .ChessRogueNousDiceSurfaceInfo dice_surface = 2;</code>
     */
    private final RepeatedMessage<ChessRogueNousDiceSurfaceInfoOuterClass.ChessRogueNousDiceSurfaceInfo> diceSurface = RepeatedMessage.newEmptyInstance(ChessRogueNousDiceSurfaceInfoOuterClass.ChessRogueNousDiceSurfaceInfo.getFactory());

    private ChessRogueNousDiceInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueNousDiceInfo}
     */
    public static ChessRogueNousDiceInfo newInstance() {
      return new ChessRogueNousDiceInfo();
    }

    /**
     * <code>optional uint32 dice_branch_id = 5;</code>
     * @return whether the diceBranchId field is set
     */
    public boolean hasDiceBranchId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 dice_branch_id = 5;</code>
     * @return this
     */
    public ChessRogueNousDiceInfo clearDiceBranchId() {
      bitField0_ &= ~0x00000001;
      diceBranchId = 0;
      return this;
    }

    /**
     * <code>optional uint32 dice_branch_id = 5;</code>
     * @return the diceBranchId
     */
    public int getDiceBranchId() {
      return diceBranchId;
    }

    /**
     * <code>optional uint32 dice_branch_id = 5;</code>
     * @param value the diceBranchId to set
     * @return this
     */
    public ChessRogueNousDiceInfo setDiceBranchId(final int value) {
      bitField0_ |= 0x00000001;
      diceBranchId = value;
      return this;
    }

    /**
     * <code>optional uint32 question_difficulty = 10;</code>
     * @return whether the questionDifficulty field is set
     */
    public boolean hasQuestionDifficulty() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 question_difficulty = 10;</code>
     * @return this
     */
    public ChessRogueNousDiceInfo clearQuestionDifficulty() {
      bitField0_ &= ~0x00000002;
      questionDifficulty = 0;
      return this;
    }

    /**
     * <code>optional uint32 question_difficulty = 10;</code>
     * @return the questionDifficulty
     */
    public int getQuestionDifficulty() {
      return questionDifficulty;
    }

    /**
     * <code>optional uint32 question_difficulty = 10;</code>
     * @param value the questionDifficulty to set
     * @return this
     */
    public ChessRogueNousDiceInfo setQuestionDifficulty(final int value) {
      bitField0_ |= 0x00000002;
      questionDifficulty = value;
      return this;
    }

    /**
     * <code>optional uint32 max_difficulty = 14;</code>
     * @return whether the maxDifficulty field is set
     */
    public boolean hasMaxDifficulty() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 max_difficulty = 14;</code>
     * @return this
     */
    public ChessRogueNousDiceInfo clearMaxDifficulty() {
      bitField0_ &= ~0x00000004;
      maxDifficulty = 0;
      return this;
    }

    /**
     * <code>optional uint32 max_difficulty = 14;</code>
     * @return the maxDifficulty
     */
    public int getMaxDifficulty() {
      return maxDifficulty;
    }

    /**
     * <code>optional uint32 max_difficulty = 14;</code>
     * @param value the maxDifficulty to set
     * @return this
     */
    public ChessRogueNousDiceInfo setMaxDifficulty(final int value) {
      bitField0_ |= 0x00000004;
      maxDifficulty = value;
      return this;
    }

    /**
     * <code>repeated .ChessRogueNousDiceSurfaceInfo dice_surface = 2;</code>
     * @return whether the diceSurface field is set
     */
    public boolean hasDiceSurface() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .ChessRogueNousDiceSurfaceInfo dice_surface = 2;</code>
     * @return this
     */
    public ChessRogueNousDiceInfo clearDiceSurface() {
      bitField0_ &= ~0x00000008;
      diceSurface.clear();
      return this;
    }

    /**
     * <code>repeated .ChessRogueNousDiceSurfaceInfo dice_surface = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDiceSurface()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<ChessRogueNousDiceSurfaceInfoOuterClass.ChessRogueNousDiceSurfaceInfo> getDiceSurface(
        ) {
      return diceSurface;
    }

    /**
     * <code>repeated .ChessRogueNousDiceSurfaceInfo dice_surface = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<ChessRogueNousDiceSurfaceInfoOuterClass.ChessRogueNousDiceSurfaceInfo> getMutableDiceSurface(
        ) {
      bitField0_ |= 0x00000008;
      return diceSurface;
    }

    /**
     * <code>repeated .ChessRogueNousDiceSurfaceInfo dice_surface = 2;</code>
     * @param value the diceSurface to add
     * @return this
     */
    public ChessRogueNousDiceInfo addDiceSurface(
        final ChessRogueNousDiceSurfaceInfoOuterClass.ChessRogueNousDiceSurfaceInfo value) {
      bitField0_ |= 0x00000008;
      diceSurface.add(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueNousDiceSurfaceInfo dice_surface = 2;</code>
     * @param values the diceSurface to add
     * @return this
     */
    public ChessRogueNousDiceInfo addAllDiceSurface(
        final ChessRogueNousDiceSurfaceInfoOuterClass.ChessRogueNousDiceSurfaceInfo... values) {
      bitField0_ |= 0x00000008;
      diceSurface.addAll(values);
      return this;
    }

    @Override
    public ChessRogueNousDiceInfo copyFrom(final ChessRogueNousDiceInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        diceBranchId = other.diceBranchId;
        questionDifficulty = other.questionDifficulty;
        maxDifficulty = other.maxDifficulty;
        diceSurface.copyFrom(other.diceSurface);
      }
      return this;
    }

    @Override
    public ChessRogueNousDiceInfo mergeFrom(final ChessRogueNousDiceInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDiceBranchId()) {
        setDiceBranchId(other.diceBranchId);
      }
      if (other.hasQuestionDifficulty()) {
        setQuestionDifficulty(other.questionDifficulty);
      }
      if (other.hasMaxDifficulty()) {
        setMaxDifficulty(other.maxDifficulty);
      }
      if (other.hasDiceSurface()) {
        getMutableDiceSurface().addAll(other.diceSurface);
      }
      return this;
    }

    @Override
    public ChessRogueNousDiceInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      diceBranchId = 0;
      questionDifficulty = 0;
      maxDifficulty = 0;
      diceSurface.clear();
      return this;
    }

    @Override
    public ChessRogueNousDiceInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      diceSurface.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueNousDiceInfo)) {
        return false;
      }
      ChessRogueNousDiceInfo other = (ChessRogueNousDiceInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasDiceBranchId() || diceBranchId == other.diceBranchId)
        && (!hasQuestionDifficulty() || questionDifficulty == other.questionDifficulty)
        && (!hasMaxDifficulty() || maxDifficulty == other.maxDifficulty)
        && (!hasDiceSurface() || diceSurface.equals(other.diceSurface));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(diceBranchId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(questionDifficulty);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(maxDifficulty);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < diceSurface.length(); i++) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(diceSurface.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(diceBranchId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(questionDifficulty);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(maxDifficulty);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * diceSurface.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(diceSurface);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueNousDiceInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // diceBranchId
            diceBranchId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // questionDifficulty
            questionDifficulty = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // maxDifficulty
            maxDifficulty = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // diceSurface
            tag = input.readRepeatedMessage(diceSurface, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.diceBranchId, diceBranchId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.questionDifficulty, questionDifficulty);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.maxDifficulty, maxDifficulty);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.diceSurface, diceSurface);
      }
      output.endObject();
    }

    @Override
    public ChessRogueNousDiceInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 216999716:
          case 1050456640: {
            if (input.isAtField(FieldNames.diceBranchId)) {
              if (!input.trySkipNullValue()) {
                diceBranchId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1586161729:
          case -1998600780: {
            if (input.isAtField(FieldNames.questionDifficulty)) {
              if (!input.trySkipNullValue()) {
                questionDifficulty = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 657132607:
          case -733732490: {
            if (input.isAtField(FieldNames.maxDifficulty)) {
              if (!input.trySkipNullValue()) {
                maxDifficulty = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1568317690:
          case 682756117: {
            if (input.isAtField(FieldNames.diceSurface)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(diceSurface);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueNousDiceInfo clone() {
      return new ChessRogueNousDiceInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueNousDiceInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueNousDiceInfo(), data).checkInitialized();
    }

    public static ChessRogueNousDiceInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousDiceInfo(), input).checkInitialized();
    }

    public static ChessRogueNousDiceInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousDiceInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueNousDiceInfo messages
     */
    public static MessageFactory<ChessRogueNousDiceInfo> getFactory() {
      return ChessRogueNousDiceInfoFactory.INSTANCE;
    }

    private enum ChessRogueNousDiceInfoFactory implements MessageFactory<ChessRogueNousDiceInfo> {
      INSTANCE;

      @Override
      public ChessRogueNousDiceInfo create() {
        return ChessRogueNousDiceInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName diceBranchId = FieldName.forField("diceBranchId", "dice_branch_id");

      static final FieldName questionDifficulty = FieldName.forField("questionDifficulty", "question_difficulty");

      static final FieldName maxDifficulty = FieldName.forField("maxDifficulty", "max_difficulty");

      static final FieldName diceSurface = FieldName.forField("diceSurface", "dice_surface");
    }
  }
}
