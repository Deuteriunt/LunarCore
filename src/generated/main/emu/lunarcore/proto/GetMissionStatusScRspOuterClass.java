// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetMissionStatusScRspOuterClass {
  /**
   * Protobuf type {@code GetMissionStatusScRsp}
   */
  public static final class GetMissionStatusScRsp extends ProtoMessage<GetMissionStatusScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 4;</code>
     */
    private int retcode;

    /**
     * <code>repeated uint32 unfinished_main_mission_id_list = 10;</code>
     */
    private final RepeatedInt unfinishedMainMissionIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 disabled_main_mission_id_list = 11;</code>
     */
    private final RepeatedInt disabledMainMissionIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 13;</code>
     */
    private final RepeatedInt finishedMainMissionIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .Mission mission_event_status_list = 9;</code>
     */
    private final RepeatedMessage<MissionOuterClass.Mission> missionEventStatusList = RepeatedMessage.newEmptyInstance(MissionOuterClass.Mission.getFactory());

    /**
     * <code>repeated .Mission sub_mission_status_list = 14;</code>
     */
    private final RepeatedMessage<MissionOuterClass.Mission> subMissionStatusList = RepeatedMessage.newEmptyInstance(MissionOuterClass.Mission.getFactory());

    private GetMissionStatusScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetMissionStatusScRsp}
     */
    public static GetMissionStatusScRsp newInstance() {
      return new GetMissionStatusScRsp();
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return this
     */
    public GetMissionStatusScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 4;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetMissionStatusScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>repeated uint32 unfinished_main_mission_id_list = 10;</code>
     * @return whether the unfinishedMainMissionIdList field is set
     */
    public boolean hasUnfinishedMainMissionIdList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 unfinished_main_mission_id_list = 10;</code>
     * @return this
     */
    public GetMissionStatusScRsp clearUnfinishedMainMissionIdList() {
      bitField0_ &= ~0x00000002;
      unfinishedMainMissionIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 unfinished_main_mission_id_list = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableUnfinishedMainMissionIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getUnfinishedMainMissionIdList() {
      return unfinishedMainMissionIdList;
    }

    /**
     * <code>repeated uint32 unfinished_main_mission_id_list = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableUnfinishedMainMissionIdList() {
      bitField0_ |= 0x00000002;
      return unfinishedMainMissionIdList;
    }

    /**
     * <code>repeated uint32 unfinished_main_mission_id_list = 10;</code>
     * @param value the unfinishedMainMissionIdList to add
     * @return this
     */
    public GetMissionStatusScRsp addUnfinishedMainMissionIdList(final int value) {
      bitField0_ |= 0x00000002;
      unfinishedMainMissionIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 unfinished_main_mission_id_list = 10;</code>
     * @param values the unfinishedMainMissionIdList to add
     * @return this
     */
    public GetMissionStatusScRsp addAllUnfinishedMainMissionIdList(final int... values) {
      bitField0_ |= 0x00000002;
      unfinishedMainMissionIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 disabled_main_mission_id_list = 11;</code>
     * @return whether the disabledMainMissionIdList field is set
     */
    public boolean hasDisabledMainMissionIdList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 disabled_main_mission_id_list = 11;</code>
     * @return this
     */
    public GetMissionStatusScRsp clearDisabledMainMissionIdList() {
      bitField0_ &= ~0x00000004;
      disabledMainMissionIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 disabled_main_mission_id_list = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDisabledMainMissionIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getDisabledMainMissionIdList() {
      return disabledMainMissionIdList;
    }

    /**
     * <code>repeated uint32 disabled_main_mission_id_list = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableDisabledMainMissionIdList() {
      bitField0_ |= 0x00000004;
      return disabledMainMissionIdList;
    }

    /**
     * <code>repeated uint32 disabled_main_mission_id_list = 11;</code>
     * @param value the disabledMainMissionIdList to add
     * @return this
     */
    public GetMissionStatusScRsp addDisabledMainMissionIdList(final int value) {
      bitField0_ |= 0x00000004;
      disabledMainMissionIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 disabled_main_mission_id_list = 11;</code>
     * @param values the disabledMainMissionIdList to add
     * @return this
     */
    public GetMissionStatusScRsp addAllDisabledMainMissionIdList(final int... values) {
      bitField0_ |= 0x00000004;
      disabledMainMissionIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 13;</code>
     * @return whether the finishedMainMissionIdList field is set
     */
    public boolean hasFinishedMainMissionIdList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 13;</code>
     * @return this
     */
    public GetMissionStatusScRsp clearFinishedMainMissionIdList() {
      bitField0_ &= ~0x00000008;
      finishedMainMissionIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFinishedMainMissionIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFinishedMainMissionIdList() {
      return finishedMainMissionIdList;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFinishedMainMissionIdList() {
      bitField0_ |= 0x00000008;
      return finishedMainMissionIdList;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 13;</code>
     * @param value the finishedMainMissionIdList to add
     * @return this
     */
    public GetMissionStatusScRsp addFinishedMainMissionIdList(final int value) {
      bitField0_ |= 0x00000008;
      finishedMainMissionIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 13;</code>
     * @param values the finishedMainMissionIdList to add
     * @return this
     */
    public GetMissionStatusScRsp addAllFinishedMainMissionIdList(final int... values) {
      bitField0_ |= 0x00000008;
      finishedMainMissionIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Mission mission_event_status_list = 9;</code>
     * @return whether the missionEventStatusList field is set
     */
    public boolean hasMissionEventStatusList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .Mission mission_event_status_list = 9;</code>
     * @return this
     */
    public GetMissionStatusScRsp clearMissionEventStatusList() {
      bitField0_ &= ~0x00000010;
      missionEventStatusList.clear();
      return this;
    }

    /**
     * <code>repeated .Mission mission_event_status_list = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMissionEventStatusList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMissionEventStatusList() {
      return missionEventStatusList;
    }

    /**
     * <code>repeated .Mission mission_event_status_list = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMutableMissionEventStatusList() {
      bitField0_ |= 0x00000010;
      return missionEventStatusList;
    }

    /**
     * <code>repeated .Mission mission_event_status_list = 9;</code>
     * @param value the missionEventStatusList to add
     * @return this
     */
    public GetMissionStatusScRsp addMissionEventStatusList(final MissionOuterClass.Mission value) {
      bitField0_ |= 0x00000010;
      missionEventStatusList.add(value);
      return this;
    }

    /**
     * <code>repeated .Mission mission_event_status_list = 9;</code>
     * @param values the missionEventStatusList to add
     * @return this
     */
    public GetMissionStatusScRsp addAllMissionEventStatusList(
        final MissionOuterClass.Mission... values) {
      bitField0_ |= 0x00000010;
      missionEventStatusList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Mission sub_mission_status_list = 14;</code>
     * @return whether the subMissionStatusList field is set
     */
    public boolean hasSubMissionStatusList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated .Mission sub_mission_status_list = 14;</code>
     * @return this
     */
    public GetMissionStatusScRsp clearSubMissionStatusList() {
      bitField0_ &= ~0x00000020;
      subMissionStatusList.clear();
      return this;
    }

    /**
     * <code>repeated .Mission sub_mission_status_list = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSubMissionStatusList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MissionOuterClass.Mission> getSubMissionStatusList() {
      return subMissionStatusList;
    }

    /**
     * <code>repeated .Mission sub_mission_status_list = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMutableSubMissionStatusList() {
      bitField0_ |= 0x00000020;
      return subMissionStatusList;
    }

    /**
     * <code>repeated .Mission sub_mission_status_list = 14;</code>
     * @param value the subMissionStatusList to add
     * @return this
     */
    public GetMissionStatusScRsp addSubMissionStatusList(final MissionOuterClass.Mission value) {
      bitField0_ |= 0x00000020;
      subMissionStatusList.add(value);
      return this;
    }

    /**
     * <code>repeated .Mission sub_mission_status_list = 14;</code>
     * @param values the subMissionStatusList to add
     * @return this
     */
    public GetMissionStatusScRsp addAllSubMissionStatusList(
        final MissionOuterClass.Mission... values) {
      bitField0_ |= 0x00000020;
      subMissionStatusList.addAll(values);
      return this;
    }

    @Override
    public GetMissionStatusScRsp copyFrom(final GetMissionStatusScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        unfinishedMainMissionIdList.copyFrom(other.unfinishedMainMissionIdList);
        disabledMainMissionIdList.copyFrom(other.disabledMainMissionIdList);
        finishedMainMissionIdList.copyFrom(other.finishedMainMissionIdList);
        missionEventStatusList.copyFrom(other.missionEventStatusList);
        subMissionStatusList.copyFrom(other.subMissionStatusList);
      }
      return this;
    }

    @Override
    public GetMissionStatusScRsp mergeFrom(final GetMissionStatusScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasUnfinishedMainMissionIdList()) {
        getMutableUnfinishedMainMissionIdList().addAll(other.unfinishedMainMissionIdList);
      }
      if (other.hasDisabledMainMissionIdList()) {
        getMutableDisabledMainMissionIdList().addAll(other.disabledMainMissionIdList);
      }
      if (other.hasFinishedMainMissionIdList()) {
        getMutableFinishedMainMissionIdList().addAll(other.finishedMainMissionIdList);
      }
      if (other.hasMissionEventStatusList()) {
        getMutableMissionEventStatusList().addAll(other.missionEventStatusList);
      }
      if (other.hasSubMissionStatusList()) {
        getMutableSubMissionStatusList().addAll(other.subMissionStatusList);
      }
      return this;
    }

    @Override
    public GetMissionStatusScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      unfinishedMainMissionIdList.clear();
      disabledMainMissionIdList.clear();
      finishedMainMissionIdList.clear();
      missionEventStatusList.clear();
      subMissionStatusList.clear();
      return this;
    }

    @Override
    public GetMissionStatusScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unfinishedMainMissionIdList.clear();
      disabledMainMissionIdList.clear();
      finishedMainMissionIdList.clear();
      missionEventStatusList.clearQuick();
      subMissionStatusList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetMissionStatusScRsp)) {
        return false;
      }
      GetMissionStatusScRsp other = (GetMissionStatusScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasUnfinishedMainMissionIdList() || unfinishedMainMissionIdList.equals(other.unfinishedMainMissionIdList))
        && (!hasDisabledMainMissionIdList() || disabledMainMissionIdList.equals(other.disabledMainMissionIdList))
        && (!hasFinishedMainMissionIdList() || finishedMainMissionIdList.equals(other.finishedMainMissionIdList))
        && (!hasMissionEventStatusList() || missionEventStatusList.equals(other.missionEventStatusList))
        && (!hasSubMissionStatusList() || subMissionStatusList.equals(other.subMissionStatusList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < unfinishedMainMissionIdList.length(); i++) {
          output.writeRawByte((byte) 80);
          output.writeUInt32NoTag(unfinishedMainMissionIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < disabledMainMissionIdList.length(); i++) {
          output.writeRawByte((byte) 88);
          output.writeUInt32NoTag(disabledMainMissionIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < finishedMainMissionIdList.length(); i++) {
          output.writeRawByte((byte) 104);
          output.writeUInt32NoTag(finishedMainMissionIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < missionEventStatusList.length(); i++) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(missionEventStatusList.get(i));
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < subMissionStatusList.length(); i++) {
          output.writeRawByte((byte) 114);
          output.writeMessageNoTag(subMissionStatusList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * unfinishedMainMissionIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(unfinishedMainMissionIdList);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * disabledMainMissionIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(disabledMainMissionIdList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * finishedMainMissionIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(finishedMainMissionIdList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * missionEventStatusList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(missionEventStatusList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * subMissionStatusList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(subMissionStatusList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetMissionStatusScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // unfinishedMainMissionIdList [packed=true]
            input.readPackedUInt32(unfinishedMainMissionIdList, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // disabledMainMissionIdList [packed=true]
            input.readPackedUInt32(disabledMainMissionIdList, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // finishedMainMissionIdList [packed=true]
            input.readPackedUInt32(finishedMainMissionIdList, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // missionEventStatusList
            tag = input.readRepeatedMessage(missionEventStatusList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // subMissionStatusList
            tag = input.readRepeatedMessage(subMissionStatusList, tag);
            bitField0_ |= 0x00000020;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 80: {
            // unfinishedMainMissionIdList [packed=false]
            tag = input.readRepeatedUInt32(unfinishedMainMissionIdList, tag);
            bitField0_ |= 0x00000002;
            break;
          }
          case 88: {
            // disabledMainMissionIdList [packed=false]
            tag = input.readRepeatedUInt32(disabledMainMissionIdList, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 104: {
            // finishedMainMissionIdList [packed=false]
            tag = input.readRepeatedUInt32(finishedMainMissionIdList, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.unfinishedMainMissionIdList, unfinishedMainMissionIdList);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.disabledMainMissionIdList, disabledMainMissionIdList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.finishedMainMissionIdList, finishedMainMissionIdList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.missionEventStatusList, missionEventStatusList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedMessage(FieldNames.subMissionStatusList, subMissionStatusList);
      }
      output.endObject();
    }

    @Override
    public GetMissionStatusScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 61133057:
          case 1704637629: {
            if (input.isAtField(FieldNames.unfinishedMainMissionIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(unfinishedMainMissionIdList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 83823792:
          case 1929478380: {
            if (input.isAtField(FieldNames.disabledMainMissionIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(disabledMainMissionIdList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 104231290:
          case -1929023306: {
            if (input.isAtField(FieldNames.finishedMainMissionIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(finishedMainMissionIdList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 582053566:
          case 1494751923: {
            if (input.isAtField(FieldNames.missionEventStatusList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(missionEventStatusList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1842850820:
          case 1165580825: {
            if (input.isAtField(FieldNames.subMissionStatusList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(subMissionStatusList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetMissionStatusScRsp clone() {
      return new GetMissionStatusScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetMissionStatusScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetMissionStatusScRsp(), data).checkInitialized();
    }

    public static GetMissionStatusScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetMissionStatusScRsp(), input).checkInitialized();
    }

    public static GetMissionStatusScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetMissionStatusScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetMissionStatusScRsp messages
     */
    public static MessageFactory<GetMissionStatusScRsp> getFactory() {
      return GetMissionStatusScRspFactory.INSTANCE;
    }

    private enum GetMissionStatusScRspFactory implements MessageFactory<GetMissionStatusScRsp> {
      INSTANCE;

      @Override
      public GetMissionStatusScRsp create() {
        return GetMissionStatusScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName unfinishedMainMissionIdList = FieldName.forField("unfinishedMainMissionIdList", "unfinished_main_mission_id_list");

      static final FieldName disabledMainMissionIdList = FieldName.forField("disabledMainMissionIdList", "disabled_main_mission_id_list");

      static final FieldName finishedMainMissionIdList = FieldName.forField("finishedMainMissionIdList", "finished_main_mission_id_list");

      static final FieldName missionEventStatusList = FieldName.forField("missionEventStatusList", "mission_event_status_list");

      static final FieldName subMissionStatusList = FieldName.forField("subMissionStatusList", "sub_mission_status_list");
    }
  }
}
