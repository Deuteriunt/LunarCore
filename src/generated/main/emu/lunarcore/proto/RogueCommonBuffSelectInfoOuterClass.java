// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueCommonBuffSelectInfoOuterClass {
  /**
   * Protobuf type {@code RogueCommonBuffSelectInfo}
   */
  public static final class RogueCommonBuffSelectInfo extends ProtoMessage<RogueCommonBuffSelectInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 source_total_count = 1;</code>
     */
    private int sourceTotalCount;

    /**
     * <code>optional uint32 select_buff_source_hint = 4;</code>
     */
    private int selectBuffSourceHint;

    /**
     * <code>optional uint32 roll_buff_free_times = 8;</code>
     */
    private int rollBuffFreeTimes;

    /**
     * <code>optional uint32 roll_buff_max_times = 9;</code>
     */
    private int rollBuffMaxTimes;

    /**
     * <code>optional uint32 source_cur_count = 10;</code>
     */
    private int sourceCurCount;

    /**
     * <code>optional uint32 roll_buff_times = 11;</code>
     */
    private int rollBuffTimes;

    /**
     * <code>optional .RogueCommonBuffSelectSource source_type = 14;</code>
     */
    private int sourceType;

    /**
     * <code>optional bool can_roll = 2;</code>
     */
    private boolean canRoll;

    /**
     * <code>optional .ItemCostList roll_buffs_cost = 12;</code>
     */
    private final ItemCostListOuterClass.ItemCostList rollBuffsCost = ItemCostListOuterClass.ItemCostList.newInstance();

    /**
     * <code>repeated uint32 first_buff_type_list = 6;</code>
     */
    private final RepeatedInt firstBuffTypeList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 handbook_unlock_buff_id_list = 15;</code>
     */
    private final RepeatedInt handbookUnlockBuffIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .RogueCommonBuff maze_buff_list = 7;</code>
     */
    private final RepeatedMessage<RogueCommonBuffOuterClass.RogueCommonBuff> mazeBuffList = RepeatedMessage.newEmptyInstance(RogueCommonBuffOuterClass.RogueCommonBuff.getFactory());

    private RogueCommonBuffSelectInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueCommonBuffSelectInfo}
     */
    public static RogueCommonBuffSelectInfo newInstance() {
      return new RogueCommonBuffSelectInfo();
    }

    /**
     * <code>optional uint32 source_total_count = 1;</code>
     * @return whether the sourceTotalCount field is set
     */
    public boolean hasSourceTotalCount() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 source_total_count = 1;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearSourceTotalCount() {
      bitField0_ &= ~0x00000001;
      sourceTotalCount = 0;
      return this;
    }

    /**
     * <code>optional uint32 source_total_count = 1;</code>
     * @return the sourceTotalCount
     */
    public int getSourceTotalCount() {
      return sourceTotalCount;
    }

    /**
     * <code>optional uint32 source_total_count = 1;</code>
     * @param value the sourceTotalCount to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setSourceTotalCount(final int value) {
      bitField0_ |= 0x00000001;
      sourceTotalCount = value;
      return this;
    }

    /**
     * <code>optional uint32 select_buff_source_hint = 4;</code>
     * @return whether the selectBuffSourceHint field is set
     */
    public boolean hasSelectBuffSourceHint() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 select_buff_source_hint = 4;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearSelectBuffSourceHint() {
      bitField0_ &= ~0x00000002;
      selectBuffSourceHint = 0;
      return this;
    }

    /**
     * <code>optional uint32 select_buff_source_hint = 4;</code>
     * @return the selectBuffSourceHint
     */
    public int getSelectBuffSourceHint() {
      return selectBuffSourceHint;
    }

    /**
     * <code>optional uint32 select_buff_source_hint = 4;</code>
     * @param value the selectBuffSourceHint to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setSelectBuffSourceHint(final int value) {
      bitField0_ |= 0x00000002;
      selectBuffSourceHint = value;
      return this;
    }

    /**
     * <code>optional uint32 roll_buff_free_times = 8;</code>
     * @return whether the rollBuffFreeTimes field is set
     */
    public boolean hasRollBuffFreeTimes() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 roll_buff_free_times = 8;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearRollBuffFreeTimes() {
      bitField0_ &= ~0x00000004;
      rollBuffFreeTimes = 0;
      return this;
    }

    /**
     * <code>optional uint32 roll_buff_free_times = 8;</code>
     * @return the rollBuffFreeTimes
     */
    public int getRollBuffFreeTimes() {
      return rollBuffFreeTimes;
    }

    /**
     * <code>optional uint32 roll_buff_free_times = 8;</code>
     * @param value the rollBuffFreeTimes to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setRollBuffFreeTimes(final int value) {
      bitField0_ |= 0x00000004;
      rollBuffFreeTimes = value;
      return this;
    }

    /**
     * <code>optional uint32 roll_buff_max_times = 9;</code>
     * @return whether the rollBuffMaxTimes field is set
     */
    public boolean hasRollBuffMaxTimes() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 roll_buff_max_times = 9;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearRollBuffMaxTimes() {
      bitField0_ &= ~0x00000008;
      rollBuffMaxTimes = 0;
      return this;
    }

    /**
     * <code>optional uint32 roll_buff_max_times = 9;</code>
     * @return the rollBuffMaxTimes
     */
    public int getRollBuffMaxTimes() {
      return rollBuffMaxTimes;
    }

    /**
     * <code>optional uint32 roll_buff_max_times = 9;</code>
     * @param value the rollBuffMaxTimes to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setRollBuffMaxTimes(final int value) {
      bitField0_ |= 0x00000008;
      rollBuffMaxTimes = value;
      return this;
    }

    /**
     * <code>optional uint32 source_cur_count = 10;</code>
     * @return whether the sourceCurCount field is set
     */
    public boolean hasSourceCurCount() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 source_cur_count = 10;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearSourceCurCount() {
      bitField0_ &= ~0x00000010;
      sourceCurCount = 0;
      return this;
    }

    /**
     * <code>optional uint32 source_cur_count = 10;</code>
     * @return the sourceCurCount
     */
    public int getSourceCurCount() {
      return sourceCurCount;
    }

    /**
     * <code>optional uint32 source_cur_count = 10;</code>
     * @param value the sourceCurCount to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setSourceCurCount(final int value) {
      bitField0_ |= 0x00000010;
      sourceCurCount = value;
      return this;
    }

    /**
     * <code>optional uint32 roll_buff_times = 11;</code>
     * @return whether the rollBuffTimes field is set
     */
    public boolean hasRollBuffTimes() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 roll_buff_times = 11;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearRollBuffTimes() {
      bitField0_ &= ~0x00000020;
      rollBuffTimes = 0;
      return this;
    }

    /**
     * <code>optional uint32 roll_buff_times = 11;</code>
     * @return the rollBuffTimes
     */
    public int getRollBuffTimes() {
      return rollBuffTimes;
    }

    /**
     * <code>optional uint32 roll_buff_times = 11;</code>
     * @param value the rollBuffTimes to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setRollBuffTimes(final int value) {
      bitField0_ |= 0x00000020;
      rollBuffTimes = value;
      return this;
    }

    /**
     * <code>optional .RogueCommonBuffSelectSource source_type = 14;</code>
     * @return whether the sourceType field is set
     */
    public boolean hasSourceType() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional .RogueCommonBuffSelectSource source_type = 14;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearSourceType() {
      bitField0_ &= ~0x00000040;
      sourceType = 0;
      return this;
    }

    /**
     * <code>optional .RogueCommonBuffSelectSource source_type = 14;</code>
     * @return the sourceType
     */
    public RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource getSourceType() {
      return RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource.forNumber(sourceType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link RogueCommonBuffSelectInfo#getSourceType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getSourceTypeValue() {
      return sourceType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource}. Setting an invalid value
     * can cause {@link RogueCommonBuffSelectInfo#getSourceType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setSourceTypeValue(final int value) {
      bitField0_ |= 0x00000040;
      sourceType = value;
      return this;
    }

    /**
     * <code>optional .RogueCommonBuffSelectSource source_type = 14;</code>
     * @param value the sourceType to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setSourceType(
        final RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource value) {
      bitField0_ |= 0x00000040;
      sourceType = value.getNumber();
      return this;
    }

    /**
     * <code>optional bool can_roll = 2;</code>
     * @return whether the canRoll field is set
     */
    public boolean hasCanRoll() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional bool can_roll = 2;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearCanRoll() {
      bitField0_ &= ~0x00000080;
      canRoll = false;
      return this;
    }

    /**
     * <code>optional bool can_roll = 2;</code>
     * @return the canRoll
     */
    public boolean getCanRoll() {
      return canRoll;
    }

    /**
     * <code>optional bool can_roll = 2;</code>
     * @param value the canRoll to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setCanRoll(final boolean value) {
      bitField0_ |= 0x00000080;
      canRoll = value;
      return this;
    }

    /**
     * <code>optional .ItemCostList roll_buffs_cost = 12;</code>
     * @return whether the rollBuffsCost field is set
     */
    public boolean hasRollBuffsCost() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional .ItemCostList roll_buffs_cost = 12;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearRollBuffsCost() {
      bitField0_ &= ~0x00000100;
      rollBuffsCost.clear();
      return this;
    }

    /**
     * <code>optional .ItemCostList roll_buffs_cost = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRollBuffsCost()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemCostListOuterClass.ItemCostList getRollBuffsCost() {
      return rollBuffsCost;
    }

    /**
     * <code>optional .ItemCostList roll_buffs_cost = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemCostListOuterClass.ItemCostList getMutableRollBuffsCost() {
      bitField0_ |= 0x00000100;
      return rollBuffsCost;
    }

    /**
     * <code>optional .ItemCostList roll_buffs_cost = 12;</code>
     * @param value the rollBuffsCost to set
     * @return this
     */
    public RogueCommonBuffSelectInfo setRollBuffsCost(
        final ItemCostListOuterClass.ItemCostList value) {
      bitField0_ |= 0x00000100;
      rollBuffsCost.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 first_buff_type_list = 6;</code>
     * @return whether the firstBuffTypeList field is set
     */
    public boolean hasFirstBuffTypeList() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>repeated uint32 first_buff_type_list = 6;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearFirstBuffTypeList() {
      bitField0_ &= ~0x00000200;
      firstBuffTypeList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 first_buff_type_list = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFirstBuffTypeList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFirstBuffTypeList() {
      return firstBuffTypeList;
    }

    /**
     * <code>repeated uint32 first_buff_type_list = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFirstBuffTypeList() {
      bitField0_ |= 0x00000200;
      return firstBuffTypeList;
    }

    /**
     * <code>repeated uint32 first_buff_type_list = 6;</code>
     * @param value the firstBuffTypeList to add
     * @return this
     */
    public RogueCommonBuffSelectInfo addFirstBuffTypeList(final int value) {
      bitField0_ |= 0x00000200;
      firstBuffTypeList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 first_buff_type_list = 6;</code>
     * @param values the firstBuffTypeList to add
     * @return this
     */
    public RogueCommonBuffSelectInfo addAllFirstBuffTypeList(final int... values) {
      bitField0_ |= 0x00000200;
      firstBuffTypeList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 handbook_unlock_buff_id_list = 15;</code>
     * @return whether the handbookUnlockBuffIdList field is set
     */
    public boolean hasHandbookUnlockBuffIdList() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>repeated uint32 handbook_unlock_buff_id_list = 15;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearHandbookUnlockBuffIdList() {
      bitField0_ &= ~0x00000400;
      handbookUnlockBuffIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 handbook_unlock_buff_id_list = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableHandbookUnlockBuffIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getHandbookUnlockBuffIdList() {
      return handbookUnlockBuffIdList;
    }

    /**
     * <code>repeated uint32 handbook_unlock_buff_id_list = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableHandbookUnlockBuffIdList() {
      bitField0_ |= 0x00000400;
      return handbookUnlockBuffIdList;
    }

    /**
     * <code>repeated uint32 handbook_unlock_buff_id_list = 15;</code>
     * @param value the handbookUnlockBuffIdList to add
     * @return this
     */
    public RogueCommonBuffSelectInfo addHandbookUnlockBuffIdList(final int value) {
      bitField0_ |= 0x00000400;
      handbookUnlockBuffIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 handbook_unlock_buff_id_list = 15;</code>
     * @param values the handbookUnlockBuffIdList to add
     * @return this
     */
    public RogueCommonBuffSelectInfo addAllHandbookUnlockBuffIdList(final int... values) {
      bitField0_ |= 0x00000400;
      handbookUnlockBuffIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .RogueCommonBuff maze_buff_list = 7;</code>
     * @return whether the mazeBuffList field is set
     */
    public boolean hasMazeBuffList() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>repeated .RogueCommonBuff maze_buff_list = 7;</code>
     * @return this
     */
    public RogueCommonBuffSelectInfo clearMazeBuffList() {
      bitField0_ &= ~0x00000800;
      mazeBuffList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueCommonBuff maze_buff_list = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMazeBuffList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueCommonBuffOuterClass.RogueCommonBuff> getMazeBuffList() {
      return mazeBuffList;
    }

    /**
     * <code>repeated .RogueCommonBuff maze_buff_list = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueCommonBuffOuterClass.RogueCommonBuff> getMutableMazeBuffList() {
      bitField0_ |= 0x00000800;
      return mazeBuffList;
    }

    /**
     * <code>repeated .RogueCommonBuff maze_buff_list = 7;</code>
     * @param value the mazeBuffList to add
     * @return this
     */
    public RogueCommonBuffSelectInfo addMazeBuffList(
        final RogueCommonBuffOuterClass.RogueCommonBuff value) {
      bitField0_ |= 0x00000800;
      mazeBuffList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueCommonBuff maze_buff_list = 7;</code>
     * @param values the mazeBuffList to add
     * @return this
     */
    public RogueCommonBuffSelectInfo addAllMazeBuffList(
        final RogueCommonBuffOuterClass.RogueCommonBuff... values) {
      bitField0_ |= 0x00000800;
      mazeBuffList.addAll(values);
      return this;
    }

    @Override
    public RogueCommonBuffSelectInfo copyFrom(final RogueCommonBuffSelectInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        sourceTotalCount = other.sourceTotalCount;
        selectBuffSourceHint = other.selectBuffSourceHint;
        rollBuffFreeTimes = other.rollBuffFreeTimes;
        rollBuffMaxTimes = other.rollBuffMaxTimes;
        sourceCurCount = other.sourceCurCount;
        rollBuffTimes = other.rollBuffTimes;
        sourceType = other.sourceType;
        canRoll = other.canRoll;
        rollBuffsCost.copyFrom(other.rollBuffsCost);
        firstBuffTypeList.copyFrom(other.firstBuffTypeList);
        handbookUnlockBuffIdList.copyFrom(other.handbookUnlockBuffIdList);
        mazeBuffList.copyFrom(other.mazeBuffList);
      }
      return this;
    }

    @Override
    public RogueCommonBuffSelectInfo mergeFrom(final RogueCommonBuffSelectInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSourceTotalCount()) {
        setSourceTotalCount(other.sourceTotalCount);
      }
      if (other.hasSelectBuffSourceHint()) {
        setSelectBuffSourceHint(other.selectBuffSourceHint);
      }
      if (other.hasRollBuffFreeTimes()) {
        setRollBuffFreeTimes(other.rollBuffFreeTimes);
      }
      if (other.hasRollBuffMaxTimes()) {
        setRollBuffMaxTimes(other.rollBuffMaxTimes);
      }
      if (other.hasSourceCurCount()) {
        setSourceCurCount(other.sourceCurCount);
      }
      if (other.hasRollBuffTimes()) {
        setRollBuffTimes(other.rollBuffTimes);
      }
      if (other.hasSourceType()) {
        setSourceTypeValue(other.sourceType);
      }
      if (other.hasCanRoll()) {
        setCanRoll(other.canRoll);
      }
      if (other.hasRollBuffsCost()) {
        getMutableRollBuffsCost().mergeFrom(other.rollBuffsCost);
      }
      if (other.hasFirstBuffTypeList()) {
        getMutableFirstBuffTypeList().addAll(other.firstBuffTypeList);
      }
      if (other.hasHandbookUnlockBuffIdList()) {
        getMutableHandbookUnlockBuffIdList().addAll(other.handbookUnlockBuffIdList);
      }
      if (other.hasMazeBuffList()) {
        getMutableMazeBuffList().addAll(other.mazeBuffList);
      }
      return this;
    }

    @Override
    public RogueCommonBuffSelectInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      sourceTotalCount = 0;
      selectBuffSourceHint = 0;
      rollBuffFreeTimes = 0;
      rollBuffMaxTimes = 0;
      sourceCurCount = 0;
      rollBuffTimes = 0;
      sourceType = 0;
      canRoll = false;
      rollBuffsCost.clear();
      firstBuffTypeList.clear();
      handbookUnlockBuffIdList.clear();
      mazeBuffList.clear();
      return this;
    }

    @Override
    public RogueCommonBuffSelectInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rollBuffsCost.clearQuick();
      firstBuffTypeList.clear();
      handbookUnlockBuffIdList.clear();
      mazeBuffList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCommonBuffSelectInfo)) {
        return false;
      }
      RogueCommonBuffSelectInfo other = (RogueCommonBuffSelectInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasSourceTotalCount() || sourceTotalCount == other.sourceTotalCount)
        && (!hasSelectBuffSourceHint() || selectBuffSourceHint == other.selectBuffSourceHint)
        && (!hasRollBuffFreeTimes() || rollBuffFreeTimes == other.rollBuffFreeTimes)
        && (!hasRollBuffMaxTimes() || rollBuffMaxTimes == other.rollBuffMaxTimes)
        && (!hasSourceCurCount() || sourceCurCount == other.sourceCurCount)
        && (!hasRollBuffTimes() || rollBuffTimes == other.rollBuffTimes)
        && (!hasSourceType() || sourceType == other.sourceType)
        && (!hasCanRoll() || canRoll == other.canRoll)
        && (!hasRollBuffsCost() || rollBuffsCost.equals(other.rollBuffsCost))
        && (!hasFirstBuffTypeList() || firstBuffTypeList.equals(other.firstBuffTypeList))
        && (!hasHandbookUnlockBuffIdList() || handbookUnlockBuffIdList.equals(other.handbookUnlockBuffIdList))
        && (!hasMazeBuffList() || mazeBuffList.equals(other.mazeBuffList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(sourceTotalCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(selectBuffSourceHint);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(rollBuffFreeTimes);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(rollBuffMaxTimes);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(sourceCurCount);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(rollBuffTimes);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 112);
        output.writeEnumNoTag(sourceType);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 16);
        output.writeBoolNoTag(canRoll);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 98);
        output.writeMessageNoTag(rollBuffsCost);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        for (int i = 0; i < firstBuffTypeList.length(); i++) {
          output.writeRawByte((byte) 48);
          output.writeUInt32NoTag(firstBuffTypeList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000400) != 0) {
        for (int i = 0; i < handbookUnlockBuffIdList.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(handbookUnlockBuffIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000800) != 0) {
        for (int i = 0; i < mazeBuffList.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(mazeBuffList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(sourceTotalCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(selectBuffSourceHint);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rollBuffFreeTimes);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rollBuffMaxTimes);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(sourceCurCount);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rollBuffTimes);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(sourceType);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rollBuffsCost);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += (1 * firstBuffTypeList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(firstBuffTypeList);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += (1 * handbookUnlockBuffIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(handbookUnlockBuffIdList);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += (1 * mazeBuffList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mazeBuffList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCommonBuffSelectInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // sourceTotalCount
            sourceTotalCount = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // selectBuffSourceHint
            selectBuffSourceHint = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // rollBuffFreeTimes
            rollBuffFreeTimes = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // rollBuffMaxTimes
            rollBuffMaxTimes = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // sourceCurCount
            sourceCurCount = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // rollBuffTimes
            rollBuffTimes = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // sourceType
            final int value = input.readInt32();
            if (RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource.forNumber(value) != null) {
              sourceType = value;
              bitField0_ |= 0x00000040;
            }
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // canRoll
            canRoll = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // rollBuffsCost
            input.readMessage(rollBuffsCost);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // firstBuffTypeList [packed=true]
            input.readPackedUInt32(firstBuffTypeList, tag);
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // handbookUnlockBuffIdList [packed=true]
            input.readPackedUInt32(handbookUnlockBuffIdList, tag);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // mazeBuffList
            tag = input.readRepeatedMessage(mazeBuffList, tag);
            bitField0_ |= 0x00000800;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 48: {
            // firstBuffTypeList [packed=false]
            tag = input.readRepeatedUInt32(firstBuffTypeList, tag);
            bitField0_ |= 0x00000200;
            break;
          }
          case 120: {
            // handbookUnlockBuffIdList [packed=false]
            tag = input.readRepeatedUInt32(handbookUnlockBuffIdList, tag);
            bitField0_ |= 0x00000400;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.sourceTotalCount, sourceTotalCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.selectBuffSourceHint, selectBuffSourceHint);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.rollBuffFreeTimes, rollBuffFreeTimes);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.rollBuffMaxTimes, rollBuffMaxTimes);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.sourceCurCount, sourceCurCount);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.rollBuffTimes, rollBuffTimes);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeEnum(FieldNames.sourceType, sourceType, RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource.converter());
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.canRoll, canRoll);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeMessage(FieldNames.rollBuffsCost, rollBuffsCost);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRepeatedUInt32(FieldNames.firstBuffTypeList, firstBuffTypeList);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRepeatedUInt32(FieldNames.handbookUnlockBuffIdList, handbookUnlockBuffIdList);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRepeatedMessage(FieldNames.mazeBuffList, mazeBuffList);
      }
      output.endObject();
    }

    @Override
    public RogueCommonBuffSelectInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1098445146:
          case -1750826448: {
            if (input.isAtField(FieldNames.sourceTotalCount)) {
              if (!input.trySkipNullValue()) {
                sourceTotalCount = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1160450543:
          case -335538398: {
            if (input.isAtField(FieldNames.selectBuffSourceHint)) {
              if (!input.trySkipNullValue()) {
                selectBuffSourceHint = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -212024406:
          case -694689955: {
            if (input.isAtField(FieldNames.rollBuffFreeTimes)) {
              if (!input.trySkipNullValue()) {
                rollBuffFreeTimes = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -564731182:
          case -792528959: {
            if (input.isAtField(FieldNames.rollBuffMaxTimes)) {
              if (!input.trySkipNullValue()) {
                rollBuffMaxTimes = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -831207446:
          case 557368108: {
            if (input.isAtField(FieldNames.sourceCurCount)) {
              if (!input.trySkipNullValue()) {
                sourceCurCount = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -436216138:
          case 2038334812: {
            if (input.isAtField(FieldNames.rollBuffTimes)) {
              if (!input.trySkipNullValue()) {
                rollBuffTimes = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1111431691:
          case -84625186: {
            if (input.isAtField(FieldNames.sourceType)) {
              if (!input.trySkipNullValue()) {
                final RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource value = input.readEnum(RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource.converter());
                if (value != null) {
                  sourceType = value.getNumber();
                  bitField0_ |= 0x00000040;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 549719149:
          case -126477428: {
            if (input.isAtField(FieldNames.canRoll)) {
              if (!input.trySkipNullValue()) {
                canRoll = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -408716688:
          case -1703619794: {
            if (input.isAtField(FieldNames.rollBuffsCost)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rollBuffsCost);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2103912645:
          case -1677036794: {
            if (input.isAtField(FieldNames.firstBuffTypeList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(firstBuffTypeList);
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 620352744:
          case 2008489866: {
            if (input.isAtField(FieldNames.handbookUnlockBuffIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(handbookUnlockBuffIdList);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1147228272:
          case -1634995062: {
            if (input.isAtField(FieldNames.mazeBuffList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(mazeBuffList);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCommonBuffSelectInfo clone() {
      return new RogueCommonBuffSelectInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCommonBuffSelectInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCommonBuffSelectInfo(), data).checkInitialized();
    }

    public static RogueCommonBuffSelectInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonBuffSelectInfo(), input).checkInitialized();
    }

    public static RogueCommonBuffSelectInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCommonBuffSelectInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCommonBuffSelectInfo messages
     */
    public static MessageFactory<RogueCommonBuffSelectInfo> getFactory() {
      return RogueCommonBuffSelectInfoFactory.INSTANCE;
    }

    private enum RogueCommonBuffSelectInfoFactory implements MessageFactory<RogueCommonBuffSelectInfo> {
      INSTANCE;

      @Override
      public RogueCommonBuffSelectInfo create() {
        return RogueCommonBuffSelectInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName sourceTotalCount = FieldName.forField("sourceTotalCount", "source_total_count");

      static final FieldName selectBuffSourceHint = FieldName.forField("selectBuffSourceHint", "select_buff_source_hint");

      static final FieldName rollBuffFreeTimes = FieldName.forField("rollBuffFreeTimes", "roll_buff_free_times");

      static final FieldName rollBuffMaxTimes = FieldName.forField("rollBuffMaxTimes", "roll_buff_max_times");

      static final FieldName sourceCurCount = FieldName.forField("sourceCurCount", "source_cur_count");

      static final FieldName rollBuffTimes = FieldName.forField("rollBuffTimes", "roll_buff_times");

      static final FieldName sourceType = FieldName.forField("sourceType", "source_type");

      static final FieldName canRoll = FieldName.forField("canRoll", "can_roll");

      static final FieldName rollBuffsCost = FieldName.forField("rollBuffsCost", "roll_buffs_cost");

      static final FieldName firstBuffTypeList = FieldName.forField("firstBuffTypeList", "first_buff_type_list");

      static final FieldName handbookUnlockBuffIdList = FieldName.forField("handbookUnlockBuffIdList", "handbook_unlock_buff_id_list");

      static final FieldName mazeBuffList = FieldName.forField("mazeBuffList", "maze_buff_list");
    }
  }
}
