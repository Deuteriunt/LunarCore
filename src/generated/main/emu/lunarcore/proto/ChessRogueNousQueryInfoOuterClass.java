// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueNousQueryInfoOuterClass {
  /**
   * <pre>
   * MAKPHMAOCHI talent_info = 1;
   * OFHBFINPHAG JNAGMIALOII = 6;
   * CLIDPGPDFGK IKGPADCBBPN = 4;
   * ChessRogueQuery query_info = 13;
   * repeated uint32 PHJAFGJHOCO = 7;
   * repeated uint32 CMNHLKGFKOP = 8;
   * </pre>
   *
   * Protobuf type {@code ChessRogueNousQueryInfo}
   */
  public static final class ChessRogueNousQueryInfo extends ProtoMessage<ChessRogueNousQueryInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    private ChessRogueNousQueryInfo() {
    }

    /**
     * <pre>
     * MAKPHMAOCHI talent_info = 1;
     * OFHBFINPHAG JNAGMIALOII = 6;
     * CLIDPGPDFGK IKGPADCBBPN = 4;
     * ChessRogueQuery query_info = 13;
     * repeated uint32 PHJAFGJHOCO = 7;
     * repeated uint32 CMNHLKGFKOP = 8;
     * </pre>
     *
     * @return a new empty instance of {@code ChessRogueNousQueryInfo}
     */
    public static ChessRogueNousQueryInfo newInstance() {
      return new ChessRogueNousQueryInfo();
    }

    @Override
    public ChessRogueNousQueryInfo copyFrom(final ChessRogueNousQueryInfo other) {
      cachedSize = other.cachedSize;
      return this;
    }

    @Override
    public ChessRogueNousQueryInfo mergeFrom(final ChessRogueNousQueryInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      return this;
    }

    @Override
    public ChessRogueNousQueryInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      return this;
    }

    @Override
    public ChessRogueNousQueryInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueNousQueryInfo)) {
        return false;
      }
      ChessRogueNousQueryInfo other = (ChessRogueNousQueryInfo) o;
      return true;
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueNousQueryInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      output.endObject();
    }

    @Override
    public ChessRogueNousQueryInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueNousQueryInfo clone() {
      return new ChessRogueNousQueryInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueNousQueryInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueNousQueryInfo(), data).checkInitialized();
    }

    public static ChessRogueNousQueryInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousQueryInfo(), input).checkInitialized();
    }

    public static ChessRogueNousQueryInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousQueryInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueNousQueryInfo messages
     */
    public static MessageFactory<ChessRogueNousQueryInfo> getFactory() {
      return ChessRogueNousQueryInfoFactory.INSTANCE;
    }

    private enum ChessRogueNousQueryInfoFactory implements MessageFactory<ChessRogueNousQueryInfo> {
      INSTANCE;

      @Override
      public ChessRogueNousQueryInfo create() {
        return ChessRogueNousQueryInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
    }
  }
}
