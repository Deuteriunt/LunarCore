// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class HandleFriendCsReqOuterClass {
  /**
   * Protobuf type {@code HandleFriendCsReq}
   */
  public static final class HandleFriendCsReq extends ProtoMessage<HandleFriendCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 uid = 7;</code>
     */
    private int uid;

    /**
     * <code>optional bool handle_result = 13;</code>
     */
    private boolean handleResult;

    private HandleFriendCsReq() {
    }

    /**
     * @return a new empty instance of {@code HandleFriendCsReq}
     */
    public static HandleFriendCsReq newInstance() {
      return new HandleFriendCsReq();
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @return whether the uid field is set
     */
    public boolean hasUid() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @return this
     */
    public HandleFriendCsReq clearUid() {
      bitField0_ &= ~0x00000001;
      uid = 0;
      return this;
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @return the uid
     */
    public int getUid() {
      return uid;
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @param value the uid to set
     * @return this
     */
    public HandleFriendCsReq setUid(final int value) {
      bitField0_ |= 0x00000001;
      uid = value;
      return this;
    }

    /**
     * <code>optional bool handle_result = 13;</code>
     * @return whether the handleResult field is set
     */
    public boolean hasHandleResult() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool handle_result = 13;</code>
     * @return this
     */
    public HandleFriendCsReq clearHandleResult() {
      bitField0_ &= ~0x00000002;
      handleResult = false;
      return this;
    }

    /**
     * <code>optional bool handle_result = 13;</code>
     * @return the handleResult
     */
    public boolean getHandleResult() {
      return handleResult;
    }

    /**
     * <code>optional bool handle_result = 13;</code>
     * @param value the handleResult to set
     * @return this
     */
    public HandleFriendCsReq setHandleResult(final boolean value) {
      bitField0_ |= 0x00000002;
      handleResult = value;
      return this;
    }

    @Override
    public HandleFriendCsReq copyFrom(final HandleFriendCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        uid = other.uid;
        handleResult = other.handleResult;
      }
      return this;
    }

    @Override
    public HandleFriendCsReq mergeFrom(final HandleFriendCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUid()) {
        setUid(other.uid);
      }
      if (other.hasHandleResult()) {
        setHandleResult(other.handleResult);
      }
      return this;
    }

    @Override
    public HandleFriendCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      uid = 0;
      handleResult = false;
      return this;
    }

    @Override
    public HandleFriendCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof HandleFriendCsReq)) {
        return false;
      }
      HandleFriendCsReq other = (HandleFriendCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasUid() || uid == other.uid)
        && (!hasHandleResult() || handleResult == other.handleResult);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeBoolNoTag(handleResult);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public HandleFriendCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // uid
            uid = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // handleResult
            handleResult = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.uid, uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.handleResult, handleResult);
      }
      output.endObject();
    }

    @Override
    public HandleFriendCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 115792: {
            if (input.isAtField(FieldNames.uid)) {
              if (!input.trySkipNullValue()) {
                uid = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1331436443:
          case 686987796: {
            if (input.isAtField(FieldNames.handleResult)) {
              if (!input.trySkipNullValue()) {
                handleResult = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public HandleFriendCsReq clone() {
      return new HandleFriendCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static HandleFriendCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new HandleFriendCsReq(), data).checkInitialized();
    }

    public static HandleFriendCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HandleFriendCsReq(), input).checkInitialized();
    }

    public static HandleFriendCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HandleFriendCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating HandleFriendCsReq messages
     */
    public static MessageFactory<HandleFriendCsReq> getFactory() {
      return HandleFriendCsReqFactory.INSTANCE;
    }

    private enum HandleFriendCsReqFactory implements MessageFactory<HandleFriendCsReq> {
      INSTANCE;

      @Override
      public HandleFriendCsReq create() {
        return HandleFriendCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName uid = FieldName.forField("uid");

      static final FieldName handleResult = FieldName.forField("handleResult", "handle_result");
    }
  }
}
