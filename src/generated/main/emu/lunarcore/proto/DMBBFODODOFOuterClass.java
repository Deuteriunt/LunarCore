// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class DMBBFODODOFOuterClass {
  /**
   * Protobuf type {@code DMBBFODODOF}
   */
  public static final class DMBBFODODOF extends ProtoMessage<DMBBFODODOF> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  4
     * </pre>
     *
     * <code>optional uint32 BLPICCBCKPK = 2;</code>
     */
    private int bLPICCBCKPK;

    /**
     * <code>optional uint32 BCKPHBOPCCN = 6;</code>
     */
    private int bCKPHBOPCCN;

    private DMBBFODODOF() {
    }

    /**
     * @return a new empty instance of {@code DMBBFODODOF}
     */
    public static DMBBFODODOF newInstance() {
      return new DMBBFODODOF();
    }

    /**
     * <pre>
     *  4
     * </pre>
     *
     * <code>optional uint32 BLPICCBCKPK = 2;</code>
     * @return whether the bLPICCBCKPK field is set
     */
    public boolean hasBLPICCBCKPK() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  4
     * </pre>
     *
     * <code>optional uint32 BLPICCBCKPK = 2;</code>
     * @return this
     */
    public DMBBFODODOF clearBLPICCBCKPK() {
      bitField0_ &= ~0x00000001;
      bLPICCBCKPK = 0;
      return this;
    }

    /**
     * <pre>
     *  4
     * </pre>
     *
     * <code>optional uint32 BLPICCBCKPK = 2;</code>
     * @return the bLPICCBCKPK
     */
    public int getBLPICCBCKPK() {
      return bLPICCBCKPK;
    }

    /**
     * <pre>
     *  4
     * </pre>
     *
     * <code>optional uint32 BLPICCBCKPK = 2;</code>
     * @param value the bLPICCBCKPK to set
     * @return this
     */
    public DMBBFODODOF setBLPICCBCKPK(final int value) {
      bitField0_ |= 0x00000001;
      bLPICCBCKPK = value;
      return this;
    }

    /**
     * <code>optional uint32 BCKPHBOPCCN = 6;</code>
     * @return whether the bCKPHBOPCCN field is set
     */
    public boolean hasBCKPHBOPCCN() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 BCKPHBOPCCN = 6;</code>
     * @return this
     */
    public DMBBFODODOF clearBCKPHBOPCCN() {
      bitField0_ &= ~0x00000002;
      bCKPHBOPCCN = 0;
      return this;
    }

    /**
     * <code>optional uint32 BCKPHBOPCCN = 6;</code>
     * @return the bCKPHBOPCCN
     */
    public int getBCKPHBOPCCN() {
      return bCKPHBOPCCN;
    }

    /**
     * <code>optional uint32 BCKPHBOPCCN = 6;</code>
     * @param value the bCKPHBOPCCN to set
     * @return this
     */
    public DMBBFODODOF setBCKPHBOPCCN(final int value) {
      bitField0_ |= 0x00000002;
      bCKPHBOPCCN = value;
      return this;
    }

    @Override
    public DMBBFODODOF copyFrom(final DMBBFODODOF other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        bLPICCBCKPK = other.bLPICCBCKPK;
        bCKPHBOPCCN = other.bCKPHBOPCCN;
      }
      return this;
    }

    @Override
    public DMBBFODODOF mergeFrom(final DMBBFODODOF other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBLPICCBCKPK()) {
        setBLPICCBCKPK(other.bLPICCBCKPK);
      }
      if (other.hasBCKPHBOPCCN()) {
        setBCKPHBOPCCN(other.bCKPHBOPCCN);
      }
      return this;
    }

    @Override
    public DMBBFODODOF clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bLPICCBCKPK = 0;
      bCKPHBOPCCN = 0;
      return this;
    }

    @Override
    public DMBBFODODOF clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof DMBBFODODOF)) {
        return false;
      }
      DMBBFODODOF other = (DMBBFODODOF) o;
      return bitField0_ == other.bitField0_
        && (!hasBLPICCBCKPK() || bLPICCBCKPK == other.bLPICCBCKPK)
        && (!hasBCKPHBOPCCN() || bCKPHBOPCCN == other.bCKPHBOPCCN);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(bLPICCBCKPK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(bCKPHBOPCCN);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bLPICCBCKPK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bCKPHBOPCCN);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public DMBBFODODOF mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // bLPICCBCKPK
            bLPICCBCKPK = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // bCKPHBOPCCN
            bCKPHBOPCCN = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.bLPICCBCKPK, bLPICCBCKPK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.bCKPHBOPCCN, bCKPHBOPCCN);
      }
      output.endObject();
    }

    @Override
    public DMBBFODODOF mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 733217314: {
            if (input.isAtField(FieldNames.bLPICCBCKPK)) {
              if (!input.trySkipNullValue()) {
                bLPICCBCKPK = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1904713331: {
            if (input.isAtField(FieldNames.bCKPHBOPCCN)) {
              if (!input.trySkipNullValue()) {
                bCKPHBOPCCN = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public DMBBFODODOF clone() {
      return new DMBBFODODOF().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static DMBBFODODOF parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new DMBBFODODOF(), data).checkInitialized();
    }

    public static DMBBFODODOF parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DMBBFODODOF(), input).checkInitialized();
    }

    public static DMBBFODODOF parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DMBBFODODOF(), input).checkInitialized();
    }

    /**
     * @return factory for creating DMBBFODODOF messages
     */
    public static MessageFactory<DMBBFODODOF> getFactory() {
      return DMBBFODODOFFactory.INSTANCE;
    }

    private enum DMBBFODODOFFactory implements MessageFactory<DMBBFODODOF> {
      INSTANCE;

      @Override
      public DMBBFODODOF create() {
        return DMBBFODODOF.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName bLPICCBCKPK = FieldName.forField("BLPICCBCKPK");

      static final FieldName bCKPHBOPCCN = FieldName.forField("BCKPHBOPCCN");
    }
  }
}
