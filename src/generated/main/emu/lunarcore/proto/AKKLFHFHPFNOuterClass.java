// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class AKKLFHFHPFNOuterClass {
  /**
   * Protobuf type {@code AKKLFHFHPFN}
   */
  public static final class AKKLFHFHPFN extends ProtoMessage<AKKLFHFHPFN> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 JPEBPGIEGPO = 7;</code>
     */
    private int jPEBPGIEGPO;

    /**
     * <code>optional uint32 OFBCBEIEAEC = 10;</code>
     */
    private int oFBCBEIEAEC;

    /**
     * <code>optional bool CGAFFPHCNEA = 12;</code>
     */
    private boolean cGAFFPHCNEA;

    private AKKLFHFHPFN() {
    }

    /**
     * @return a new empty instance of {@code AKKLFHFHPFN}
     */
    public static AKKLFHFHPFN newInstance() {
      return new AKKLFHFHPFN();
    }

    /**
     * <code>optional uint32 JPEBPGIEGPO = 7;</code>
     * @return whether the jPEBPGIEGPO field is set
     */
    public boolean hasJPEBPGIEGPO() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 JPEBPGIEGPO = 7;</code>
     * @return this
     */
    public AKKLFHFHPFN clearJPEBPGIEGPO() {
      bitField0_ &= ~0x00000001;
      jPEBPGIEGPO = 0;
      return this;
    }

    /**
     * <code>optional uint32 JPEBPGIEGPO = 7;</code>
     * @return the jPEBPGIEGPO
     */
    public int getJPEBPGIEGPO() {
      return jPEBPGIEGPO;
    }

    /**
     * <code>optional uint32 JPEBPGIEGPO = 7;</code>
     * @param value the jPEBPGIEGPO to set
     * @return this
     */
    public AKKLFHFHPFN setJPEBPGIEGPO(final int value) {
      bitField0_ |= 0x00000001;
      jPEBPGIEGPO = value;
      return this;
    }

    /**
     * <code>optional uint32 OFBCBEIEAEC = 10;</code>
     * @return whether the oFBCBEIEAEC field is set
     */
    public boolean hasOFBCBEIEAEC() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 OFBCBEIEAEC = 10;</code>
     * @return this
     */
    public AKKLFHFHPFN clearOFBCBEIEAEC() {
      bitField0_ &= ~0x00000002;
      oFBCBEIEAEC = 0;
      return this;
    }

    /**
     * <code>optional uint32 OFBCBEIEAEC = 10;</code>
     * @return the oFBCBEIEAEC
     */
    public int getOFBCBEIEAEC() {
      return oFBCBEIEAEC;
    }

    /**
     * <code>optional uint32 OFBCBEIEAEC = 10;</code>
     * @param value the oFBCBEIEAEC to set
     * @return this
     */
    public AKKLFHFHPFN setOFBCBEIEAEC(final int value) {
      bitField0_ |= 0x00000002;
      oFBCBEIEAEC = value;
      return this;
    }

    /**
     * <code>optional bool CGAFFPHCNEA = 12;</code>
     * @return whether the cGAFFPHCNEA field is set
     */
    public boolean hasCGAFFPHCNEA() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool CGAFFPHCNEA = 12;</code>
     * @return this
     */
    public AKKLFHFHPFN clearCGAFFPHCNEA() {
      bitField0_ &= ~0x00000004;
      cGAFFPHCNEA = false;
      return this;
    }

    /**
     * <code>optional bool CGAFFPHCNEA = 12;</code>
     * @return the cGAFFPHCNEA
     */
    public boolean getCGAFFPHCNEA() {
      return cGAFFPHCNEA;
    }

    /**
     * <code>optional bool CGAFFPHCNEA = 12;</code>
     * @param value the cGAFFPHCNEA to set
     * @return this
     */
    public AKKLFHFHPFN setCGAFFPHCNEA(final boolean value) {
      bitField0_ |= 0x00000004;
      cGAFFPHCNEA = value;
      return this;
    }

    @Override
    public AKKLFHFHPFN copyFrom(final AKKLFHFHPFN other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        jPEBPGIEGPO = other.jPEBPGIEGPO;
        oFBCBEIEAEC = other.oFBCBEIEAEC;
        cGAFFPHCNEA = other.cGAFFPHCNEA;
      }
      return this;
    }

    @Override
    public AKKLFHFHPFN mergeFrom(final AKKLFHFHPFN other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasJPEBPGIEGPO()) {
        setJPEBPGIEGPO(other.jPEBPGIEGPO);
      }
      if (other.hasOFBCBEIEAEC()) {
        setOFBCBEIEAEC(other.oFBCBEIEAEC);
      }
      if (other.hasCGAFFPHCNEA()) {
        setCGAFFPHCNEA(other.cGAFFPHCNEA);
      }
      return this;
    }

    @Override
    public AKKLFHFHPFN clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      jPEBPGIEGPO = 0;
      oFBCBEIEAEC = 0;
      cGAFFPHCNEA = false;
      return this;
    }

    @Override
    public AKKLFHFHPFN clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof AKKLFHFHPFN)) {
        return false;
      }
      AKKLFHFHPFN other = (AKKLFHFHPFN) o;
      return bitField0_ == other.bitField0_
        && (!hasJPEBPGIEGPO() || jPEBPGIEGPO == other.jPEBPGIEGPO)
        && (!hasOFBCBEIEAEC() || oFBCBEIEAEC == other.oFBCBEIEAEC)
        && (!hasCGAFFPHCNEA() || cGAFFPHCNEA == other.cGAFFPHCNEA);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(jPEBPGIEGPO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(oFBCBEIEAEC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeBoolNoTag(cGAFFPHCNEA);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(jPEBPGIEGPO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oFBCBEIEAEC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public AKKLFHFHPFN mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // jPEBPGIEGPO
            jPEBPGIEGPO = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // oFBCBEIEAEC
            oFBCBEIEAEC = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // cGAFFPHCNEA
            cGAFFPHCNEA = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.jPEBPGIEGPO, jPEBPGIEGPO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.oFBCBEIEAEC, oFBCBEIEAEC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.cGAFFPHCNEA, cGAFFPHCNEA);
      }
      output.endObject();
    }

    @Override
    public AKKLFHFHPFN mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 617496720: {
            if (input.isAtField(FieldNames.jPEBPGIEGPO)) {
              if (!input.trySkipNullValue()) {
                jPEBPGIEGPO = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1165634632: {
            if (input.isAtField(FieldNames.oFBCBEIEAEC)) {
              if (!input.trySkipNullValue()) {
                oFBCBEIEAEC = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -927350692: {
            if (input.isAtField(FieldNames.cGAFFPHCNEA)) {
              if (!input.trySkipNullValue()) {
                cGAFFPHCNEA = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public AKKLFHFHPFN clone() {
      return new AKKLFHFHPFN().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static AKKLFHFHPFN parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new AKKLFHFHPFN(), data).checkInitialized();
    }

    public static AKKLFHFHPFN parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AKKLFHFHPFN(), input).checkInitialized();
    }

    public static AKKLFHFHPFN parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AKKLFHFHPFN(), input).checkInitialized();
    }

    /**
     * @return factory for creating AKKLFHFHPFN messages
     */
    public static MessageFactory<AKKLFHFHPFN> getFactory() {
      return AKKLFHFHPFNFactory.INSTANCE;
    }

    private enum AKKLFHFHPFNFactory implements MessageFactory<AKKLFHFHPFN> {
      INSTANCE;

      @Override
      public AKKLFHFHPFN create() {
        return AKKLFHFHPFN.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName jPEBPGIEGPO = FieldName.forField("JPEBPGIEGPO");

      static final FieldName oFBCBEIEAEC = FieldName.forField("OFBCBEIEAEC");

      static final FieldName cGAFFPHCNEA = FieldName.forField("CGAFFPHCNEA");
    }
  }
}
