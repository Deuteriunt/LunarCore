// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class HandleRogueCommonPendingActionCsReqOuterClass {
  /**
   * Protobuf type {@code HandleRogueCommonPendingActionCsReq}
   */
  public static final class HandleRogueCommonPendingActionCsReq extends ProtoMessage<HandleRogueCommonPendingActionCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     * PHDCDDGMOJD MKNBOHDIBMC = 1285;
     * LNKCIHHBMCN LMGOMLNGOCL = 1618;
     * ECNFHANMIJD PCEFILHFHDH = 368;
     * GOGIJMPCNAO FBDCGDPCBNL = 569;
     * </pre>
     *
     * <code>optional .RogueBonusSelectResult bonus_select_result = 136;</code>
     */
    private final RogueBonusSelectResultOuterClass.RogueBonusSelectResult bonusSelectResult = RogueBonusSelectResultOuterClass.RogueBonusSelectResult.newInstance();

    /**
     * <code>optional .RogueMiracleSelectResult miracle_select_result = 194;</code>
     */
    private final RogueMiracleSelectResultOuterClass.RogueMiracleSelectResult miracleSelectResult = RogueMiracleSelectResultOuterClass.RogueMiracleSelectResult.newInstance();

    /**
     * <pre>
     * KINJFMEPCKE LIIGPIFDPLK = 1157;
     * CKGDDAIDEMO OECLKHEGBFM = 1521;
     * </pre>
     *
     * <code>optional .RogueBuffRollInfo roll_buff = 689;</code>
     */
    private final RogueBuffRollInfoOuterClass.RogueBuffRollInfo rollBuff = RogueBuffRollInfoOuterClass.RogueBuffRollInfo.newInstance();

    /**
     * <code>optional .RogueCommonBuffSelectResult buff_select_result = 1139;</code>
     */
    private final RogueCommonBuffSelectResultOuterClass.RogueCommonBuffSelectResult buffSelectResult = RogueCommonBuffSelectResultOuterClass.RogueCommonBuffSelectResult.newInstance();

    private HandleRogueCommonPendingActionCsReq() {
    }

    /**
     * @return a new empty instance of {@code HandleRogueCommonPendingActionCsReq}
     */
    public static HandleRogueCommonPendingActionCsReq newInstance() {
      return new HandleRogueCommonPendingActionCsReq();
    }

    /**
     * <pre>
     * PHDCDDGMOJD MKNBOHDIBMC = 1285;
     * LNKCIHHBMCN LMGOMLNGOCL = 1618;
     * ECNFHANMIJD PCEFILHFHDH = 368;
     * GOGIJMPCNAO FBDCGDPCBNL = 569;
     * </pre>
     *
     * <code>optional .RogueBonusSelectResult bonus_select_result = 136;</code>
     * @return whether the bonusSelectResult field is set
     */
    public boolean hasBonusSelectResult() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     * PHDCDDGMOJD MKNBOHDIBMC = 1285;
     * LNKCIHHBMCN LMGOMLNGOCL = 1618;
     * ECNFHANMIJD PCEFILHFHDH = 368;
     * GOGIJMPCNAO FBDCGDPCBNL = 569;
     * </pre>
     *
     * <code>optional .RogueBonusSelectResult bonus_select_result = 136;</code>
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq clearBonusSelectResult() {
      bitField0_ &= ~0x00000001;
      bonusSelectResult.clear();
      return this;
    }

    /**
     * <pre>
     * PHDCDDGMOJD MKNBOHDIBMC = 1285;
     * LNKCIHHBMCN LMGOMLNGOCL = 1618;
     * ECNFHANMIJD PCEFILHFHDH = 368;
     * GOGIJMPCNAO FBDCGDPCBNL = 569;
     * </pre>
     *
     * <code>optional .RogueBonusSelectResult bonus_select_result = 136;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBonusSelectResult()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueBonusSelectResultOuterClass.RogueBonusSelectResult getBonusSelectResult() {
      return bonusSelectResult;
    }

    /**
     * <pre>
     * PHDCDDGMOJD MKNBOHDIBMC = 1285;
     * LNKCIHHBMCN LMGOMLNGOCL = 1618;
     * ECNFHANMIJD PCEFILHFHDH = 368;
     * GOGIJMPCNAO FBDCGDPCBNL = 569;
     * </pre>
     *
     * <code>optional .RogueBonusSelectResult bonus_select_result = 136;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueBonusSelectResultOuterClass.RogueBonusSelectResult getMutableBonusSelectResult() {
      bitField0_ |= 0x00000001;
      return bonusSelectResult;
    }

    /**
     * <pre>
     * PHDCDDGMOJD MKNBOHDIBMC = 1285;
     * LNKCIHHBMCN LMGOMLNGOCL = 1618;
     * ECNFHANMIJD PCEFILHFHDH = 368;
     * GOGIJMPCNAO FBDCGDPCBNL = 569;
     * </pre>
     *
     * <code>optional .RogueBonusSelectResult bonus_select_result = 136;</code>
     * @param value the bonusSelectResult to set
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq setBonusSelectResult(
        final RogueBonusSelectResultOuterClass.RogueBonusSelectResult value) {
      bitField0_ |= 0x00000001;
      bonusSelectResult.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueMiracleSelectResult miracle_select_result = 194;</code>
     * @return whether the miracleSelectResult field is set
     */
    public boolean hasMiracleSelectResult() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .RogueMiracleSelectResult miracle_select_result = 194;</code>
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq clearMiracleSelectResult() {
      bitField0_ &= ~0x00000002;
      miracleSelectResult.clear();
      return this;
    }

    /**
     * <code>optional .RogueMiracleSelectResult miracle_select_result = 194;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMiracleSelectResult()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueMiracleSelectResultOuterClass.RogueMiracleSelectResult getMiracleSelectResult() {
      return miracleSelectResult;
    }

    /**
     * <code>optional .RogueMiracleSelectResult miracle_select_result = 194;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueMiracleSelectResultOuterClass.RogueMiracleSelectResult getMutableMiracleSelectResult(
        ) {
      bitField0_ |= 0x00000002;
      return miracleSelectResult;
    }

    /**
     * <code>optional .RogueMiracleSelectResult miracle_select_result = 194;</code>
     * @param value the miracleSelectResult to set
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq setMiracleSelectResult(
        final RogueMiracleSelectResultOuterClass.RogueMiracleSelectResult value) {
      bitField0_ |= 0x00000002;
      miracleSelectResult.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     * KINJFMEPCKE LIIGPIFDPLK = 1157;
     * CKGDDAIDEMO OECLKHEGBFM = 1521;
     * </pre>
     *
     * <code>optional .RogueBuffRollInfo roll_buff = 689;</code>
     * @return whether the rollBuff field is set
     */
    public boolean hasRollBuff() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <pre>
     * KINJFMEPCKE LIIGPIFDPLK = 1157;
     * CKGDDAIDEMO OECLKHEGBFM = 1521;
     * </pre>
     *
     * <code>optional .RogueBuffRollInfo roll_buff = 689;</code>
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq clearRollBuff() {
      bitField0_ &= ~0x00000004;
      rollBuff.clear();
      return this;
    }

    /**
     * <pre>
     * KINJFMEPCKE LIIGPIFDPLK = 1157;
     * CKGDDAIDEMO OECLKHEGBFM = 1521;
     * </pre>
     *
     * <code>optional .RogueBuffRollInfo roll_buff = 689;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRollBuff()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueBuffRollInfoOuterClass.RogueBuffRollInfo getRollBuff() {
      return rollBuff;
    }

    /**
     * <pre>
     * KINJFMEPCKE LIIGPIFDPLK = 1157;
     * CKGDDAIDEMO OECLKHEGBFM = 1521;
     * </pre>
     *
     * <code>optional .RogueBuffRollInfo roll_buff = 689;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueBuffRollInfoOuterClass.RogueBuffRollInfo getMutableRollBuff() {
      bitField0_ |= 0x00000004;
      return rollBuff;
    }

    /**
     * <pre>
     * KINJFMEPCKE LIIGPIFDPLK = 1157;
     * CKGDDAIDEMO OECLKHEGBFM = 1521;
     * </pre>
     *
     * <code>optional .RogueBuffRollInfo roll_buff = 689;</code>
     * @param value the rollBuff to set
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq setRollBuff(
        final RogueBuffRollInfoOuterClass.RogueBuffRollInfo value) {
      bitField0_ |= 0x00000004;
      rollBuff.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueCommonBuffSelectResult buff_select_result = 1139;</code>
     * @return whether the buffSelectResult field is set
     */
    public boolean hasBuffSelectResult() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .RogueCommonBuffSelectResult buff_select_result = 1139;</code>
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq clearBuffSelectResult() {
      bitField0_ &= ~0x00000008;
      buffSelectResult.clear();
      return this;
    }

    /**
     * <code>optional .RogueCommonBuffSelectResult buff_select_result = 1139;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBuffSelectResult()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueCommonBuffSelectResultOuterClass.RogueCommonBuffSelectResult getBuffSelectResult() {
      return buffSelectResult;
    }

    /**
     * <code>optional .RogueCommonBuffSelectResult buff_select_result = 1139;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueCommonBuffSelectResultOuterClass.RogueCommonBuffSelectResult getMutableBuffSelectResult(
        ) {
      bitField0_ |= 0x00000008;
      return buffSelectResult;
    }

    /**
     * <code>optional .RogueCommonBuffSelectResult buff_select_result = 1139;</code>
     * @param value the buffSelectResult to set
     * @return this
     */
    public HandleRogueCommonPendingActionCsReq setBuffSelectResult(
        final RogueCommonBuffSelectResultOuterClass.RogueCommonBuffSelectResult value) {
      bitField0_ |= 0x00000008;
      buffSelectResult.copyFrom(value);
      return this;
    }

    @Override
    public HandleRogueCommonPendingActionCsReq copyFrom(
        final HandleRogueCommonPendingActionCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        bonusSelectResult.copyFrom(other.bonusSelectResult);
        miracleSelectResult.copyFrom(other.miracleSelectResult);
        rollBuff.copyFrom(other.rollBuff);
        buffSelectResult.copyFrom(other.buffSelectResult);
      }
      return this;
    }

    @Override
    public HandleRogueCommonPendingActionCsReq mergeFrom(
        final HandleRogueCommonPendingActionCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBonusSelectResult()) {
        getMutableBonusSelectResult().mergeFrom(other.bonusSelectResult);
      }
      if (other.hasMiracleSelectResult()) {
        getMutableMiracleSelectResult().mergeFrom(other.miracleSelectResult);
      }
      if (other.hasRollBuff()) {
        getMutableRollBuff().mergeFrom(other.rollBuff);
      }
      if (other.hasBuffSelectResult()) {
        getMutableBuffSelectResult().mergeFrom(other.buffSelectResult);
      }
      return this;
    }

    @Override
    public HandleRogueCommonPendingActionCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bonusSelectResult.clear();
      miracleSelectResult.clear();
      rollBuff.clear();
      buffSelectResult.clear();
      return this;
    }

    @Override
    public HandleRogueCommonPendingActionCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bonusSelectResult.clearQuick();
      miracleSelectResult.clearQuick();
      rollBuff.clearQuick();
      buffSelectResult.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof HandleRogueCommonPendingActionCsReq)) {
        return false;
      }
      HandleRogueCommonPendingActionCsReq other = (HandleRogueCommonPendingActionCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasBonusSelectResult() || bonusSelectResult.equals(other.bonusSelectResult))
        && (!hasMiracleSelectResult() || miracleSelectResult.equals(other.miracleSelectResult))
        && (!hasRollBuff() || rollBuff.equals(other.rollBuff))
        && (!hasBuffSelectResult() || buffSelectResult.equals(other.buffSelectResult));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawLittleEndian16((short) 2242);
        output.writeMessageNoTag(bonusSelectResult);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawLittleEndian16((short) 3218);
        output.writeMessageNoTag(miracleSelectResult);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawLittleEndian16((short) 11146);
        output.writeMessageNoTag(rollBuff);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawLittleEndian16((short) 18330);
        output.writeMessageNoTag(buffSelectResult);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2 + ProtoSink.computeMessageSizeNoTag(bonusSelectResult);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2 + ProtoSink.computeMessageSizeNoTag(miracleSelectResult);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2 + ProtoSink.computeMessageSizeNoTag(rollBuff);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2 + ProtoSink.computeMessageSizeNoTag(buffSelectResult);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public HandleRogueCommonPendingActionCsReq mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 1090: {
            // bonusSelectResult
            input.readMessage(bonusSelectResult);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 1554) {
              break;
            }
          }
          case 1554: {
            // miracleSelectResult
            input.readMessage(miracleSelectResult);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 5514) {
              break;
            }
          }
          case 5514: {
            // rollBuff
            input.readMessage(rollBuff);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 9114) {
              break;
            }
          }
          case 9114: {
            // buffSelectResult
            input.readMessage(buffSelectResult);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.bonusSelectResult, bonusSelectResult);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.miracleSelectResult, miracleSelectResult);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.rollBuff, rollBuff);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.buffSelectResult, buffSelectResult);
      }
      output.endObject();
    }

    @Override
    public HandleRogueCommonPendingActionCsReq mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 732920312:
          case 396692640: {
            if (input.isAtField(FieldNames.bonusSelectResult)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(bonusSelectResult);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 961581898:
          case 1097144690: {
            if (input.isAtField(FieldNames.miracleSelectResult)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(miracleSelectResult);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -260653456:
          case 535908053: {
            if (input.isAtField(FieldNames.rollBuff)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rollBuff);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -224789460:
          case -839396908: {
            if (input.isAtField(FieldNames.buffSelectResult)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(buffSelectResult);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public HandleRogueCommonPendingActionCsReq clone() {
      return new HandleRogueCommonPendingActionCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static HandleRogueCommonPendingActionCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new HandleRogueCommonPendingActionCsReq(), data).checkInitialized();
    }

    public static HandleRogueCommonPendingActionCsReq parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new HandleRogueCommonPendingActionCsReq(), input).checkInitialized();
    }

    public static HandleRogueCommonPendingActionCsReq parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new HandleRogueCommonPendingActionCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating HandleRogueCommonPendingActionCsReq messages
     */
    public static MessageFactory<HandleRogueCommonPendingActionCsReq> getFactory() {
      return HandleRogueCommonPendingActionCsReqFactory.INSTANCE;
    }

    private enum HandleRogueCommonPendingActionCsReqFactory implements MessageFactory<HandleRogueCommonPendingActionCsReq> {
      INSTANCE;

      @Override
      public HandleRogueCommonPendingActionCsReq create() {
        return HandleRogueCommonPendingActionCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName bonusSelectResult = FieldName.forField("bonusSelectResult", "bonus_select_result");

      static final FieldName miracleSelectResult = FieldName.forField("miracleSelectResult", "miracle_select_result");

      static final FieldName rollBuff = FieldName.forField("rollBuff", "roll_buff");

      static final FieldName buffSelectResult = FieldName.forField("buffSelectResult", "buff_select_result");
    }
  }
}
