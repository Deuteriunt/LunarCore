// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChessRogueAvatarInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueAvatarInfo}
   */
  public static final class ChessRogueAvatarInfo extends ProtoMessage<ChessRogueAvatarInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .RogueAvatarReviveCost revive_cost = 15;</code>
     */
    private final RogueAvatarReviveCostOuterClass.RogueAvatarReviveCost reviveCost = RogueAvatarReviveCostOuterClass.RogueAvatarReviveCost.newInstance();

    /**
     * <code>repeated .ChessRogueAvatar chess_rogue_avatar = 3;</code>
     */
    private final RepeatedMessage<ChessRogueAvatarOuterClass.ChessRogueAvatar> chessRogueAvatar = RepeatedMessage.newEmptyInstance(ChessRogueAvatarOuterClass.ChessRogueAvatar.getFactory());

    private ChessRogueAvatarInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueAvatarInfo}
     */
    public static ChessRogueAvatarInfo newInstance() {
      return new ChessRogueAvatarInfo();
    }

    /**
     * <code>optional .RogueAvatarReviveCost revive_cost = 15;</code>
     * @return whether the reviveCost field is set
     */
    public boolean hasReviveCost() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .RogueAvatarReviveCost revive_cost = 15;</code>
     * @return this
     */
    public ChessRogueAvatarInfo clearReviveCost() {
      bitField0_ &= ~0x00000001;
      reviveCost.clear();
      return this;
    }

    /**
     * <code>optional .RogueAvatarReviveCost revive_cost = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableReviveCost()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueAvatarReviveCostOuterClass.RogueAvatarReviveCost getReviveCost() {
      return reviveCost;
    }

    /**
     * <code>optional .RogueAvatarReviveCost revive_cost = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueAvatarReviveCostOuterClass.RogueAvatarReviveCost getMutableReviveCost() {
      bitField0_ |= 0x00000001;
      return reviveCost;
    }

    /**
     * <code>optional .RogueAvatarReviveCost revive_cost = 15;</code>
     * @param value the reviveCost to set
     * @return this
     */
    public ChessRogueAvatarInfo setReviveCost(
        final RogueAvatarReviveCostOuterClass.RogueAvatarReviveCost value) {
      bitField0_ |= 0x00000001;
      reviveCost.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueAvatar chess_rogue_avatar = 3;</code>
     * @return whether the chessRogueAvatar field is set
     */
    public boolean hasChessRogueAvatar() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .ChessRogueAvatar chess_rogue_avatar = 3;</code>
     * @return this
     */
    public ChessRogueAvatarInfo clearChessRogueAvatar() {
      bitField0_ &= ~0x00000002;
      chessRogueAvatar.clear();
      return this;
    }

    /**
     * <code>repeated .ChessRogueAvatar chess_rogue_avatar = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableChessRogueAvatar()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<ChessRogueAvatarOuterClass.ChessRogueAvatar> getChessRogueAvatar() {
      return chessRogueAvatar;
    }

    /**
     * <code>repeated .ChessRogueAvatar chess_rogue_avatar = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<ChessRogueAvatarOuterClass.ChessRogueAvatar> getMutableChessRogueAvatar(
        ) {
      bitField0_ |= 0x00000002;
      return chessRogueAvatar;
    }

    /**
     * <code>repeated .ChessRogueAvatar chess_rogue_avatar = 3;</code>
     * @param value the chessRogueAvatar to add
     * @return this
     */
    public ChessRogueAvatarInfo addChessRogueAvatar(
        final ChessRogueAvatarOuterClass.ChessRogueAvatar value) {
      bitField0_ |= 0x00000002;
      chessRogueAvatar.add(value);
      return this;
    }

    /**
     * <code>repeated .ChessRogueAvatar chess_rogue_avatar = 3;</code>
     * @param values the chessRogueAvatar to add
     * @return this
     */
    public ChessRogueAvatarInfo addAllChessRogueAvatar(
        final ChessRogueAvatarOuterClass.ChessRogueAvatar... values) {
      bitField0_ |= 0x00000002;
      chessRogueAvatar.addAll(values);
      return this;
    }

    @Override
    public ChessRogueAvatarInfo copyFrom(final ChessRogueAvatarInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        reviveCost.copyFrom(other.reviveCost);
        chessRogueAvatar.copyFrom(other.chessRogueAvatar);
      }
      return this;
    }

    @Override
    public ChessRogueAvatarInfo mergeFrom(final ChessRogueAvatarInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasReviveCost()) {
        getMutableReviveCost().mergeFrom(other.reviveCost);
      }
      if (other.hasChessRogueAvatar()) {
        getMutableChessRogueAvatar().addAll(other.chessRogueAvatar);
      }
      return this;
    }

    @Override
    public ChessRogueAvatarInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      reviveCost.clear();
      chessRogueAvatar.clear();
      return this;
    }

    @Override
    public ChessRogueAvatarInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      reviveCost.clearQuick();
      chessRogueAvatar.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueAvatarInfo)) {
        return false;
      }
      ChessRogueAvatarInfo other = (ChessRogueAvatarInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasReviveCost() || reviveCost.equals(other.reviveCost))
        && (!hasChessRogueAvatar() || chessRogueAvatar.equals(other.chessRogueAvatar));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 122);
        output.writeMessageNoTag(reviveCost);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < chessRogueAvatar.length(); i++) {
          output.writeRawByte((byte) 26);
          output.writeMessageNoTag(chessRogueAvatar.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(reviveCost);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * chessRogueAvatar.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(chessRogueAvatar);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueAvatarInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 122: {
            // reviveCost
            input.readMessage(reviveCost);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // chessRogueAvatar
            tag = input.readRepeatedMessage(chessRogueAvatar, tag);
            bitField0_ |= 0x00000002;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.reviveCost, reviveCost);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.chessRogueAvatar, chessRogueAvatar);
      }
      output.endObject();
    }

    @Override
    public ChessRogueAvatarInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1426560318:
          case -1248199561: {
            if (input.isAtField(FieldNames.reviveCost)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(reviveCost);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2052177741:
          case 1901902397: {
            if (input.isAtField(FieldNames.chessRogueAvatar)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(chessRogueAvatar);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueAvatarInfo clone() {
      return new ChessRogueAvatarInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueAvatarInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueAvatarInfo(), data).checkInitialized();
    }

    public static ChessRogueAvatarInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAvatarInfo(), input).checkInitialized();
    }

    public static ChessRogueAvatarInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAvatarInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueAvatarInfo messages
     */
    public static MessageFactory<ChessRogueAvatarInfo> getFactory() {
      return ChessRogueAvatarInfoFactory.INSTANCE;
    }

    private enum ChessRogueAvatarInfoFactory implements MessageFactory<ChessRogueAvatarInfo> {
      INSTANCE;

      @Override
      public ChessRogueAvatarInfo create() {
        return ChessRogueAvatarInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName reviveCost = FieldName.forField("reviveCost", "revive_cost");

      static final FieldName chessRogueAvatar = FieldName.forField("chessRogueAvatar", "chess_rogue_avatar");
    }
  }
}
