// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueAvatarOuterClass {
  /**
   * Protobuf type {@code ChessRogueAvatar}
   */
  public static final class ChessRogueAvatar extends ProtoMessage<ChessRogueAvatar> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 PGPLJENDONA = 9;</code>
     */
    private int pGPLJENDONA;

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     */
    private int avatarId;

    private ChessRogueAvatar() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueAvatar}
     */
    public static ChessRogueAvatar newInstance() {
      return new ChessRogueAvatar();
    }

    /**
     * <code>optional uint32 PGPLJENDONA = 9;</code>
     * @return whether the pGPLJENDONA field is set
     */
    public boolean hasPGPLJENDONA() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 PGPLJENDONA = 9;</code>
     * @return this
     */
    public ChessRogueAvatar clearPGPLJENDONA() {
      bitField0_ &= ~0x00000001;
      pGPLJENDONA = 0;
      return this;
    }

    /**
     * <code>optional uint32 PGPLJENDONA = 9;</code>
     * @return the pGPLJENDONA
     */
    public int getPGPLJENDONA() {
      return pGPLJENDONA;
    }

    /**
     * <code>optional uint32 PGPLJENDONA = 9;</code>
     * @param value the pGPLJENDONA to set
     * @return this
     */
    public ChessRogueAvatar setPGPLJENDONA(final int value) {
      bitField0_ |= 0x00000001;
      pGPLJENDONA = value;
      return this;
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @return whether the avatarId field is set
     */
    public boolean hasAvatarId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @return this
     */
    public ChessRogueAvatar clearAvatarId() {
      bitField0_ &= ~0x00000002;
      avatarId = 0;
      return this;
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @return the avatarId
     */
    public int getAvatarId() {
      return avatarId;
    }

    /**
     * <code>optional uint32 avatar_id = 14;</code>
     * @param value the avatarId to set
     * @return this
     */
    public ChessRogueAvatar setAvatarId(final int value) {
      bitField0_ |= 0x00000002;
      avatarId = value;
      return this;
    }

    @Override
    public ChessRogueAvatar copyFrom(final ChessRogueAvatar other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        pGPLJENDONA = other.pGPLJENDONA;
        avatarId = other.avatarId;
      }
      return this;
    }

    @Override
    public ChessRogueAvatar mergeFrom(final ChessRogueAvatar other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasPGPLJENDONA()) {
        setPGPLJENDONA(other.pGPLJENDONA);
      }
      if (other.hasAvatarId()) {
        setAvatarId(other.avatarId);
      }
      return this;
    }

    @Override
    public ChessRogueAvatar clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      pGPLJENDONA = 0;
      avatarId = 0;
      return this;
    }

    @Override
    public ChessRogueAvatar clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueAvatar)) {
        return false;
      }
      ChessRogueAvatar other = (ChessRogueAvatar) o;
      return bitField0_ == other.bitField0_
        && (!hasPGPLJENDONA() || pGPLJENDONA == other.pGPLJENDONA)
        && (!hasAvatarId() || avatarId == other.avatarId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(pGPLJENDONA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(avatarId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(pGPLJENDONA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(avatarId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueAvatar mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 72: {
            // pGPLJENDONA
            pGPLJENDONA = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // avatarId
            avatarId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.pGPLJENDONA, pGPLJENDONA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.avatarId, avatarId);
      }
      output.endObject();
    }

    @Override
    public ChessRogueAvatar mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 952698590: {
            if (input.isAtField(FieldNames.pGPLJENDONA)) {
              if (!input.trySkipNullValue()) {
                pGPLJENDONA = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1787287636:
          case -428636735: {
            if (input.isAtField(FieldNames.avatarId)) {
              if (!input.trySkipNullValue()) {
                avatarId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueAvatar clone() {
      return new ChessRogueAvatar().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueAvatar parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueAvatar(), data).checkInitialized();
    }

    public static ChessRogueAvatar parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAvatar(), input).checkInitialized();
    }

    public static ChessRogueAvatar parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueAvatar(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueAvatar messages
     */
    public static MessageFactory<ChessRogueAvatar> getFactory() {
      return ChessRogueAvatarFactory.INSTANCE;
    }

    private enum ChessRogueAvatarFactory implements MessageFactory<ChessRogueAvatar> {
      INSTANCE;

      @Override
      public ChessRogueAvatar create() {
        return ChessRogueAvatar.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName pGPLJENDONA = FieldName.forField("PGPLJENDONA");

      static final FieldName avatarId = FieldName.forField("avatarId", "avatar_id");
    }
  }
}
