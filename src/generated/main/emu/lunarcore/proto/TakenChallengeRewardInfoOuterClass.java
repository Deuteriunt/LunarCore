// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class TakenChallengeRewardInfoOuterClass {
  /**
   * Protobuf type {@code TakenChallengeRewardInfo}
   */
  public static final class TakenChallengeRewardInfo extends ProtoMessage<TakenChallengeRewardInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 star_count = 9;</code>
     */
    private int starCount;

    /**
     * <code>optional .ItemList reward = 14;</code>
     */
    private final ItemListOuterClass.ItemList reward = ItemListOuterClass.ItemList.newInstance();

    private TakenChallengeRewardInfo() {
    }

    /**
     * @return a new empty instance of {@code TakenChallengeRewardInfo}
     */
    public static TakenChallengeRewardInfo newInstance() {
      return new TakenChallengeRewardInfo();
    }

    /**
     * <code>optional uint32 star_count = 9;</code>
     * @return whether the starCount field is set
     */
    public boolean hasStarCount() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 star_count = 9;</code>
     * @return this
     */
    public TakenChallengeRewardInfo clearStarCount() {
      bitField0_ &= ~0x00000001;
      starCount = 0;
      return this;
    }

    /**
     * <code>optional uint32 star_count = 9;</code>
     * @return the starCount
     */
    public int getStarCount() {
      return starCount;
    }

    /**
     * <code>optional uint32 star_count = 9;</code>
     * @param value the starCount to set
     * @return this
     */
    public TakenChallengeRewardInfo setStarCount(final int value) {
      bitField0_ |= 0x00000001;
      starCount = value;
      return this;
    }

    /**
     * <code>optional .ItemList reward = 14;</code>
     * @return whether the reward field is set
     */
    public boolean hasReward() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ItemList reward = 14;</code>
     * @return this
     */
    public TakenChallengeRewardInfo clearReward() {
      bitField0_ &= ~0x00000002;
      reward.clear();
      return this;
    }

    /**
     * <code>optional .ItemList reward = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableReward()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemListOuterClass.ItemList getReward() {
      return reward;
    }

    /**
     * <code>optional .ItemList reward = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemListOuterClass.ItemList getMutableReward() {
      bitField0_ |= 0x00000002;
      return reward;
    }

    /**
     * <code>optional .ItemList reward = 14;</code>
     * @param value the reward to set
     * @return this
     */
    public TakenChallengeRewardInfo setReward(final ItemListOuterClass.ItemList value) {
      bitField0_ |= 0x00000002;
      reward.copyFrom(value);
      return this;
    }

    @Override
    public TakenChallengeRewardInfo copyFrom(final TakenChallengeRewardInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        starCount = other.starCount;
        reward.copyFrom(other.reward);
      }
      return this;
    }

    @Override
    public TakenChallengeRewardInfo mergeFrom(final TakenChallengeRewardInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasStarCount()) {
        setStarCount(other.starCount);
      }
      if (other.hasReward()) {
        getMutableReward().mergeFrom(other.reward);
      }
      return this;
    }

    @Override
    public TakenChallengeRewardInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      starCount = 0;
      reward.clear();
      return this;
    }

    @Override
    public TakenChallengeRewardInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      reward.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof TakenChallengeRewardInfo)) {
        return false;
      }
      TakenChallengeRewardInfo other = (TakenChallengeRewardInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasStarCount() || starCount == other.starCount)
        && (!hasReward() || reward.equals(other.reward));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(starCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 114);
        output.writeMessageNoTag(reward);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(starCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(reward);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public TakenChallengeRewardInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 72: {
            // starCount
            starCount = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // reward
            input.readMessage(reward);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.starCount, starCount);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.reward, reward);
      }
      output.endObject();
    }

    @Override
    public TakenChallengeRewardInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 2121235933:
          case 2124166370: {
            if (input.isAtField(FieldNames.starCount)) {
              if (!input.trySkipNullValue()) {
                starCount = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -934326481: {
            if (input.isAtField(FieldNames.reward)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(reward);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public TakenChallengeRewardInfo clone() {
      return new TakenChallengeRewardInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static TakenChallengeRewardInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new TakenChallengeRewardInfo(), data).checkInitialized();
    }

    public static TakenChallengeRewardInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new TakenChallengeRewardInfo(), input).checkInitialized();
    }

    public static TakenChallengeRewardInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new TakenChallengeRewardInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating TakenChallengeRewardInfo messages
     */
    public static MessageFactory<TakenChallengeRewardInfo> getFactory() {
      return TakenChallengeRewardInfoFactory.INSTANCE;
    }

    private enum TakenChallengeRewardInfoFactory implements MessageFactory<TakenChallengeRewardInfo> {
      INSTANCE;

      @Override
      public TakenChallengeRewardInfo create() {
        return TakenChallengeRewardInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName starCount = FieldName.forField("starCount", "star_count");

      static final FieldName reward = FieldName.forField("reward");
    }
  }
}
