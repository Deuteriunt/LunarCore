// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedByte;

public final class ClientDownloadDataScNotifyOuterClass {
  /**
   * Protobuf type {@code ClientDownloadDataScNotify}
   */
  public static final class ClientDownloadDataScNotify extends ProtoMessage<ClientDownloadDataScNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .ClientDownloadDataScNotify.ClientDownloadData download_data = 5;</code>
     */
    private final ClientDownloadData downloadData = ClientDownloadData.newInstance();

    private ClientDownloadDataScNotify() {
    }

    /**
     * @return a new empty instance of {@code ClientDownloadDataScNotify}
     */
    public static ClientDownloadDataScNotify newInstance() {
      return new ClientDownloadDataScNotify();
    }

    /**
     * <code>optional .ClientDownloadDataScNotify.ClientDownloadData download_data = 5;</code>
     * @return whether the downloadData field is set
     */
    public boolean hasDownloadData() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .ClientDownloadDataScNotify.ClientDownloadData download_data = 5;</code>
     * @return this
     */
    public ClientDownloadDataScNotify clearDownloadData() {
      bitField0_ &= ~0x00000001;
      downloadData.clear();
      return this;
    }

    /**
     * <code>optional .ClientDownloadDataScNotify.ClientDownloadData download_data = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDownloadData()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ClientDownloadData getDownloadData() {
      return downloadData;
    }

    /**
     * <code>optional .ClientDownloadDataScNotify.ClientDownloadData download_data = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ClientDownloadData getMutableDownloadData() {
      bitField0_ |= 0x00000001;
      return downloadData;
    }

    /**
     * <code>optional .ClientDownloadDataScNotify.ClientDownloadData download_data = 5;</code>
     * @param value the downloadData to set
     * @return this
     */
    public ClientDownloadDataScNotify setDownloadData(final ClientDownloadData value) {
      bitField0_ |= 0x00000001;
      downloadData.copyFrom(value);
      return this;
    }

    @Override
    public ClientDownloadDataScNotify copyFrom(final ClientDownloadDataScNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        downloadData.copyFrom(other.downloadData);
      }
      return this;
    }

    @Override
    public ClientDownloadDataScNotify mergeFrom(final ClientDownloadDataScNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDownloadData()) {
        getMutableDownloadData().mergeFrom(other.downloadData);
      }
      return this;
    }

    @Override
    public ClientDownloadDataScNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      downloadData.clear();
      return this;
    }

    @Override
    public ClientDownloadDataScNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      downloadData.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ClientDownloadDataScNotify)) {
        return false;
      }
      ClientDownloadDataScNotify other = (ClientDownloadDataScNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasDownloadData() || downloadData.equals(other.downloadData));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 42);
        output.writeMessageNoTag(downloadData);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(downloadData);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ClientDownloadDataScNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 42: {
            // downloadData
            input.readMessage(downloadData);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.downloadData, downloadData);
      }
      output.endObject();
    }

    @Override
    public ClientDownloadDataScNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1108584530:
          case 31388929: {
            if (input.isAtField(FieldNames.downloadData)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(downloadData);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ClientDownloadDataScNotify clone() {
      return new ClientDownloadDataScNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ClientDownloadDataScNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ClientDownloadDataScNotify(), data).checkInitialized();
    }

    public static ClientDownloadDataScNotify parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ClientDownloadDataScNotify(), input).checkInitialized();
    }

    public static ClientDownloadDataScNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ClientDownloadDataScNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating ClientDownloadDataScNotify messages
     */
    public static MessageFactory<ClientDownloadDataScNotify> getFactory() {
      return ClientDownloadDataScNotifyFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code ClientDownloadData}
     */
    public static final class ClientDownloadData extends ProtoMessage<ClientDownloadData> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional int64 time = 2;</code>
       */
      private long time;

      /**
       * <code>optional uint32 version = 1;</code>
       */
      private int version;

      /**
       * <code>optional bytes data = 3;</code>
       */
      private final RepeatedByte data = RepeatedByte.newEmptyInstance();

      private ClientDownloadData() {
      }

      /**
       * @return a new empty instance of {@code ClientDownloadData}
       */
      public static ClientDownloadData newInstance() {
        return new ClientDownloadData();
      }

      /**
       * <code>optional int64 time = 2;</code>
       * @return whether the time field is set
       */
      public boolean hasTime() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional int64 time = 2;</code>
       * @return this
       */
      public ClientDownloadData clearTime() {
        bitField0_ &= ~0x00000001;
        time = 0L;
        return this;
      }

      /**
       * <code>optional int64 time = 2;</code>
       * @return the time
       */
      public long getTime() {
        return time;
      }

      /**
       * <code>optional int64 time = 2;</code>
       * @param value the time to set
       * @return this
       */
      public ClientDownloadData setTime(final long value) {
        bitField0_ |= 0x00000001;
        time = value;
        return this;
      }

      /**
       * <code>optional uint32 version = 1;</code>
       * @return whether the version field is set
       */
      public boolean hasVersion() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional uint32 version = 1;</code>
       * @return this
       */
      public ClientDownloadData clearVersion() {
        bitField0_ &= ~0x00000002;
        version = 0;
        return this;
      }

      /**
       * <code>optional uint32 version = 1;</code>
       * @return the version
       */
      public int getVersion() {
        return version;
      }

      /**
       * <code>optional uint32 version = 1;</code>
       * @param value the version to set
       * @return this
       */
      public ClientDownloadData setVersion(final int value) {
        bitField0_ |= 0x00000002;
        version = value;
        return this;
      }

      /**
       * <code>optional bytes data = 3;</code>
       * @return whether the data field is set
       */
      public boolean hasData() {
        return (bitField0_ & 0x00000004) != 0;
      }

      /**
       * <code>optional bytes data = 3;</code>
       * @return this
       */
      public ClientDownloadData clearData() {
        bitField0_ &= ~0x00000004;
        data.clear();
        return this;
      }

      /**
       * <code>optional bytes data = 3;</code>
       *
       * This method returns the internal storage object without modifying any has state.
       * The returned object should not be modified and be treated as read-only.
       *
       * Use {@link #getMutableData()} if you want to modify it.
       *
       * @return internal storage object for reading
       */
      public RepeatedByte getData() {
        return data;
      }

      /**
       * <code>optional bytes data = 3;</code>
       *
       * This method returns the internal storage object and sets the corresponding
       * has state. The returned object will become part of this message and its
       * contents may be modified as long as the has state is not cleared.
       *
       * @return internal storage object for modifications
       */
      public RepeatedByte getMutableData() {
        bitField0_ |= 0x00000004;
        return data;
      }

      /**
       * <code>optional bytes data = 3;</code>
       * @param value the data to add
       * @return this
       */
      public ClientDownloadData addData(final byte value) {
        bitField0_ |= 0x00000004;
        data.add(value);
        return this;
      }

      /**
       * <code>optional bytes data = 3;</code>
       * @param values the data to add
       * @return this
       */
      public ClientDownloadData addAllData(final byte... values) {
        bitField0_ |= 0x00000004;
        data.addAll(values);
        return this;
      }

      /**
       * <code>optional bytes data = 3;</code>
       * @param values the data to set
       * @return this
       */
      public ClientDownloadData setData(final byte... values) {
        bitField0_ |= 0x00000004;
        data.copyFrom(values);
        return this;
      }

      @Override
      public ClientDownloadData copyFrom(final ClientDownloadData other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          time = other.time;
          version = other.version;
          data.copyFrom(other.data);
        }
        return this;
      }

      @Override
      public ClientDownloadData mergeFrom(final ClientDownloadData other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasTime()) {
          setTime(other.time);
        }
        if (other.hasVersion()) {
          setVersion(other.version);
        }
        if (other.hasData()) {
          getMutableData().copyFrom(other.data);
        }
        return this;
      }

      @Override
      public ClientDownloadData clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        time = 0L;
        version = 0;
        data.clear();
        return this;
      }

      @Override
      public ClientDownloadData clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        data.clear();
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof ClientDownloadData)) {
          return false;
        }
        ClientDownloadData other = (ClientDownloadData) o;
        return bitField0_ == other.bitField0_
          && (!hasTime() || time == other.time)
          && (!hasVersion() || version == other.version)
          && (!hasData() || data.equals(other.data));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 16);
          output.writeInt64NoTag(time);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(version);
        }
        if ((bitField0_ & 0x00000004) != 0) {
          output.writeRawByte((byte) 26);
          output.writeBytesNoTag(data);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeInt64SizeNoTag(time);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(version);
        }
        if ((bitField0_ & 0x00000004) != 0) {
          size += 1 + ProtoSink.computeBytesSizeNoTag(data);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public ClientDownloadData mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 16: {
              // time
              time = input.readInt64();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 8) {
                break;
              }
            }
            case 8: {
              // version
              version = input.readUInt32();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 26) {
                break;
              }
            }
            case 26: {
              // data
              input.readBytes(data);
              bitField0_ |= 0x00000004;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeInt64(FieldNames.time, time);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeUInt32(FieldNames.version, version);
        }
        if ((bitField0_ & 0x00000004) != 0) {
          output.writeBytes(FieldNames.data, data);
        }
        output.endObject();
      }

      @Override
      public ClientDownloadData mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 3560141: {
              if (input.isAtField(FieldNames.time)) {
                if (!input.trySkipNullValue()) {
                  time = input.readInt64();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 351608024: {
              if (input.isAtField(FieldNames.version)) {
                if (!input.trySkipNullValue()) {
                  version = input.readUInt32();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 3076010: {
              if (input.isAtField(FieldNames.data)) {
                if (!input.trySkipNullValue()) {
                  input.readBytes(data);
                  bitField0_ |= 0x00000004;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public ClientDownloadData clone() {
        return new ClientDownloadData().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static ClientDownloadData parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new ClientDownloadData(), data).checkInitialized();
      }

      public static ClientDownloadData parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new ClientDownloadData(), input).checkInitialized();
      }

      public static ClientDownloadData parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new ClientDownloadData(), input).checkInitialized();
      }

      /**
       * @return factory for creating ClientDownloadData messages
       */
      public static MessageFactory<ClientDownloadData> getFactory() {
        return ClientDownloadDataFactory.INSTANCE;
      }

      private enum ClientDownloadDataFactory implements MessageFactory<ClientDownloadData> {
        INSTANCE;

        @Override
        public ClientDownloadData create() {
          return ClientDownloadData.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName time = FieldName.forField("time");

        static final FieldName version = FieldName.forField("version");

        static final FieldName data = FieldName.forField("data");
      }
    }

    private enum ClientDownloadDataScNotifyFactory implements MessageFactory<ClientDownloadDataScNotify> {
      INSTANCE;

      @Override
      public ClientDownloadDataScNotify create() {
        return ClientDownloadDataScNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName downloadData = FieldName.forField("downloadData", "download_data");
    }
  }
}
