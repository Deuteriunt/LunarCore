// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;

public final class RogueDialogueEventParamOuterClass {
  /**
   * Protobuf type {@code RogueDialogueEventParam}
   */
  public static final class RogueDialogueEventParam extends ProtoMessage<RogueDialogueEventParam> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional float ratio = 13;</code>
     */
    private float ratio;

    /**
     * <code>optional uint32 dialogue_event_id = 3;</code>
     */
    private int dialogueEventId;

    /**
     * <code>optional uint32 arg_id = 9;</code>
     */
    private int argId;

    /**
     * <code>optional sint32 int_value = 4;</code>
     */
    private int intValue;

    /**
     * <code>optional bool is_valid = 1;</code>
     */
    private boolean isValid;

    private RogueDialogueEventParam() {
    }

    /**
     * @return a new empty instance of {@code RogueDialogueEventParam}
     */
    public static RogueDialogueEventParam newInstance() {
      return new RogueDialogueEventParam();
    }

    /**
     * <code>optional float ratio = 13;</code>
     * @return whether the ratio field is set
     */
    public boolean hasRatio() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional float ratio = 13;</code>
     * @return this
     */
    public RogueDialogueEventParam clearRatio() {
      bitField0_ &= ~0x00000001;
      ratio = 0F;
      return this;
    }

    /**
     * <code>optional float ratio = 13;</code>
     * @return the ratio
     */
    public float getRatio() {
      return ratio;
    }

    /**
     * <code>optional float ratio = 13;</code>
     * @param value the ratio to set
     * @return this
     */
    public RogueDialogueEventParam setRatio(final float value) {
      bitField0_ |= 0x00000001;
      ratio = value;
      return this;
    }

    /**
     * <code>optional uint32 dialogue_event_id = 3;</code>
     * @return whether the dialogueEventId field is set
     */
    public boolean hasDialogueEventId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 dialogue_event_id = 3;</code>
     * @return this
     */
    public RogueDialogueEventParam clearDialogueEventId() {
      bitField0_ &= ~0x00000002;
      dialogueEventId = 0;
      return this;
    }

    /**
     * <code>optional uint32 dialogue_event_id = 3;</code>
     * @return the dialogueEventId
     */
    public int getDialogueEventId() {
      return dialogueEventId;
    }

    /**
     * <code>optional uint32 dialogue_event_id = 3;</code>
     * @param value the dialogueEventId to set
     * @return this
     */
    public RogueDialogueEventParam setDialogueEventId(final int value) {
      bitField0_ |= 0x00000002;
      dialogueEventId = value;
      return this;
    }

    /**
     * <code>optional uint32 arg_id = 9;</code>
     * @return whether the argId field is set
     */
    public boolean hasArgId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 arg_id = 9;</code>
     * @return this
     */
    public RogueDialogueEventParam clearArgId() {
      bitField0_ &= ~0x00000004;
      argId = 0;
      return this;
    }

    /**
     * <code>optional uint32 arg_id = 9;</code>
     * @return the argId
     */
    public int getArgId() {
      return argId;
    }

    /**
     * <code>optional uint32 arg_id = 9;</code>
     * @param value the argId to set
     * @return this
     */
    public RogueDialogueEventParam setArgId(final int value) {
      bitField0_ |= 0x00000004;
      argId = value;
      return this;
    }

    /**
     * <code>optional sint32 int_value = 4;</code>
     * @return whether the intValue field is set
     */
    public boolean hasIntValue() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional sint32 int_value = 4;</code>
     * @return this
     */
    public RogueDialogueEventParam clearIntValue() {
      bitField0_ &= ~0x00000008;
      intValue = 0;
      return this;
    }

    /**
     * <code>optional sint32 int_value = 4;</code>
     * @return the intValue
     */
    public int getIntValue() {
      return intValue;
    }

    /**
     * <code>optional sint32 int_value = 4;</code>
     * @param value the intValue to set
     * @return this
     */
    public RogueDialogueEventParam setIntValue(final int value) {
      bitField0_ |= 0x00000008;
      intValue = value;
      return this;
    }

    /**
     * <code>optional bool is_valid = 1;</code>
     * @return whether the isValid field is set
     */
    public boolean hasIsValid() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional bool is_valid = 1;</code>
     * @return this
     */
    public RogueDialogueEventParam clearIsValid() {
      bitField0_ &= ~0x00000010;
      isValid = false;
      return this;
    }

    /**
     * <code>optional bool is_valid = 1;</code>
     * @return the isValid
     */
    public boolean getIsValid() {
      return isValid;
    }

    /**
     * <code>optional bool is_valid = 1;</code>
     * @param value the isValid to set
     * @return this
     */
    public RogueDialogueEventParam setIsValid(final boolean value) {
      bitField0_ |= 0x00000010;
      isValid = value;
      return this;
    }

    @Override
    public RogueDialogueEventParam copyFrom(final RogueDialogueEventParam other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        ratio = other.ratio;
        dialogueEventId = other.dialogueEventId;
        argId = other.argId;
        intValue = other.intValue;
        isValid = other.isValid;
      }
      return this;
    }

    @Override
    public RogueDialogueEventParam mergeFrom(final RogueDialogueEventParam other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRatio()) {
        setRatio(other.ratio);
      }
      if (other.hasDialogueEventId()) {
        setDialogueEventId(other.dialogueEventId);
      }
      if (other.hasArgId()) {
        setArgId(other.argId);
      }
      if (other.hasIntValue()) {
        setIntValue(other.intValue);
      }
      if (other.hasIsValid()) {
        setIsValid(other.isValid);
      }
      return this;
    }

    @Override
    public RogueDialogueEventParam clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      ratio = 0F;
      dialogueEventId = 0;
      argId = 0;
      intValue = 0;
      isValid = false;
      return this;
    }

    @Override
    public RogueDialogueEventParam clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueDialogueEventParam)) {
        return false;
      }
      RogueDialogueEventParam other = (RogueDialogueEventParam) o;
      return bitField0_ == other.bitField0_
        && (!hasRatio() || ProtoUtil.isEqual(ratio, other.ratio))
        && (!hasDialogueEventId() || dialogueEventId == other.dialogueEventId)
        && (!hasArgId() || argId == other.argId)
        && (!hasIntValue() || intValue == other.intValue)
        && (!hasIsValid() || isValid == other.isValid);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 109);
        output.writeFloatNoTag(ratio);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(dialogueEventId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(argId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 32);
        output.writeSInt32NoTag(intValue);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 8);
        output.writeBoolNoTag(isValid);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dialogueEventId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(argId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeSInt32SizeNoTag(intValue);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueDialogueEventParam mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 109: {
            // ratio
            ratio = input.readFloat();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // dialogueEventId
            dialogueEventId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // argId
            argId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // intValue
            intValue = input.readSInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 8) {
              break;
            }
          }
          case 8: {
            // isValid
            isValid = input.readBool();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeFloat(FieldNames.ratio, ratio);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.dialogueEventId, dialogueEventId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.argId, argId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeSInt32(FieldNames.intValue, intValue);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeBool(FieldNames.isValid, isValid);
      }
      output.endObject();
    }

    @Override
    public RogueDialogueEventParam mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 108285963: {
            if (input.isAtField(FieldNames.ratio)) {
              if (!input.trySkipNullValue()) {
                ratio = input.readFloat();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 88389725:
          case 1671736167: {
            if (input.isAtField(FieldNames.dialogueEventId)) {
              if (!input.trySkipNullValue()) {
                dialogueEventId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 93079057:
          case -1409495132: {
            if (input.isAtField(FieldNames.argId)) {
              if (!input.trySkipNullValue()) {
                argId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 556050114:
          case 334404897: {
            if (input.isAtField(FieldNames.intValue)) {
              if (!input.trySkipNullValue()) {
                intValue = input.readSInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2073378034:
          case 126941351: {
            if (input.isAtField(FieldNames.isValid)) {
              if (!input.trySkipNullValue()) {
                isValid = input.readBool();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueDialogueEventParam clone() {
      return new RogueDialogueEventParam().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueDialogueEventParam parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueDialogueEventParam(), data).checkInitialized();
    }

    public static RogueDialogueEventParam parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueDialogueEventParam(), input).checkInitialized();
    }

    public static RogueDialogueEventParam parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueDialogueEventParam(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueDialogueEventParam messages
     */
    public static MessageFactory<RogueDialogueEventParam> getFactory() {
      return RogueDialogueEventParamFactory.INSTANCE;
    }

    private enum RogueDialogueEventParamFactory implements MessageFactory<RogueDialogueEventParam> {
      INSTANCE;

      @Override
      public RogueDialogueEventParam create() {
        return RogueDialogueEventParam.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName ratio = FieldName.forField("ratio");

      static final FieldName dialogueEventId = FieldName.forField("dialogueEventId", "dialogue_event_id");

      static final FieldName argId = FieldName.forField("argId", "arg_id");

      static final FieldName intValue = FieldName.forField("intValue", "int_value");

      static final FieldName isValid = FieldName.forField("isValid", "is_valid");
    }
  }
}
