// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueBuffInfoOuterClass {
  /**
   * Protobuf type {@code RogueBuffInfo}
   */
  public static final class RogueBuffInfo extends ProtoMessage<RogueBuffInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .RogueBuffSelectInfo buff_select_info = 10;</code>
     */
    private final RogueBuffSelectInfoOuterClass.RogueBuffSelectInfo buffSelectInfo = RogueBuffSelectInfoOuterClass.RogueBuffSelectInfo.newInstance();

    /**
     * <code>repeated .RogueBuff maze_buff_list = 7;</code>
     */
    private final RepeatedMessage<RogueBuffOuterClass.RogueBuff> mazeBuffList = RepeatedMessage.newEmptyInstance(RogueBuffOuterClass.RogueBuff.getFactory());

    private RogueBuffInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueBuffInfo}
     */
    public static RogueBuffInfo newInstance() {
      return new RogueBuffInfo();
    }

    /**
     * <code>optional .RogueBuffSelectInfo buff_select_info = 10;</code>
     * @return whether the buffSelectInfo field is set
     */
    public boolean hasBuffSelectInfo() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .RogueBuffSelectInfo buff_select_info = 10;</code>
     * @return this
     */
    public RogueBuffInfo clearBuffSelectInfo() {
      bitField0_ &= ~0x00000001;
      buffSelectInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueBuffSelectInfo buff_select_info = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBuffSelectInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueBuffSelectInfoOuterClass.RogueBuffSelectInfo getBuffSelectInfo() {
      return buffSelectInfo;
    }

    /**
     * <code>optional .RogueBuffSelectInfo buff_select_info = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueBuffSelectInfoOuterClass.RogueBuffSelectInfo getMutableBuffSelectInfo() {
      bitField0_ |= 0x00000001;
      return buffSelectInfo;
    }

    /**
     * <code>optional .RogueBuffSelectInfo buff_select_info = 10;</code>
     * @param value the buffSelectInfo to set
     * @return this
     */
    public RogueBuffInfo setBuffSelectInfo(
        final RogueBuffSelectInfoOuterClass.RogueBuffSelectInfo value) {
      bitField0_ |= 0x00000001;
      buffSelectInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .RogueBuff maze_buff_list = 7;</code>
     * @return whether the mazeBuffList field is set
     */
    public boolean hasMazeBuffList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .RogueBuff maze_buff_list = 7;</code>
     * @return this
     */
    public RogueBuffInfo clearMazeBuffList() {
      bitField0_ &= ~0x00000002;
      mazeBuffList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueBuff maze_buff_list = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMazeBuffList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueBuffOuterClass.RogueBuff> getMazeBuffList() {
      return mazeBuffList;
    }

    /**
     * <code>repeated .RogueBuff maze_buff_list = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueBuffOuterClass.RogueBuff> getMutableMazeBuffList() {
      bitField0_ |= 0x00000002;
      return mazeBuffList;
    }

    /**
     * <code>repeated .RogueBuff maze_buff_list = 7;</code>
     * @param value the mazeBuffList to add
     * @return this
     */
    public RogueBuffInfo addMazeBuffList(final RogueBuffOuterClass.RogueBuff value) {
      bitField0_ |= 0x00000002;
      mazeBuffList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueBuff maze_buff_list = 7;</code>
     * @param values the mazeBuffList to add
     * @return this
     */
    public RogueBuffInfo addAllMazeBuffList(final RogueBuffOuterClass.RogueBuff... values) {
      bitField0_ |= 0x00000002;
      mazeBuffList.addAll(values);
      return this;
    }

    @Override
    public RogueBuffInfo copyFrom(final RogueBuffInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        buffSelectInfo.copyFrom(other.buffSelectInfo);
        mazeBuffList.copyFrom(other.mazeBuffList);
      }
      return this;
    }

    @Override
    public RogueBuffInfo mergeFrom(final RogueBuffInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBuffSelectInfo()) {
        getMutableBuffSelectInfo().mergeFrom(other.buffSelectInfo);
      }
      if (other.hasMazeBuffList()) {
        getMutableMazeBuffList().addAll(other.mazeBuffList);
      }
      return this;
    }

    @Override
    public RogueBuffInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      buffSelectInfo.clear();
      mazeBuffList.clear();
      return this;
    }

    @Override
    public RogueBuffInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      buffSelectInfo.clearQuick();
      mazeBuffList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueBuffInfo)) {
        return false;
      }
      RogueBuffInfo other = (RogueBuffInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasBuffSelectInfo() || buffSelectInfo.equals(other.buffSelectInfo))
        && (!hasMazeBuffList() || mazeBuffList.equals(other.mazeBuffList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 82);
        output.writeMessageNoTag(buffSelectInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < mazeBuffList.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(mazeBuffList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(buffSelectInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * mazeBuffList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mazeBuffList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueBuffInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 82: {
            // buffSelectInfo
            input.readMessage(buffSelectInfo);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // mazeBuffList
            tag = input.readRepeatedMessage(mazeBuffList, tag);
            bitField0_ |= 0x00000002;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.buffSelectInfo, buffSelectInfo);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.mazeBuffList, mazeBuffList);
      }
      output.endObject();
    }

    @Override
    public RogueBuffInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -255242115:
          case 1500540965: {
            if (input.isAtField(FieldNames.buffSelectInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(buffSelectInfo);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1147228272:
          case -1634995062: {
            if (input.isAtField(FieldNames.mazeBuffList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(mazeBuffList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueBuffInfo clone() {
      return new RogueBuffInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueBuffInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueBuffInfo(), data).checkInitialized();
    }

    public static RogueBuffInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueBuffInfo(), input).checkInitialized();
    }

    public static RogueBuffInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueBuffInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueBuffInfo messages
     */
    public static MessageFactory<RogueBuffInfo> getFactory() {
      return RogueBuffInfoFactory.INSTANCE;
    }

    private enum RogueBuffInfoFactory implements MessageFactory<RogueBuffInfo> {
      INSTANCE;

      @Override
      public RogueBuffInfo create() {
        return RogueBuffInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName buffSelectInfo = FieldName.forField("buffSelectInfo", "buff_select_info");

      static final FieldName mazeBuffList = FieldName.forField("mazeBuffList", "maze_buff_list");
    }
  }
}
