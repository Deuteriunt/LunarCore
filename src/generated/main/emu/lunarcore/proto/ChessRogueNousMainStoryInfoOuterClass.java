// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueNousMainStoryInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueNousMainStoryInfo}
   */
  public static final class ChessRogueNousMainStoryInfo extends ProtoMessage<ChessRogueNousMainStoryInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 story_id = 10;</code>
     */
    private int storyId;

    /**
     * <pre>
     *  2 finished
     * </pre>
     *
     * <code>optional uint32 status = 11;</code>
     */
    private int status;

    private ChessRogueNousMainStoryInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueNousMainStoryInfo}
     */
    public static ChessRogueNousMainStoryInfo newInstance() {
      return new ChessRogueNousMainStoryInfo();
    }

    /**
     * <code>optional uint32 story_id = 10;</code>
     * @return whether the storyId field is set
     */
    public boolean hasStoryId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 story_id = 10;</code>
     * @return this
     */
    public ChessRogueNousMainStoryInfo clearStoryId() {
      bitField0_ &= ~0x00000001;
      storyId = 0;
      return this;
    }

    /**
     * <code>optional uint32 story_id = 10;</code>
     * @return the storyId
     */
    public int getStoryId() {
      return storyId;
    }

    /**
     * <code>optional uint32 story_id = 10;</code>
     * @param value the storyId to set
     * @return this
     */
    public ChessRogueNousMainStoryInfo setStoryId(final int value) {
      bitField0_ |= 0x00000001;
      storyId = value;
      return this;
    }

    /**
     * <pre>
     *  2 finished
     * </pre>
     *
     * <code>optional uint32 status = 11;</code>
     * @return whether the status field is set
     */
    public boolean hasStatus() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     *  2 finished
     * </pre>
     *
     * <code>optional uint32 status = 11;</code>
     * @return this
     */
    public ChessRogueNousMainStoryInfo clearStatus() {
      bitField0_ &= ~0x00000002;
      status = 0;
      return this;
    }

    /**
     * <pre>
     *  2 finished
     * </pre>
     *
     * <code>optional uint32 status = 11;</code>
     * @return the status
     */
    public int getStatus() {
      return status;
    }

    /**
     * <pre>
     *  2 finished
     * </pre>
     *
     * <code>optional uint32 status = 11;</code>
     * @param value the status to set
     * @return this
     */
    public ChessRogueNousMainStoryInfo setStatus(final int value) {
      bitField0_ |= 0x00000002;
      status = value;
      return this;
    }

    @Override
    public ChessRogueNousMainStoryInfo copyFrom(final ChessRogueNousMainStoryInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        storyId = other.storyId;
        status = other.status;
      }
      return this;
    }

    @Override
    public ChessRogueNousMainStoryInfo mergeFrom(final ChessRogueNousMainStoryInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasStoryId()) {
        setStoryId(other.storyId);
      }
      if (other.hasStatus()) {
        setStatus(other.status);
      }
      return this;
    }

    @Override
    public ChessRogueNousMainStoryInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      storyId = 0;
      status = 0;
      return this;
    }

    @Override
    public ChessRogueNousMainStoryInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueNousMainStoryInfo)) {
        return false;
      }
      ChessRogueNousMainStoryInfo other = (ChessRogueNousMainStoryInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasStoryId() || storyId == other.storyId)
        && (!hasStatus() || status == other.status);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(storyId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(status);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(storyId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(status);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueNousMainStoryInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // storyId
            storyId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // status
            status = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.storyId, storyId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.status, status);
      }
      output.endObject();
    }

    @Override
    public ChessRogueNousMainStoryInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1884251920:
          case 1717754021: {
            if (input.isAtField(FieldNames.storyId)) {
              if (!input.trySkipNullValue()) {
                storyId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -892481550: {
            if (input.isAtField(FieldNames.status)) {
              if (!input.trySkipNullValue()) {
                status = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueNousMainStoryInfo clone() {
      return new ChessRogueNousMainStoryInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueNousMainStoryInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueNousMainStoryInfo(), data).checkInitialized();
    }

    public static ChessRogueNousMainStoryInfo parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousMainStoryInfo(), input).checkInitialized();
    }

    public static ChessRogueNousMainStoryInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueNousMainStoryInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueNousMainStoryInfo messages
     */
    public static MessageFactory<ChessRogueNousMainStoryInfo> getFactory() {
      return ChessRogueNousMainStoryInfoFactory.INSTANCE;
    }

    private enum ChessRogueNousMainStoryInfoFactory implements MessageFactory<ChessRogueNousMainStoryInfo> {
      INSTANCE;

      @Override
      public ChessRogueNousMainStoryInfo create() {
        return ChessRogueNousMainStoryInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName storyId = FieldName.forField("storyId", "story_id");

      static final FieldName status = FieldName.forField("status");
    }
  }
}
