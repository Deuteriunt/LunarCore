// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;

public final class RotaterDataOuterClass {
  /**
   * Protobuf type {@code RotaterData}
   */
  public static final class RotaterData extends ProtoMessage<RotaterData> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional float GNECDPPELLO = 8;</code>
     */
    private float gNECDPPELLO;

    /**
     * <code>optional uint32 group_id = 3;</code>
     */
    private int groupId;

    /**
     * <code>optional uint32 BPFADJDEGHP = 5;</code>
     */
    private int bPFADJDEGHP;

    private RotaterData() {
    }

    /**
     * @return a new empty instance of {@code RotaterData}
     */
    public static RotaterData newInstance() {
      return new RotaterData();
    }

    /**
     * <code>optional float GNECDPPELLO = 8;</code>
     * @return whether the gNECDPPELLO field is set
     */
    public boolean hasGNECDPPELLO() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional float GNECDPPELLO = 8;</code>
     * @return this
     */
    public RotaterData clearGNECDPPELLO() {
      bitField0_ &= ~0x00000001;
      gNECDPPELLO = 0F;
      return this;
    }

    /**
     * <code>optional float GNECDPPELLO = 8;</code>
     * @return the gNECDPPELLO
     */
    public float getGNECDPPELLO() {
      return gNECDPPELLO;
    }

    /**
     * <code>optional float GNECDPPELLO = 8;</code>
     * @param value the gNECDPPELLO to set
     * @return this
     */
    public RotaterData setGNECDPPELLO(final float value) {
      bitField0_ |= 0x00000001;
      gNECDPPELLO = value;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @return this
     */
    public RotaterData clearGroupId() {
      bitField0_ &= ~0x00000002;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @param value the groupId to set
     * @return this
     */
    public RotaterData setGroupId(final int value) {
      bitField0_ |= 0x00000002;
      groupId = value;
      return this;
    }

    /**
     * <code>optional uint32 BPFADJDEGHP = 5;</code>
     * @return whether the bPFADJDEGHP field is set
     */
    public boolean hasBPFADJDEGHP() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 BPFADJDEGHP = 5;</code>
     * @return this
     */
    public RotaterData clearBPFADJDEGHP() {
      bitField0_ &= ~0x00000004;
      bPFADJDEGHP = 0;
      return this;
    }

    /**
     * <code>optional uint32 BPFADJDEGHP = 5;</code>
     * @return the bPFADJDEGHP
     */
    public int getBPFADJDEGHP() {
      return bPFADJDEGHP;
    }

    /**
     * <code>optional uint32 BPFADJDEGHP = 5;</code>
     * @param value the bPFADJDEGHP to set
     * @return this
     */
    public RotaterData setBPFADJDEGHP(final int value) {
      bitField0_ |= 0x00000004;
      bPFADJDEGHP = value;
      return this;
    }

    @Override
    public RotaterData copyFrom(final RotaterData other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        gNECDPPELLO = other.gNECDPPELLO;
        groupId = other.groupId;
        bPFADJDEGHP = other.bPFADJDEGHP;
      }
      return this;
    }

    @Override
    public RotaterData mergeFrom(final RotaterData other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasGNECDPPELLO()) {
        setGNECDPPELLO(other.gNECDPPELLO);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasBPFADJDEGHP()) {
        setBPFADJDEGHP(other.bPFADJDEGHP);
      }
      return this;
    }

    @Override
    public RotaterData clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gNECDPPELLO = 0F;
      groupId = 0;
      bPFADJDEGHP = 0;
      return this;
    }

    @Override
    public RotaterData clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RotaterData)) {
        return false;
      }
      RotaterData other = (RotaterData) o;
      return bitField0_ == other.bitField0_
        && (!hasGNECDPPELLO() || ProtoUtil.isEqual(gNECDPPELLO, other.gNECDPPELLO))
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasBPFADJDEGHP() || bPFADJDEGHP == other.bPFADJDEGHP);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 69);
        output.writeFloatNoTag(gNECDPPELLO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(bPFADJDEGHP);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bPFADJDEGHP);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RotaterData mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 69: {
            // gNECDPPELLO
            gNECDPPELLO = input.readFloat();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // bPFADJDEGHP
            bPFADJDEGHP = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeFloat(FieldNames.gNECDPPELLO, gNECDPPELLO);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.bPFADJDEGHP, bPFADJDEGHP);
      }
      output.endObject();
    }

    @Override
    public RotaterData mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 2053242953: {
            if (input.isAtField(FieldNames.gNECDPPELLO)) {
              if (!input.trySkipNullValue()) {
                gNECDPPELLO = input.readFloat();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 874068223: {
            if (input.isAtField(FieldNames.bPFADJDEGHP)) {
              if (!input.trySkipNullValue()) {
                bPFADJDEGHP = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RotaterData clone() {
      return new RotaterData().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RotaterData parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RotaterData(), data).checkInitialized();
    }

    public static RotaterData parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RotaterData(), input).checkInitialized();
    }

    public static RotaterData parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RotaterData(), input).checkInitialized();
    }

    /**
     * @return factory for creating RotaterData messages
     */
    public static MessageFactory<RotaterData> getFactory() {
      return RotaterDataFactory.INSTANCE;
    }

    private enum RotaterDataFactory implements MessageFactory<RotaterData> {
      INSTANCE;

      @Override
      public RotaterData create() {
        return RotaterData.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName gNECDPPELLO = FieldName.forField("GNECDPPELLO");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName bPFADJDEGHP = FieldName.forField("BPFADJDEGHP");
    }
  }
}
