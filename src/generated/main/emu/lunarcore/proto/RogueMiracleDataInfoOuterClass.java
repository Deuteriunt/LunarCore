// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueMiracleDataInfoOuterClass {
  /**
   * Protobuf type {@code RogueMiracleDataInfo}
   */
  public static final class RogueMiracleDataInfo extends ProtoMessage<RogueMiracleDataInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 LHCJBLAECHK = 1;</code>
     */
    private int lHCJBLAECHK;

    /**
     * <code>optional uint32 miracle_id = 4;</code>
     */
    private int miracleId;

    /**
     * <code>optional uint32 FFLMCOJAJAI = 7;</code>
     */
    private int fFLMCOJAJAI;

    /**
     * <code>optional uint32 CNFMGJHFABD = 13;</code>
     */
    private int cNFMGJHFABD;

    /**
     * <code>repeated .RogueMiracleDataInfo.HIFKDHKJGACEntry HIFKDHKJGAC = 3;</code>
     */
    private final RepeatedMessage<HIFKDHKJGACEntry> hIFKDHKJGAC = RepeatedMessage.newEmptyInstance(HIFKDHKJGACEntry.getFactory());

    private RogueMiracleDataInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueMiracleDataInfo}
     */
    public static RogueMiracleDataInfo newInstance() {
      return new RogueMiracleDataInfo();
    }

    /**
     * <code>optional uint32 LHCJBLAECHK = 1;</code>
     * @return whether the lHCJBLAECHK field is set
     */
    public boolean hasLHCJBLAECHK() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 LHCJBLAECHK = 1;</code>
     * @return this
     */
    public RogueMiracleDataInfo clearLHCJBLAECHK() {
      bitField0_ &= ~0x00000001;
      lHCJBLAECHK = 0;
      return this;
    }

    /**
     * <code>optional uint32 LHCJBLAECHK = 1;</code>
     * @return the lHCJBLAECHK
     */
    public int getLHCJBLAECHK() {
      return lHCJBLAECHK;
    }

    /**
     * <code>optional uint32 LHCJBLAECHK = 1;</code>
     * @param value the lHCJBLAECHK to set
     * @return this
     */
    public RogueMiracleDataInfo setLHCJBLAECHK(final int value) {
      bitField0_ |= 0x00000001;
      lHCJBLAECHK = value;
      return this;
    }

    /**
     * <code>optional uint32 miracle_id = 4;</code>
     * @return whether the miracleId field is set
     */
    public boolean hasMiracleId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 miracle_id = 4;</code>
     * @return this
     */
    public RogueMiracleDataInfo clearMiracleId() {
      bitField0_ &= ~0x00000002;
      miracleId = 0;
      return this;
    }

    /**
     * <code>optional uint32 miracle_id = 4;</code>
     * @return the miracleId
     */
    public int getMiracleId() {
      return miracleId;
    }

    /**
     * <code>optional uint32 miracle_id = 4;</code>
     * @param value the miracleId to set
     * @return this
     */
    public RogueMiracleDataInfo setMiracleId(final int value) {
      bitField0_ |= 0x00000002;
      miracleId = value;
      return this;
    }

    /**
     * <code>optional uint32 FFLMCOJAJAI = 7;</code>
     * @return whether the fFLMCOJAJAI field is set
     */
    public boolean hasFFLMCOJAJAI() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 FFLMCOJAJAI = 7;</code>
     * @return this
     */
    public RogueMiracleDataInfo clearFFLMCOJAJAI() {
      bitField0_ &= ~0x00000004;
      fFLMCOJAJAI = 0;
      return this;
    }

    /**
     * <code>optional uint32 FFLMCOJAJAI = 7;</code>
     * @return the fFLMCOJAJAI
     */
    public int getFFLMCOJAJAI() {
      return fFLMCOJAJAI;
    }

    /**
     * <code>optional uint32 FFLMCOJAJAI = 7;</code>
     * @param value the fFLMCOJAJAI to set
     * @return this
     */
    public RogueMiracleDataInfo setFFLMCOJAJAI(final int value) {
      bitField0_ |= 0x00000004;
      fFLMCOJAJAI = value;
      return this;
    }

    /**
     * <code>optional uint32 CNFMGJHFABD = 13;</code>
     * @return whether the cNFMGJHFABD field is set
     */
    public boolean hasCNFMGJHFABD() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 CNFMGJHFABD = 13;</code>
     * @return this
     */
    public RogueMiracleDataInfo clearCNFMGJHFABD() {
      bitField0_ &= ~0x00000008;
      cNFMGJHFABD = 0;
      return this;
    }

    /**
     * <code>optional uint32 CNFMGJHFABD = 13;</code>
     * @return the cNFMGJHFABD
     */
    public int getCNFMGJHFABD() {
      return cNFMGJHFABD;
    }

    /**
     * <code>optional uint32 CNFMGJHFABD = 13;</code>
     * @param value the cNFMGJHFABD to set
     * @return this
     */
    public RogueMiracleDataInfo setCNFMGJHFABD(final int value) {
      bitField0_ |= 0x00000008;
      cNFMGJHFABD = value;
      return this;
    }

    /**
     * <code>repeated .RogueMiracleDataInfo.HIFKDHKJGACEntry HIFKDHKJGAC = 3;</code>
     * @return whether the hIFKDHKJGAC field is set
     */
    public boolean hasHIFKDHKJGAC() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .RogueMiracleDataInfo.HIFKDHKJGACEntry HIFKDHKJGAC = 3;</code>
     * @return this
     */
    public RogueMiracleDataInfo clearHIFKDHKJGAC() {
      bitField0_ &= ~0x00000010;
      hIFKDHKJGAC.clear();
      return this;
    }

    /**
     * <code>repeated .RogueMiracleDataInfo.HIFKDHKJGACEntry HIFKDHKJGAC = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableHIFKDHKJGAC()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<HIFKDHKJGACEntry> getHIFKDHKJGAC() {
      return hIFKDHKJGAC;
    }

    /**
     * <code>repeated .RogueMiracleDataInfo.HIFKDHKJGACEntry HIFKDHKJGAC = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<HIFKDHKJGACEntry> getMutableHIFKDHKJGAC() {
      bitField0_ |= 0x00000010;
      return hIFKDHKJGAC;
    }

    /**
     * <code>repeated .RogueMiracleDataInfo.HIFKDHKJGACEntry HIFKDHKJGAC = 3;</code>
     * @param value the hIFKDHKJGAC to add
     * @return this
     */
    public RogueMiracleDataInfo addHIFKDHKJGAC(final HIFKDHKJGACEntry value) {
      bitField0_ |= 0x00000010;
      hIFKDHKJGAC.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueMiracleDataInfo.HIFKDHKJGACEntry HIFKDHKJGAC = 3;</code>
     * @param values the hIFKDHKJGAC to add
     * @return this
     */
    public RogueMiracleDataInfo addAllHIFKDHKJGAC(final HIFKDHKJGACEntry... values) {
      bitField0_ |= 0x00000010;
      hIFKDHKJGAC.addAll(values);
      return this;
    }

    @Override
    public RogueMiracleDataInfo copyFrom(final RogueMiracleDataInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        lHCJBLAECHK = other.lHCJBLAECHK;
        miracleId = other.miracleId;
        fFLMCOJAJAI = other.fFLMCOJAJAI;
        cNFMGJHFABD = other.cNFMGJHFABD;
        hIFKDHKJGAC.copyFrom(other.hIFKDHKJGAC);
      }
      return this;
    }

    @Override
    public RogueMiracleDataInfo mergeFrom(final RogueMiracleDataInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLHCJBLAECHK()) {
        setLHCJBLAECHK(other.lHCJBLAECHK);
      }
      if (other.hasMiracleId()) {
        setMiracleId(other.miracleId);
      }
      if (other.hasFFLMCOJAJAI()) {
        setFFLMCOJAJAI(other.fFLMCOJAJAI);
      }
      if (other.hasCNFMGJHFABD()) {
        setCNFMGJHFABD(other.cNFMGJHFABD);
      }
      if (other.hasHIFKDHKJGAC()) {
        getMutableHIFKDHKJGAC().addAll(other.hIFKDHKJGAC);
      }
      return this;
    }

    @Override
    public RogueMiracleDataInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      lHCJBLAECHK = 0;
      miracleId = 0;
      fFLMCOJAJAI = 0;
      cNFMGJHFABD = 0;
      hIFKDHKJGAC.clear();
      return this;
    }

    @Override
    public RogueMiracleDataInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      hIFKDHKJGAC.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueMiracleDataInfo)) {
        return false;
      }
      RogueMiracleDataInfo other = (RogueMiracleDataInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasLHCJBLAECHK() || lHCJBLAECHK == other.lHCJBLAECHK)
        && (!hasMiracleId() || miracleId == other.miracleId)
        && (!hasFFLMCOJAJAI() || fFLMCOJAJAI == other.fFLMCOJAJAI)
        && (!hasCNFMGJHFABD() || cNFMGJHFABD == other.cNFMGJHFABD)
        && (!hasHIFKDHKJGAC() || hIFKDHKJGAC.equals(other.hIFKDHKJGAC));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(lHCJBLAECHK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(miracleId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(fFLMCOJAJAI);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(cNFMGJHFABD);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < hIFKDHKJGAC.length(); i++) {
          output.writeRawByte((byte) 26);
          output.writeMessageNoTag(hIFKDHKJGAC.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(lHCJBLAECHK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(miracleId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fFLMCOJAJAI);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cNFMGJHFABD);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * hIFKDHKJGAC.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(hIFKDHKJGAC);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueMiracleDataInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // lHCJBLAECHK
            lHCJBLAECHK = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // miracleId
            miracleId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // fFLMCOJAJAI
            fFLMCOJAJAI = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // cNFMGJHFABD
            cNFMGJHFABD = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // hIFKDHKJGAC
            tag = input.readRepeatedMessage(hIFKDHKJGAC, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.lHCJBLAECHK, lHCJBLAECHK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.miracleId, miracleId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.fFLMCOJAJAI, fFLMCOJAJAI);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.cNFMGJHFABD, cNFMGJHFABD);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.hIFKDHKJGAC, hIFKDHKJGAC);
      }
      output.endObject();
    }

    @Override
    public RogueMiracleDataInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -431171691: {
            if (input.isAtField(FieldNames.lHCJBLAECHK)) {
              if (!input.trySkipNullValue()) {
                lHCJBLAECHK = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -164571796:
          case -806736983: {
            if (input.isAtField(FieldNames.miracleId)) {
              if (!input.trySkipNullValue()) {
                miracleId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 686494478: {
            if (input.isAtField(FieldNames.fFLMCOJAJAI)) {
              if (!input.trySkipNullValue()) {
                fFLMCOJAJAI = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1575260368: {
            if (input.isAtField(FieldNames.cNFMGJHFABD)) {
              if (!input.trySkipNullValue()) {
                cNFMGJHFABD = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 255478432: {
            if (input.isAtField(FieldNames.hIFKDHKJGAC)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(hIFKDHKJGAC);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueMiracleDataInfo clone() {
      return new RogueMiracleDataInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueMiracleDataInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueMiracleDataInfo(), data).checkInitialized();
    }

    public static RogueMiracleDataInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMiracleDataInfo(), input).checkInitialized();
    }

    public static RogueMiracleDataInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMiracleDataInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueMiracleDataInfo messages
     */
    public static MessageFactory<RogueMiracleDataInfo> getFactory() {
      return RogueMiracleDataInfoFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code HIFKDHKJGACEntry}
     */
    public static final class HIFKDHKJGACEntry extends ProtoMessage<HIFKDHKJGACEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional uint32 value = 2;</code>
       */
      private int value_;

      private HIFKDHKJGACEntry() {
      }

      /**
       * @return a new empty instance of {@code HIFKDHKJGACEntry}
       */
      public static HIFKDHKJGACEntry newInstance() {
        return new HIFKDHKJGACEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public HIFKDHKJGACEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public HIFKDHKJGACEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return this
       */
      public HIFKDHKJGACEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_ = 0;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return the value_
       */
      public int getValue() {
        return value_;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public HIFKDHKJGACEntry setValue(final int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        return this;
      }

      @Override
      public HIFKDHKJGACEntry copyFrom(final HIFKDHKJGACEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_ = other.value_;
        }
        return this;
      }

      @Override
      public HIFKDHKJGACEntry mergeFrom(final HIFKDHKJGACEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          setValue(other.value_);
        }
        return this;
      }

      @Override
      public HIFKDHKJGACEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_ = 0;
        return this;
      }

      @Override
      public HIFKDHKJGACEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof HIFKDHKJGACEntry)) {
          return false;
        }
        HIFKDHKJGACEntry other = (HIFKDHKJGACEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_ == other.value_);
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public HIFKDHKJGACEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 16) {
                break;
              }
            }
            case 16: {
              // value_
              value_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeUInt32(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public HIFKDHKJGACEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public HIFKDHKJGACEntry clone() {
        return new HIFKDHKJGACEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static HIFKDHKJGACEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new HIFKDHKJGACEntry(), data).checkInitialized();
      }

      public static HIFKDHKJGACEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new HIFKDHKJGACEntry(), input).checkInitialized();
      }

      public static HIFKDHKJGACEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new HIFKDHKJGACEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating HIFKDHKJGACEntry messages
       */
      public static MessageFactory<HIFKDHKJGACEntry> getFactory() {
        return HIFKDHKJGACEntryFactory.INSTANCE;
      }

      private enum HIFKDHKJGACEntryFactory implements MessageFactory<HIFKDHKJGACEntry> {
        INSTANCE;

        @Override
        public HIFKDHKJGACEntry create() {
          return HIFKDHKJGACEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum RogueMiracleDataInfoFactory implements MessageFactory<RogueMiracleDataInfo> {
      INSTANCE;

      @Override
      public RogueMiracleDataInfo create() {
        return RogueMiracleDataInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName lHCJBLAECHK = FieldName.forField("LHCJBLAECHK");

      static final FieldName miracleId = FieldName.forField("miracleId", "miracle_id");

      static final FieldName fFLMCOJAJAI = FieldName.forField("FFLMCOJAJAI");

      static final FieldName cNFMGJHFABD = FieldName.forField("CNFMGJHFABD");

      static final FieldName hIFKDHKJGAC = FieldName.forField("HIFKDHKJGAC");
    }
  }
}
