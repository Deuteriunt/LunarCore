// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class RogueMiracleSelectInfoOuterClass {
  /**
   * Protobuf type {@code RogueMiracleSelectInfo}
   */
  public static final class RogueMiracleSelectInfo extends ProtoMessage<RogueMiracleSelectInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 MMHMDBDONIA = 2;</code>
     */
    private int mMHMDBDONIA;

    /**
     * <pre>
     *  idk guess source
     * </pre>
     *
     * <code>optional uint32 OJOMBNGGHFI = 8;</code>
     */
    private int oJOMBNGGHFI;

    /**
     * <code>repeated uint32 miracle_info = 5;</code>
     */
    private final RepeatedInt miracleInfo = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 miracle_info_remote = 13;</code>
     */
    private final RepeatedInt miracleInfoRemote = RepeatedInt.newEmptyInstance();

    private RogueMiracleSelectInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueMiracleSelectInfo}
     */
    public static RogueMiracleSelectInfo newInstance() {
      return new RogueMiracleSelectInfo();
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 MMHMDBDONIA = 2;</code>
     * @return whether the mMHMDBDONIA field is set
     */
    public boolean hasMMHMDBDONIA() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 MMHMDBDONIA = 2;</code>
     * @return this
     */
    public RogueMiracleSelectInfo clearMMHMDBDONIA() {
      bitField0_ &= ~0x00000001;
      mMHMDBDONIA = 0;
      return this;
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 MMHMDBDONIA = 2;</code>
     * @return the mMHMDBDONIA
     */
    public int getMMHMDBDONIA() {
      return mMHMDBDONIA;
    }

    /**
     * <pre>
     *  idk
     * </pre>
     *
     * <code>optional uint32 MMHMDBDONIA = 2;</code>
     * @param value the mMHMDBDONIA to set
     * @return this
     */
    public RogueMiracleSelectInfo setMMHMDBDONIA(final int value) {
      bitField0_ |= 0x00000001;
      mMHMDBDONIA = value;
      return this;
    }

    /**
     * <pre>
     *  idk guess source
     * </pre>
     *
     * <code>optional uint32 OJOMBNGGHFI = 8;</code>
     * @return whether the oJOMBNGGHFI field is set
     */
    public boolean hasOJOMBNGGHFI() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     *  idk guess source
     * </pre>
     *
     * <code>optional uint32 OJOMBNGGHFI = 8;</code>
     * @return this
     */
    public RogueMiracleSelectInfo clearOJOMBNGGHFI() {
      bitField0_ &= ~0x00000002;
      oJOMBNGGHFI = 0;
      return this;
    }

    /**
     * <pre>
     *  idk guess source
     * </pre>
     *
     * <code>optional uint32 OJOMBNGGHFI = 8;</code>
     * @return the oJOMBNGGHFI
     */
    public int getOJOMBNGGHFI() {
      return oJOMBNGGHFI;
    }

    /**
     * <pre>
     *  idk guess source
     * </pre>
     *
     * <code>optional uint32 OJOMBNGGHFI = 8;</code>
     * @param value the oJOMBNGGHFI to set
     * @return this
     */
    public RogueMiracleSelectInfo setOJOMBNGGHFI(final int value) {
      bitField0_ |= 0x00000002;
      oJOMBNGGHFI = value;
      return this;
    }

    /**
     * <code>repeated uint32 miracle_info = 5;</code>
     * @return whether the miracleInfo field is set
     */
    public boolean hasMiracleInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 miracle_info = 5;</code>
     * @return this
     */
    public RogueMiracleSelectInfo clearMiracleInfo() {
      bitField0_ &= ~0x00000004;
      miracleInfo.clear();
      return this;
    }

    /**
     * <code>repeated uint32 miracle_info = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMiracleInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getMiracleInfo() {
      return miracleInfo;
    }

    /**
     * <code>repeated uint32 miracle_info = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableMiracleInfo() {
      bitField0_ |= 0x00000004;
      return miracleInfo;
    }

    /**
     * <code>repeated uint32 miracle_info = 5;</code>
     * @param value the miracleInfo to add
     * @return this
     */
    public RogueMiracleSelectInfo addMiracleInfo(final int value) {
      bitField0_ |= 0x00000004;
      miracleInfo.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 miracle_info = 5;</code>
     * @param values the miracleInfo to add
     * @return this
     */
    public RogueMiracleSelectInfo addAllMiracleInfo(final int... values) {
      bitField0_ |= 0x00000004;
      miracleInfo.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 miracle_info_remote = 13;</code>
     * @return whether the miracleInfoRemote field is set
     */
    public boolean hasMiracleInfoRemote() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 miracle_info_remote = 13;</code>
     * @return this
     */
    public RogueMiracleSelectInfo clearMiracleInfoRemote() {
      bitField0_ &= ~0x00000008;
      miracleInfoRemote.clear();
      return this;
    }

    /**
     * <code>repeated uint32 miracle_info_remote = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMiracleInfoRemote()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getMiracleInfoRemote() {
      return miracleInfoRemote;
    }

    /**
     * <code>repeated uint32 miracle_info_remote = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableMiracleInfoRemote() {
      bitField0_ |= 0x00000008;
      return miracleInfoRemote;
    }

    /**
     * <code>repeated uint32 miracle_info_remote = 13;</code>
     * @param value the miracleInfoRemote to add
     * @return this
     */
    public RogueMiracleSelectInfo addMiracleInfoRemote(final int value) {
      bitField0_ |= 0x00000008;
      miracleInfoRemote.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 miracle_info_remote = 13;</code>
     * @param values the miracleInfoRemote to add
     * @return this
     */
    public RogueMiracleSelectInfo addAllMiracleInfoRemote(final int... values) {
      bitField0_ |= 0x00000008;
      miracleInfoRemote.addAll(values);
      return this;
    }

    @Override
    public RogueMiracleSelectInfo copyFrom(final RogueMiracleSelectInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mMHMDBDONIA = other.mMHMDBDONIA;
        oJOMBNGGHFI = other.oJOMBNGGHFI;
        miracleInfo.copyFrom(other.miracleInfo);
        miracleInfoRemote.copyFrom(other.miracleInfoRemote);
      }
      return this;
    }

    @Override
    public RogueMiracleSelectInfo mergeFrom(final RogueMiracleSelectInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMMHMDBDONIA()) {
        setMMHMDBDONIA(other.mMHMDBDONIA);
      }
      if (other.hasOJOMBNGGHFI()) {
        setOJOMBNGGHFI(other.oJOMBNGGHFI);
      }
      if (other.hasMiracleInfo()) {
        getMutableMiracleInfo().addAll(other.miracleInfo);
      }
      if (other.hasMiracleInfoRemote()) {
        getMutableMiracleInfoRemote().addAll(other.miracleInfoRemote);
      }
      return this;
    }

    @Override
    public RogueMiracleSelectInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mMHMDBDONIA = 0;
      oJOMBNGGHFI = 0;
      miracleInfo.clear();
      miracleInfoRemote.clear();
      return this;
    }

    @Override
    public RogueMiracleSelectInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      miracleInfo.clear();
      miracleInfoRemote.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueMiracleSelectInfo)) {
        return false;
      }
      RogueMiracleSelectInfo other = (RogueMiracleSelectInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasMMHMDBDONIA() || mMHMDBDONIA == other.mMHMDBDONIA)
        && (!hasOJOMBNGGHFI() || oJOMBNGGHFI == other.oJOMBNGGHFI)
        && (!hasMiracleInfo() || miracleInfo.equals(other.miracleInfo))
        && (!hasMiracleInfoRemote() || miracleInfoRemote.equals(other.miracleInfoRemote));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(mMHMDBDONIA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(oJOMBNGGHFI);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < miracleInfo.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(miracleInfo.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < miracleInfoRemote.length(); i++) {
          output.writeRawByte((byte) 104);
          output.writeUInt32NoTag(miracleInfoRemote.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mMHMDBDONIA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oJOMBNGGHFI);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * miracleInfo.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(miracleInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * miracleInfoRemote.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(miracleInfoRemote);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueMiracleSelectInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // mMHMDBDONIA
            mMHMDBDONIA = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // oJOMBNGGHFI
            oJOMBNGGHFI = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // miracleInfo [packed=true]
            input.readPackedUInt32(miracleInfo, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // miracleInfoRemote [packed=true]
            input.readPackedUInt32(miracleInfoRemote, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // miracleInfo [packed=false]
            tag = input.readRepeatedUInt32(miracleInfo, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 104: {
            // miracleInfoRemote [packed=false]
            tag = input.readRepeatedUInt32(miracleInfoRemote, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.mMHMDBDONIA, mMHMDBDONIA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.oJOMBNGGHFI, oJOMBNGGHFI);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.miracleInfo, miracleInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.miracleInfoRemote, miracleInfoRemote);
      }
      output.endObject();
    }

    @Override
    public RogueMiracleSelectInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1232769672: {
            if (input.isAtField(FieldNames.mMHMDBDONIA)) {
              if (!input.trySkipNullValue()) {
                mMHMDBDONIA = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1138375098: {
            if (input.isAtField(FieldNames.oJOMBNGGHFI)) {
              if (!input.trySkipNullValue()) {
                oJOMBNGGHFI = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 760306879:
          case 2114852796: {
            if (input.isAtField(FieldNames.miracleInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(miracleInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -212699675:
          case 609350185: {
            if (input.isAtField(FieldNames.miracleInfoRemote)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(miracleInfoRemote);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueMiracleSelectInfo clone() {
      return new RogueMiracleSelectInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueMiracleSelectInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueMiracleSelectInfo(), data).checkInitialized();
    }

    public static RogueMiracleSelectInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMiracleSelectInfo(), input).checkInitialized();
    }

    public static RogueMiracleSelectInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMiracleSelectInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueMiracleSelectInfo messages
     */
    public static MessageFactory<RogueMiracleSelectInfo> getFactory() {
      return RogueMiracleSelectInfoFactory.INSTANCE;
    }

    private enum RogueMiracleSelectInfoFactory implements MessageFactory<RogueMiracleSelectInfo> {
      INSTANCE;

      @Override
      public RogueMiracleSelectInfo create() {
        return RogueMiracleSelectInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mMHMDBDONIA = FieldName.forField("MMHMDBDONIA");

      static final FieldName oJOMBNGGHFI = FieldName.forField("OJOMBNGGHFI");

      static final FieldName miracleInfo = FieldName.forField("miracleInfo", "miracle_info");

      static final FieldName miracleInfoRemote = FieldName.forField("miracleInfoRemote", "miracle_info_remote");
    }
  }
}
