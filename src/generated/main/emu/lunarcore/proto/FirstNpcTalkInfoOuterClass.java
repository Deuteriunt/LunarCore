// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class FirstNpcTalkInfoOuterClass {
  /**
   * Protobuf type {@code FirstNpcTalkInfo}
   */
  public static final class FirstNpcTalkInfo extends ProtoMessage<FirstNpcTalkInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 npc_id = 3;</code>
     */
    private int npcId;

    /**
     * <code>optional bool KGCJMBBFBIA = 7;</code>
     */
    private boolean kGCJMBBFBIA;

    private FirstNpcTalkInfo() {
    }

    /**
     * @return a new empty instance of {@code FirstNpcTalkInfo}
     */
    public static FirstNpcTalkInfo newInstance() {
      return new FirstNpcTalkInfo();
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @return whether the npcId field is set
     */
    public boolean hasNpcId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @return this
     */
    public FirstNpcTalkInfo clearNpcId() {
      bitField0_ &= ~0x00000001;
      npcId = 0;
      return this;
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @return the npcId
     */
    public int getNpcId() {
      return npcId;
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @param value the npcId to set
     * @return this
     */
    public FirstNpcTalkInfo setNpcId(final int value) {
      bitField0_ |= 0x00000001;
      npcId = value;
      return this;
    }

    /**
     * <code>optional bool KGCJMBBFBIA = 7;</code>
     * @return whether the kGCJMBBFBIA field is set
     */
    public boolean hasKGCJMBBFBIA() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool KGCJMBBFBIA = 7;</code>
     * @return this
     */
    public FirstNpcTalkInfo clearKGCJMBBFBIA() {
      bitField0_ &= ~0x00000002;
      kGCJMBBFBIA = false;
      return this;
    }

    /**
     * <code>optional bool KGCJMBBFBIA = 7;</code>
     * @return the kGCJMBBFBIA
     */
    public boolean getKGCJMBBFBIA() {
      return kGCJMBBFBIA;
    }

    /**
     * <code>optional bool KGCJMBBFBIA = 7;</code>
     * @param value the kGCJMBBFBIA to set
     * @return this
     */
    public FirstNpcTalkInfo setKGCJMBBFBIA(final boolean value) {
      bitField0_ |= 0x00000002;
      kGCJMBBFBIA = value;
      return this;
    }

    @Override
    public FirstNpcTalkInfo copyFrom(final FirstNpcTalkInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        npcId = other.npcId;
        kGCJMBBFBIA = other.kGCJMBBFBIA;
      }
      return this;
    }

    @Override
    public FirstNpcTalkInfo mergeFrom(final FirstNpcTalkInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasNpcId()) {
        setNpcId(other.npcId);
      }
      if (other.hasKGCJMBBFBIA()) {
        setKGCJMBBFBIA(other.kGCJMBBFBIA);
      }
      return this;
    }

    @Override
    public FirstNpcTalkInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      npcId = 0;
      kGCJMBBFBIA = false;
      return this;
    }

    @Override
    public FirstNpcTalkInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof FirstNpcTalkInfo)) {
        return false;
      }
      FirstNpcTalkInfo other = (FirstNpcTalkInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasNpcId() || npcId == other.npcId)
        && (!hasKGCJMBBFBIA() || kGCJMBBFBIA == other.kGCJMBBFBIA);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(npcId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 56);
        output.writeBoolNoTag(kGCJMBBFBIA);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(npcId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public FirstNpcTalkInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // npcId
            npcId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // kGCJMBBFBIA
            kGCJMBBFBIA = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.npcId, npcId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.kGCJMBBFBIA, kGCJMBBFBIA);
      }
      output.endObject();
    }

    @Override
    public FirstNpcTalkInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 105021404:
          case -1039282375: {
            if (input.isAtField(FieldNames.npcId)) {
              if (!input.trySkipNullValue()) {
                npcId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1845407362: {
            if (input.isAtField(FieldNames.kGCJMBBFBIA)) {
              if (!input.trySkipNullValue()) {
                kGCJMBBFBIA = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public FirstNpcTalkInfo clone() {
      return new FirstNpcTalkInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static FirstNpcTalkInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new FirstNpcTalkInfo(), data).checkInitialized();
    }

    public static FirstNpcTalkInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FirstNpcTalkInfo(), input).checkInitialized();
    }

    public static FirstNpcTalkInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FirstNpcTalkInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating FirstNpcTalkInfo messages
     */
    public static MessageFactory<FirstNpcTalkInfo> getFactory() {
      return FirstNpcTalkInfoFactory.INSTANCE;
    }

    private enum FirstNpcTalkInfoFactory implements MessageFactory<FirstNpcTalkInfo> {
      INSTANCE;

      @Override
      public FirstNpcTalkInfo create() {
        return FirstNpcTalkInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName npcId = FieldName.forField("npcId", "npc_id");

      static final FieldName kGCJMBBFBIA = FieldName.forField("KGCJMBBFBIA");
    }
  }
}
