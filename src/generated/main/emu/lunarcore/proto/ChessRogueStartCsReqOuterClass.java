// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChessRogueStartCsReqOuterClass {
  /**
   * Protobuf type {@code ChessRogueStartCsReq}
   */
  public static final class ChessRogueStartCsReq extends ProtoMessage<ChessRogueStartCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  guess this is the difficulty level
     * </pre>
     *
     * <code>optional uint32 KOLEFJKMFLF = 1;</code>
     */
    private int kOLEFJKMFLF;

    /**
     * <code>optional uint32 area_id = 5;</code>
     */
    private int areaId;

    /**
     * <code>optional uint32 dice_branch_id = 9;</code>
     */
    private int diceBranchId;

    /**
     * <code>repeated uint32 DDDICOEFHPM = 6;</code>
     */
    private final RepeatedInt dDDICOEFHPM = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 JDCMGPJHGLG = 8;</code>
     */
    private final RepeatedInt jDCMGPJHGLG = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 disable_aeon_id = 13;</code>
     */
    private final RepeatedInt disableAeonId = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 base_avatar_id_list = 15;</code>
     */
    private final RepeatedInt baseAvatarIdList = RepeatedInt.newEmptyInstance();

    private ChessRogueStartCsReq() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueStartCsReq}
     */
    public static ChessRogueStartCsReq newInstance() {
      return new ChessRogueStartCsReq();
    }

    /**
     * <pre>
     *  guess this is the difficulty level
     * </pre>
     *
     * <code>optional uint32 KOLEFJKMFLF = 1;</code>
     * @return whether the kOLEFJKMFLF field is set
     */
    public boolean hasKOLEFJKMFLF() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  guess this is the difficulty level
     * </pre>
     *
     * <code>optional uint32 KOLEFJKMFLF = 1;</code>
     * @return this
     */
    public ChessRogueStartCsReq clearKOLEFJKMFLF() {
      bitField0_ &= ~0x00000001;
      kOLEFJKMFLF = 0;
      return this;
    }

    /**
     * <pre>
     *  guess this is the difficulty level
     * </pre>
     *
     * <code>optional uint32 KOLEFJKMFLF = 1;</code>
     * @return the kOLEFJKMFLF
     */
    public int getKOLEFJKMFLF() {
      return kOLEFJKMFLF;
    }

    /**
     * <pre>
     *  guess this is the difficulty level
     * </pre>
     *
     * <code>optional uint32 KOLEFJKMFLF = 1;</code>
     * @param value the kOLEFJKMFLF to set
     * @return this
     */
    public ChessRogueStartCsReq setKOLEFJKMFLF(final int value) {
      bitField0_ |= 0x00000001;
      kOLEFJKMFLF = value;
      return this;
    }

    /**
     * <code>optional uint32 area_id = 5;</code>
     * @return whether the areaId field is set
     */
    public boolean hasAreaId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 area_id = 5;</code>
     * @return this
     */
    public ChessRogueStartCsReq clearAreaId() {
      bitField0_ &= ~0x00000002;
      areaId = 0;
      return this;
    }

    /**
     * <code>optional uint32 area_id = 5;</code>
     * @return the areaId
     */
    public int getAreaId() {
      return areaId;
    }

    /**
     * <code>optional uint32 area_id = 5;</code>
     * @param value the areaId to set
     * @return this
     */
    public ChessRogueStartCsReq setAreaId(final int value) {
      bitField0_ |= 0x00000002;
      areaId = value;
      return this;
    }

    /**
     * <code>optional uint32 dice_branch_id = 9;</code>
     * @return whether the diceBranchId field is set
     */
    public boolean hasDiceBranchId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 dice_branch_id = 9;</code>
     * @return this
     */
    public ChessRogueStartCsReq clearDiceBranchId() {
      bitField0_ &= ~0x00000004;
      diceBranchId = 0;
      return this;
    }

    /**
     * <code>optional uint32 dice_branch_id = 9;</code>
     * @return the diceBranchId
     */
    public int getDiceBranchId() {
      return diceBranchId;
    }

    /**
     * <code>optional uint32 dice_branch_id = 9;</code>
     * @param value the diceBranchId to set
     * @return this
     */
    public ChessRogueStartCsReq setDiceBranchId(final int value) {
      bitField0_ |= 0x00000004;
      diceBranchId = value;
      return this;
    }

    /**
     * <code>repeated uint32 DDDICOEFHPM = 6;</code>
     * @return whether the dDDICOEFHPM field is set
     */
    public boolean hasDDDICOEFHPM() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 DDDICOEFHPM = 6;</code>
     * @return this
     */
    public ChessRogueStartCsReq clearDDDICOEFHPM() {
      bitField0_ &= ~0x00000008;
      dDDICOEFHPM.clear();
      return this;
    }

    /**
     * <code>repeated uint32 DDDICOEFHPM = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDDDICOEFHPM()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getDDDICOEFHPM() {
      return dDDICOEFHPM;
    }

    /**
     * <code>repeated uint32 DDDICOEFHPM = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableDDDICOEFHPM() {
      bitField0_ |= 0x00000008;
      return dDDICOEFHPM;
    }

    /**
     * <code>repeated uint32 DDDICOEFHPM = 6;</code>
     * @param value the dDDICOEFHPM to add
     * @return this
     */
    public ChessRogueStartCsReq addDDDICOEFHPM(final int value) {
      bitField0_ |= 0x00000008;
      dDDICOEFHPM.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 DDDICOEFHPM = 6;</code>
     * @param values the dDDICOEFHPM to add
     * @return this
     */
    public ChessRogueStartCsReq addAllDDDICOEFHPM(final int... values) {
      bitField0_ |= 0x00000008;
      dDDICOEFHPM.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 JDCMGPJHGLG = 8;</code>
     * @return whether the jDCMGPJHGLG field is set
     */
    public boolean hasJDCMGPJHGLG() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 JDCMGPJHGLG = 8;</code>
     * @return this
     */
    public ChessRogueStartCsReq clearJDCMGPJHGLG() {
      bitField0_ &= ~0x00000010;
      jDCMGPJHGLG.clear();
      return this;
    }

    /**
     * <code>repeated uint32 JDCMGPJHGLG = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableJDCMGPJHGLG()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getJDCMGPJHGLG() {
      return jDCMGPJHGLG;
    }

    /**
     * <code>repeated uint32 JDCMGPJHGLG = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableJDCMGPJHGLG() {
      bitField0_ |= 0x00000010;
      return jDCMGPJHGLG;
    }

    /**
     * <code>repeated uint32 JDCMGPJHGLG = 8;</code>
     * @param value the jDCMGPJHGLG to add
     * @return this
     */
    public ChessRogueStartCsReq addJDCMGPJHGLG(final int value) {
      bitField0_ |= 0x00000010;
      jDCMGPJHGLG.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 JDCMGPJHGLG = 8;</code>
     * @param values the jDCMGPJHGLG to add
     * @return this
     */
    public ChessRogueStartCsReq addAllJDCMGPJHGLG(final int... values) {
      bitField0_ |= 0x00000010;
      jDCMGPJHGLG.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 disable_aeon_id = 13;</code>
     * @return whether the disableAeonId field is set
     */
    public boolean hasDisableAeonId() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 disable_aeon_id = 13;</code>
     * @return this
     */
    public ChessRogueStartCsReq clearDisableAeonId() {
      bitField0_ &= ~0x00000020;
      disableAeonId.clear();
      return this;
    }

    /**
     * <code>repeated uint32 disable_aeon_id = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDisableAeonId()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getDisableAeonId() {
      return disableAeonId;
    }

    /**
     * <code>repeated uint32 disable_aeon_id = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableDisableAeonId() {
      bitField0_ |= 0x00000020;
      return disableAeonId;
    }

    /**
     * <code>repeated uint32 disable_aeon_id = 13;</code>
     * @param value the disableAeonId to add
     * @return this
     */
    public ChessRogueStartCsReq addDisableAeonId(final int value) {
      bitField0_ |= 0x00000020;
      disableAeonId.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 disable_aeon_id = 13;</code>
     * @param values the disableAeonId to add
     * @return this
     */
    public ChessRogueStartCsReq addAllDisableAeonId(final int... values) {
      bitField0_ |= 0x00000020;
      disableAeonId.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 base_avatar_id_list = 15;</code>
     * @return whether the baseAvatarIdList field is set
     */
    public boolean hasBaseAvatarIdList() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated uint32 base_avatar_id_list = 15;</code>
     * @return this
     */
    public ChessRogueStartCsReq clearBaseAvatarIdList() {
      bitField0_ &= ~0x00000040;
      baseAvatarIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 base_avatar_id_list = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBaseAvatarIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getBaseAvatarIdList() {
      return baseAvatarIdList;
    }

    /**
     * <code>repeated uint32 base_avatar_id_list = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableBaseAvatarIdList() {
      bitField0_ |= 0x00000040;
      return baseAvatarIdList;
    }

    /**
     * <code>repeated uint32 base_avatar_id_list = 15;</code>
     * @param value the baseAvatarIdList to add
     * @return this
     */
    public ChessRogueStartCsReq addBaseAvatarIdList(final int value) {
      bitField0_ |= 0x00000040;
      baseAvatarIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 base_avatar_id_list = 15;</code>
     * @param values the baseAvatarIdList to add
     * @return this
     */
    public ChessRogueStartCsReq addAllBaseAvatarIdList(final int... values) {
      bitField0_ |= 0x00000040;
      baseAvatarIdList.addAll(values);
      return this;
    }

    @Override
    public ChessRogueStartCsReq copyFrom(final ChessRogueStartCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kOLEFJKMFLF = other.kOLEFJKMFLF;
        areaId = other.areaId;
        diceBranchId = other.diceBranchId;
        dDDICOEFHPM.copyFrom(other.dDDICOEFHPM);
        jDCMGPJHGLG.copyFrom(other.jDCMGPJHGLG);
        disableAeonId.copyFrom(other.disableAeonId);
        baseAvatarIdList.copyFrom(other.baseAvatarIdList);
      }
      return this;
    }

    @Override
    public ChessRogueStartCsReq mergeFrom(final ChessRogueStartCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKOLEFJKMFLF()) {
        setKOLEFJKMFLF(other.kOLEFJKMFLF);
      }
      if (other.hasAreaId()) {
        setAreaId(other.areaId);
      }
      if (other.hasDiceBranchId()) {
        setDiceBranchId(other.diceBranchId);
      }
      if (other.hasDDDICOEFHPM()) {
        getMutableDDDICOEFHPM().addAll(other.dDDICOEFHPM);
      }
      if (other.hasJDCMGPJHGLG()) {
        getMutableJDCMGPJHGLG().addAll(other.jDCMGPJHGLG);
      }
      if (other.hasDisableAeonId()) {
        getMutableDisableAeonId().addAll(other.disableAeonId);
      }
      if (other.hasBaseAvatarIdList()) {
        getMutableBaseAvatarIdList().addAll(other.baseAvatarIdList);
      }
      return this;
    }

    @Override
    public ChessRogueStartCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kOLEFJKMFLF = 0;
      areaId = 0;
      diceBranchId = 0;
      dDDICOEFHPM.clear();
      jDCMGPJHGLG.clear();
      disableAeonId.clear();
      baseAvatarIdList.clear();
      return this;
    }

    @Override
    public ChessRogueStartCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dDDICOEFHPM.clear();
      jDCMGPJHGLG.clear();
      disableAeonId.clear();
      baseAvatarIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueStartCsReq)) {
        return false;
      }
      ChessRogueStartCsReq other = (ChessRogueStartCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasKOLEFJKMFLF() || kOLEFJKMFLF == other.kOLEFJKMFLF)
        && (!hasAreaId() || areaId == other.areaId)
        && (!hasDiceBranchId() || diceBranchId == other.diceBranchId)
        && (!hasDDDICOEFHPM() || dDDICOEFHPM.equals(other.dDDICOEFHPM))
        && (!hasJDCMGPJHGLG() || jDCMGPJHGLG.equals(other.jDCMGPJHGLG))
        && (!hasDisableAeonId() || disableAeonId.equals(other.disableAeonId))
        && (!hasBaseAvatarIdList() || baseAvatarIdList.equals(other.baseAvatarIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(kOLEFJKMFLF);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(areaId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(diceBranchId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < dDDICOEFHPM.length(); i++) {
          output.writeRawByte((byte) 48);
          output.writeUInt32NoTag(dDDICOEFHPM.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < jDCMGPJHGLG.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(jDCMGPJHGLG.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < disableAeonId.length(); i++) {
          output.writeRawByte((byte) 104);
          output.writeUInt32NoTag(disableAeonId.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < baseAvatarIdList.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(baseAvatarIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kOLEFJKMFLF);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(areaId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(diceBranchId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * dDDICOEFHPM.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(dDDICOEFHPM);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * jDCMGPJHGLG.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(jDCMGPJHGLG);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * disableAeonId.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(disableAeonId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * baseAvatarIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(baseAvatarIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueStartCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // kOLEFJKMFLF
            kOLEFJKMFLF = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // areaId
            areaId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // diceBranchId
            diceBranchId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // dDDICOEFHPM [packed=true]
            input.readPackedUInt32(dDDICOEFHPM, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // jDCMGPJHGLG [packed=true]
            input.readPackedUInt32(jDCMGPJHGLG, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // disableAeonId [packed=true]
            input.readPackedUInt32(disableAeonId, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // baseAvatarIdList [packed=true]
            input.readPackedUInt32(baseAvatarIdList, tag);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 48: {
            // dDDICOEFHPM [packed=false]
            tag = input.readRepeatedUInt32(dDDICOEFHPM, tag);
            bitField0_ |= 0x00000008;
            break;
          }
          case 64: {
            // jDCMGPJHGLG [packed=false]
            tag = input.readRepeatedUInt32(jDCMGPJHGLG, tag);
            bitField0_ |= 0x00000010;
            break;
          }
          case 104: {
            // disableAeonId [packed=false]
            tag = input.readRepeatedUInt32(disableAeonId, tag);
            bitField0_ |= 0x00000020;
            break;
          }
          case 120: {
            // baseAvatarIdList [packed=false]
            tag = input.readRepeatedUInt32(baseAvatarIdList, tag);
            bitField0_ |= 0x00000040;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.kOLEFJKMFLF, kOLEFJKMFLF);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.areaId, areaId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.diceBranchId, diceBranchId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.dDDICOEFHPM, dDDICOEFHPM);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.jDCMGPJHGLG, jDCMGPJHGLG);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.disableAeonId, disableAeonId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedUInt32(FieldNames.baseAvatarIdList, baseAvatarIdList);
      }
      output.endObject();
    }

    @Override
    public ChessRogueStartCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -13887267: {
            if (input.isAtField(FieldNames.kOLEFJKMFLF)) {
              if (!input.trySkipNullValue()) {
                kOLEFJKMFLF = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1409553784:
          case -746472947: {
            if (input.isAtField(FieldNames.areaId)) {
              if (!input.trySkipNullValue()) {
                areaId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 216999716:
          case 1050456640: {
            if (input.isAtField(FieldNames.diceBranchId)) {
              if (!input.trySkipNullValue()) {
                diceBranchId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -727553421: {
            if (input.isAtField(FieldNames.dDDICOEFHPM)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(dDDICOEFHPM);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 852754199: {
            if (input.isAtField(FieldNames.jDCMGPJHGLG)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(jDCMGPJHGLG);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1370442106:
          case -1529483392: {
            if (input.isAtField(FieldNames.disableAeonId)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(disableAeonId);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1212654461:
          case 914628490: {
            if (input.isAtField(FieldNames.baseAvatarIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(baseAvatarIdList);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueStartCsReq clone() {
      return new ChessRogueStartCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueStartCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueStartCsReq(), data).checkInitialized();
    }

    public static ChessRogueStartCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueStartCsReq(), input).checkInitialized();
    }

    public static ChessRogueStartCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueStartCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueStartCsReq messages
     */
    public static MessageFactory<ChessRogueStartCsReq> getFactory() {
      return ChessRogueStartCsReqFactory.INSTANCE;
    }

    private enum ChessRogueStartCsReqFactory implements MessageFactory<ChessRogueStartCsReq> {
      INSTANCE;

      @Override
      public ChessRogueStartCsReq create() {
        return ChessRogueStartCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kOLEFJKMFLF = FieldName.forField("KOLEFJKMFLF");

      static final FieldName areaId = FieldName.forField("areaId", "area_id");

      static final FieldName diceBranchId = FieldName.forField("diceBranchId", "dice_branch_id");

      static final FieldName dDDICOEFHPM = FieldName.forField("DDDICOEFHPM");

      static final FieldName jDCMGPJHGLG = FieldName.forField("JDCMGPJHGLG");

      static final FieldName disableAeonId = FieldName.forField("disableAeonId", "disable_aeon_id");

      static final FieldName baseAvatarIdList = FieldName.forField("baseAvatarIdList", "base_avatar_id_list");
    }
  }
}
