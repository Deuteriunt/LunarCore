// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueAreaOuterClass {
  /**
   * Protobuf type {@code RogueArea}
   */
  public static final class RogueArea extends ProtoMessage<RogueArea> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cur_reach_room_num = 2;</code>
     */
    private int curReachRoomNum;

    /**
     * <code>optional uint32 map_id = 5;</code>
     */
    private int mapId;

    /**
     * <code>optional uint32 area_id = 7;</code>
     */
    private int areaId;

    /**
     * <code>optional uint32 rogue_area_status = 8;</code>
     */
    private int rogueAreaStatus;

    /**
     * <pre>
     *  HJEALCCKPAO AMMMELMOKJF = 12;
     * </pre>
     *
     * <code>optional bool CMJFDLMBIOK = 14;</code>
     */
    private boolean cMJFDLMBIOK;

    private RogueArea() {
    }

    /**
     * @return a new empty instance of {@code RogueArea}
     */
    public static RogueArea newInstance() {
      return new RogueArea();
    }

    /**
     * <code>optional uint32 cur_reach_room_num = 2;</code>
     * @return whether the curReachRoomNum field is set
     */
    public boolean hasCurReachRoomNum() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cur_reach_room_num = 2;</code>
     * @return this
     */
    public RogueArea clearCurReachRoomNum() {
      bitField0_ &= ~0x00000001;
      curReachRoomNum = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_reach_room_num = 2;</code>
     * @return the curReachRoomNum
     */
    public int getCurReachRoomNum() {
      return curReachRoomNum;
    }

    /**
     * <code>optional uint32 cur_reach_room_num = 2;</code>
     * @param value the curReachRoomNum to set
     * @return this
     */
    public RogueArea setCurReachRoomNum(final int value) {
      bitField0_ |= 0x00000001;
      curReachRoomNum = value;
      return this;
    }

    /**
     * <code>optional uint32 map_id = 5;</code>
     * @return whether the mapId field is set
     */
    public boolean hasMapId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 map_id = 5;</code>
     * @return this
     */
    public RogueArea clearMapId() {
      bitField0_ &= ~0x00000002;
      mapId = 0;
      return this;
    }

    /**
     * <code>optional uint32 map_id = 5;</code>
     * @return the mapId
     */
    public int getMapId() {
      return mapId;
    }

    /**
     * <code>optional uint32 map_id = 5;</code>
     * @param value the mapId to set
     * @return this
     */
    public RogueArea setMapId(final int value) {
      bitField0_ |= 0x00000002;
      mapId = value;
      return this;
    }

    /**
     * <code>optional uint32 area_id = 7;</code>
     * @return whether the areaId field is set
     */
    public boolean hasAreaId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 area_id = 7;</code>
     * @return this
     */
    public RogueArea clearAreaId() {
      bitField0_ &= ~0x00000004;
      areaId = 0;
      return this;
    }

    /**
     * <code>optional uint32 area_id = 7;</code>
     * @return the areaId
     */
    public int getAreaId() {
      return areaId;
    }

    /**
     * <code>optional uint32 area_id = 7;</code>
     * @param value the areaId to set
     * @return this
     */
    public RogueArea setAreaId(final int value) {
      bitField0_ |= 0x00000004;
      areaId = value;
      return this;
    }

    /**
     * <code>optional uint32 rogue_area_status = 8;</code>
     * @return whether the rogueAreaStatus field is set
     */
    public boolean hasRogueAreaStatus() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 rogue_area_status = 8;</code>
     * @return this
     */
    public RogueArea clearRogueAreaStatus() {
      bitField0_ &= ~0x00000008;
      rogueAreaStatus = 0;
      return this;
    }

    /**
     * <code>optional uint32 rogue_area_status = 8;</code>
     * @return the rogueAreaStatus
     */
    public int getRogueAreaStatus() {
      return rogueAreaStatus;
    }

    /**
     * <code>optional uint32 rogue_area_status = 8;</code>
     * @param value the rogueAreaStatus to set
     * @return this
     */
    public RogueArea setRogueAreaStatus(final int value) {
      bitField0_ |= 0x00000008;
      rogueAreaStatus = value;
      return this;
    }

    /**
     * <pre>
     *  HJEALCCKPAO AMMMELMOKJF = 12;
     * </pre>
     *
     * <code>optional bool CMJFDLMBIOK = 14;</code>
     * @return whether the cMJFDLMBIOK field is set
     */
    public boolean hasCMJFDLMBIOK() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     *  HJEALCCKPAO AMMMELMOKJF = 12;
     * </pre>
     *
     * <code>optional bool CMJFDLMBIOK = 14;</code>
     * @return this
     */
    public RogueArea clearCMJFDLMBIOK() {
      bitField0_ &= ~0x00000010;
      cMJFDLMBIOK = false;
      return this;
    }

    /**
     * <pre>
     *  HJEALCCKPAO AMMMELMOKJF = 12;
     * </pre>
     *
     * <code>optional bool CMJFDLMBIOK = 14;</code>
     * @return the cMJFDLMBIOK
     */
    public boolean getCMJFDLMBIOK() {
      return cMJFDLMBIOK;
    }

    /**
     * <pre>
     *  HJEALCCKPAO AMMMELMOKJF = 12;
     * </pre>
     *
     * <code>optional bool CMJFDLMBIOK = 14;</code>
     * @param value the cMJFDLMBIOK to set
     * @return this
     */
    public RogueArea setCMJFDLMBIOK(final boolean value) {
      bitField0_ |= 0x00000010;
      cMJFDLMBIOK = value;
      return this;
    }

    @Override
    public RogueArea copyFrom(final RogueArea other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curReachRoomNum = other.curReachRoomNum;
        mapId = other.mapId;
        areaId = other.areaId;
        rogueAreaStatus = other.rogueAreaStatus;
        cMJFDLMBIOK = other.cMJFDLMBIOK;
      }
      return this;
    }

    @Override
    public RogueArea mergeFrom(final RogueArea other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurReachRoomNum()) {
        setCurReachRoomNum(other.curReachRoomNum);
      }
      if (other.hasMapId()) {
        setMapId(other.mapId);
      }
      if (other.hasAreaId()) {
        setAreaId(other.areaId);
      }
      if (other.hasRogueAreaStatus()) {
        setRogueAreaStatus(other.rogueAreaStatus);
      }
      if (other.hasCMJFDLMBIOK()) {
        setCMJFDLMBIOK(other.cMJFDLMBIOK);
      }
      return this;
    }

    @Override
    public RogueArea clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curReachRoomNum = 0;
      mapId = 0;
      areaId = 0;
      rogueAreaStatus = 0;
      cMJFDLMBIOK = false;
      return this;
    }

    @Override
    public RogueArea clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueArea)) {
        return false;
      }
      RogueArea other = (RogueArea) o;
      return bitField0_ == other.bitField0_
        && (!hasCurReachRoomNum() || curReachRoomNum == other.curReachRoomNum)
        && (!hasMapId() || mapId == other.mapId)
        && (!hasAreaId() || areaId == other.areaId)
        && (!hasRogueAreaStatus() || rogueAreaStatus == other.rogueAreaStatus)
        && (!hasCMJFDLMBIOK() || cMJFDLMBIOK == other.cMJFDLMBIOK);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(curReachRoomNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(mapId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(areaId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(rogueAreaStatus);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 112);
        output.writeBoolNoTag(cMJFDLMBIOK);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curReachRoomNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mapId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(areaId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rogueAreaStatus);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueArea mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // curReachRoomNum
            curReachRoomNum = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // mapId
            mapId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // areaId
            areaId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // rogueAreaStatus
            rogueAreaStatus = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // cMJFDLMBIOK
            cMJFDLMBIOK = input.readBool();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.curReachRoomNum, curReachRoomNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.mapId, mapId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.areaId, areaId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.rogueAreaStatus, rogueAreaStatus);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeBool(FieldNames.cMJFDLMBIOK, cMJFDLMBIOK);
      }
      output.endObject();
    }

    @Override
    public RogueArea mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 888045080:
          case 328196941: {
            if (input.isAtField(FieldNames.curReachRoomNum)) {
              if (!input.trySkipNullValue()) {
                curReachRoomNum = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 103663511:
          case -1081377058: {
            if (input.isAtField(FieldNames.mapId)) {
              if (!input.trySkipNullValue()) {
                mapId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1409553784:
          case -746472947: {
            if (input.isAtField(FieldNames.areaId)) {
              if (!input.trySkipNullValue()) {
                areaId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -731414439:
          case -1961715457: {
            if (input.isAtField(FieldNames.rogueAreaStatus)) {
              if (!input.trySkipNullValue()) {
                rogueAreaStatus = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1216373954: {
            if (input.isAtField(FieldNames.cMJFDLMBIOK)) {
              if (!input.trySkipNullValue()) {
                cMJFDLMBIOK = input.readBool();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueArea clone() {
      return new RogueArea().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueArea parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueArea(), data).checkInitialized();
    }

    public static RogueArea parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueArea(), input).checkInitialized();
    }

    public static RogueArea parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueArea(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueArea messages
     */
    public static MessageFactory<RogueArea> getFactory() {
      return RogueAreaFactory.INSTANCE;
    }

    private enum RogueAreaFactory implements MessageFactory<RogueArea> {
      INSTANCE;

      @Override
      public RogueArea create() {
        return RogueArea.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curReachRoomNum = FieldName.forField("curReachRoomNum", "cur_reach_room_num");

      static final FieldName mapId = FieldName.forField("mapId", "map_id");

      static final FieldName areaId = FieldName.forField("areaId", "area_id");

      static final FieldName rogueAreaStatus = FieldName.forField("rogueAreaStatus", "rogue_area_status");

      static final FieldName cMJFDLMBIOK = FieldName.forField("CMJFDLMBIOK");
    }
  }
}
