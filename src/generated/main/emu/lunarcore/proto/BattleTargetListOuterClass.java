// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class BattleTargetListOuterClass {
  /**
   * Protobuf type {@code BattleTargetList}
   */
  public static final class BattleTargetList extends ProtoMessage<BattleTargetList> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated .BattleTarget battle_target_list = 1;</code>
     */
    private final RepeatedMessage<BattleTargetOuterClass.BattleTarget> battleTargetList = RepeatedMessage.newEmptyInstance(BattleTargetOuterClass.BattleTarget.getFactory());

    private BattleTargetList() {
    }

    /**
     * @return a new empty instance of {@code BattleTargetList}
     */
    public static BattleTargetList newInstance() {
      return new BattleTargetList();
    }

    /**
     * <code>repeated .BattleTarget battle_target_list = 1;</code>
     * @return whether the battleTargetList field is set
     */
    public boolean hasBattleTargetList() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated .BattleTarget battle_target_list = 1;</code>
     * @return this
     */
    public BattleTargetList clearBattleTargetList() {
      bitField0_ &= ~0x00000001;
      battleTargetList.clear();
      return this;
    }

    /**
     * <code>repeated .BattleTarget battle_target_list = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBattleTargetList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BattleTargetOuterClass.BattleTarget> getBattleTargetList() {
      return battleTargetList;
    }

    /**
     * <code>repeated .BattleTarget battle_target_list = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BattleTargetOuterClass.BattleTarget> getMutableBattleTargetList() {
      bitField0_ |= 0x00000001;
      return battleTargetList;
    }

    /**
     * <code>repeated .BattleTarget battle_target_list = 1;</code>
     * @param value the battleTargetList to add
     * @return this
     */
    public BattleTargetList addBattleTargetList(final BattleTargetOuterClass.BattleTarget value) {
      bitField0_ |= 0x00000001;
      battleTargetList.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleTarget battle_target_list = 1;</code>
     * @param values the battleTargetList to add
     * @return this
     */
    public BattleTargetList addAllBattleTargetList(
        final BattleTargetOuterClass.BattleTarget... values) {
      bitField0_ |= 0x00000001;
      battleTargetList.addAll(values);
      return this;
    }

    @Override
    public BattleTargetList copyFrom(final BattleTargetList other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        battleTargetList.copyFrom(other.battleTargetList);
      }
      return this;
    }

    @Override
    public BattleTargetList mergeFrom(final BattleTargetList other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBattleTargetList()) {
        getMutableBattleTargetList().addAll(other.battleTargetList);
      }
      return this;
    }

    @Override
    public BattleTargetList clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      battleTargetList.clear();
      return this;
    }

    @Override
    public BattleTargetList clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      battleTargetList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof BattleTargetList)) {
        return false;
      }
      BattleTargetList other = (BattleTargetList) o;
      return bitField0_ == other.bitField0_
        && (!hasBattleTargetList() || battleTargetList.equals(other.battleTargetList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < battleTargetList.length(); i++) {
          output.writeRawByte((byte) 10);
          output.writeMessageNoTag(battleTargetList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * battleTargetList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(battleTargetList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public BattleTargetList mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 10: {
            // battleTargetList
            tag = input.readRepeatedMessage(battleTargetList, tag);
            bitField0_ |= 0x00000001;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedMessage(FieldNames.battleTargetList, battleTargetList);
      }
      output.endObject();
    }

    @Override
    public BattleTargetList mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1658064039:
          case 2141562245: {
            if (input.isAtField(FieldNames.battleTargetList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(battleTargetList);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public BattleTargetList clone() {
      return new BattleTargetList().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static BattleTargetList parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new BattleTargetList(), data).checkInitialized();
    }

    public static BattleTargetList parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleTargetList(), input).checkInitialized();
    }

    public static BattleTargetList parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleTargetList(), input).checkInitialized();
    }

    /**
     * @return factory for creating BattleTargetList messages
     */
    public static MessageFactory<BattleTargetList> getFactory() {
      return BattleTargetListFactory.INSTANCE;
    }

    private enum BattleTargetListFactory implements MessageFactory<BattleTargetList> {
      INSTANCE;

      @Override
      public BattleTargetList create() {
        return BattleTargetList.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName battleTargetList = FieldName.forField("battleTargetList", "battle_target_list");
    }
  }
}
