// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueHandbookDataOuterClass {
  /**
   * Protobuf type {@code RogueHandbookData}
   */
  public static final class RogueHandbookData extends ProtoMessage<RogueHandbookData> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 rogue_current_version = 4;</code>
     */
    private int rogueCurrentVersion;

    /**
     * <code>optional bool is_miracle_unlock = 10;</code>
     */
    private boolean isMiracleUnlock;

    private RogueHandbookData() {
    }

    /**
     * @return a new empty instance of {@code RogueHandbookData}
     */
    public static RogueHandbookData newInstance() {
      return new RogueHandbookData();
    }

    /**
     * <code>optional uint32 rogue_current_version = 4;</code>
     * @return whether the rogueCurrentVersion field is set
     */
    public boolean hasRogueCurrentVersion() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 rogue_current_version = 4;</code>
     * @return this
     */
    public RogueHandbookData clearRogueCurrentVersion() {
      bitField0_ &= ~0x00000001;
      rogueCurrentVersion = 0;
      return this;
    }

    /**
     * <code>optional uint32 rogue_current_version = 4;</code>
     * @return the rogueCurrentVersion
     */
    public int getRogueCurrentVersion() {
      return rogueCurrentVersion;
    }

    /**
     * <code>optional uint32 rogue_current_version = 4;</code>
     * @param value the rogueCurrentVersion to set
     * @return this
     */
    public RogueHandbookData setRogueCurrentVersion(final int value) {
      bitField0_ |= 0x00000001;
      rogueCurrentVersion = value;
      return this;
    }

    /**
     * <code>optional bool is_miracle_unlock = 10;</code>
     * @return whether the isMiracleUnlock field is set
     */
    public boolean hasIsMiracleUnlock() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool is_miracle_unlock = 10;</code>
     * @return this
     */
    public RogueHandbookData clearIsMiracleUnlock() {
      bitField0_ &= ~0x00000002;
      isMiracleUnlock = false;
      return this;
    }

    /**
     * <code>optional bool is_miracle_unlock = 10;</code>
     * @return the isMiracleUnlock
     */
    public boolean getIsMiracleUnlock() {
      return isMiracleUnlock;
    }

    /**
     * <code>optional bool is_miracle_unlock = 10;</code>
     * @param value the isMiracleUnlock to set
     * @return this
     */
    public RogueHandbookData setIsMiracleUnlock(final boolean value) {
      bitField0_ |= 0x00000002;
      isMiracleUnlock = value;
      return this;
    }

    @Override
    public RogueHandbookData copyFrom(final RogueHandbookData other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        rogueCurrentVersion = other.rogueCurrentVersion;
        isMiracleUnlock = other.isMiracleUnlock;
      }
      return this;
    }

    @Override
    public RogueHandbookData mergeFrom(final RogueHandbookData other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRogueCurrentVersion()) {
        setRogueCurrentVersion(other.rogueCurrentVersion);
      }
      if (other.hasIsMiracleUnlock()) {
        setIsMiracleUnlock(other.isMiracleUnlock);
      }
      return this;
    }

    @Override
    public RogueHandbookData clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueCurrentVersion = 0;
      isMiracleUnlock = false;
      return this;
    }

    @Override
    public RogueHandbookData clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueHandbookData)) {
        return false;
      }
      RogueHandbookData other = (RogueHandbookData) o;
      return bitField0_ == other.bitField0_
        && (!hasRogueCurrentVersion() || rogueCurrentVersion == other.rogueCurrentVersion)
        && (!hasIsMiracleUnlock() || isMiracleUnlock == other.isMiracleUnlock);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(rogueCurrentVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeBoolNoTag(isMiracleUnlock);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rogueCurrentVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueHandbookData mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // rogueCurrentVersion
            rogueCurrentVersion = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // isMiracleUnlock
            isMiracleUnlock = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.rogueCurrentVersion, rogueCurrentVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.isMiracleUnlock, isMiracleUnlock);
      }
      output.endObject();
    }

    @Override
    public RogueHandbookData mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1261212057:
          case 1302648749: {
            if (input.isAtField(FieldNames.rogueCurrentVersion)) {
              if (!input.trySkipNullValue()) {
                rogueCurrentVersion = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1272353269:
          case 167980679: {
            if (input.isAtField(FieldNames.isMiracleUnlock)) {
              if (!input.trySkipNullValue()) {
                isMiracleUnlock = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueHandbookData clone() {
      return new RogueHandbookData().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueHandbookData parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueHandbookData(), data).checkInitialized();
    }

    public static RogueHandbookData parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueHandbookData(), input).checkInitialized();
    }

    public static RogueHandbookData parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueHandbookData(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueHandbookData messages
     */
    public static MessageFactory<RogueHandbookData> getFactory() {
      return RogueHandbookDataFactory.INSTANCE;
    }

    private enum RogueHandbookDataFactory implements MessageFactory<RogueHandbookData> {
      INSTANCE;

      @Override
      public RogueHandbookData create() {
        return RogueHandbookData.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName rogueCurrentVersion = FieldName.forField("rogueCurrentVersion", "rogue_current_version");

      static final FieldName isMiracleUnlock = FieldName.forField("isMiracleUnlock", "is_miracle_unlock");
    }
  }
}
