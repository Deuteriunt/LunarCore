// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueHandbookDataOuterClass {
  /**
   * Protobuf type {@code RogueHandbookData}
   */
  public static final class RogueHandbookData extends ProtoMessage<RogueHandbookData> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated .RogueHandbookBuff buff_list = 3;</code>
     */
    private final RepeatedMessage<RogueHandbookBuffOuterClass.RogueHandbookBuff> buffList = RepeatedMessage.newEmptyInstance(RogueHandbookBuffOuterClass.RogueHandbookBuff.getFactory());

    /**
     * <code>repeated .RogueHandbookMiracle miracle_list = 4;</code>
     */
    private final RepeatedMessage<RogueHandbookMiracleOuterClass.RogueHandbookMiracle> miracleList = RepeatedMessage.newEmptyInstance(RogueHandbookMiracleOuterClass.RogueHandbookMiracle.getFactory());

    /**
     * <code>repeated .RogueHandbookAeon rogue_aeon_list = 9;</code>
     */
    private final RepeatedMessage<RogueHandbookAeonOuterClass.RogueHandbookAeon> rogueAeonList = RepeatedMessage.newEmptyInstance(RogueHandbookAeonOuterClass.RogueHandbookAeon.getFactory());

    /**
     * <code>repeated .RogueHandbookEvent rogue_event = 12;</code>
     */
    private final RepeatedMessage<RogueHandbookEventOuterClass.RogueHandbookEvent> rogueEvent = RepeatedMessage.newEmptyInstance(RogueHandbookEventOuterClass.RogueHandbookEvent.getFactory());

    private RogueHandbookData() {
    }

    /**
     * @return a new empty instance of {@code RogueHandbookData}
     */
    public static RogueHandbookData newInstance() {
      return new RogueHandbookData();
    }

    /**
     * <code>repeated .RogueHandbookBuff buff_list = 3;</code>
     * @return whether the buffList field is set
     */
    public boolean hasBuffList() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated .RogueHandbookBuff buff_list = 3;</code>
     * @return this
     */
    public RogueHandbookData clearBuffList() {
      bitField0_ &= ~0x00000001;
      buffList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueHandbookBuff buff_list = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBuffList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueHandbookBuffOuterClass.RogueHandbookBuff> getBuffList() {
      return buffList;
    }

    /**
     * <code>repeated .RogueHandbookBuff buff_list = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueHandbookBuffOuterClass.RogueHandbookBuff> getMutableBuffList() {
      bitField0_ |= 0x00000001;
      return buffList;
    }

    /**
     * <code>repeated .RogueHandbookBuff buff_list = 3;</code>
     * @param value the buffList to add
     * @return this
     */
    public RogueHandbookData addBuffList(
        final RogueHandbookBuffOuterClass.RogueHandbookBuff value) {
      bitField0_ |= 0x00000001;
      buffList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueHandbookBuff buff_list = 3;</code>
     * @param values the buffList to add
     * @return this
     */
    public RogueHandbookData addAllBuffList(
        final RogueHandbookBuffOuterClass.RogueHandbookBuff... values) {
      bitField0_ |= 0x00000001;
      buffList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .RogueHandbookMiracle miracle_list = 4;</code>
     * @return whether the miracleList field is set
     */
    public boolean hasMiracleList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .RogueHandbookMiracle miracle_list = 4;</code>
     * @return this
     */
    public RogueHandbookData clearMiracleList() {
      bitField0_ &= ~0x00000002;
      miracleList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueHandbookMiracle miracle_list = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMiracleList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueHandbookMiracleOuterClass.RogueHandbookMiracle> getMiracleList() {
      return miracleList;
    }

    /**
     * <code>repeated .RogueHandbookMiracle miracle_list = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueHandbookMiracleOuterClass.RogueHandbookMiracle> getMutableMiracleList(
        ) {
      bitField0_ |= 0x00000002;
      return miracleList;
    }

    /**
     * <code>repeated .RogueHandbookMiracle miracle_list = 4;</code>
     * @param value the miracleList to add
     * @return this
     */
    public RogueHandbookData addMiracleList(
        final RogueHandbookMiracleOuterClass.RogueHandbookMiracle value) {
      bitField0_ |= 0x00000002;
      miracleList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueHandbookMiracle miracle_list = 4;</code>
     * @param values the miracleList to add
     * @return this
     */
    public RogueHandbookData addAllMiracleList(
        final RogueHandbookMiracleOuterClass.RogueHandbookMiracle... values) {
      bitField0_ |= 0x00000002;
      miracleList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .RogueHandbookAeon rogue_aeon_list = 9;</code>
     * @return whether the rogueAeonList field is set
     */
    public boolean hasRogueAeonList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .RogueHandbookAeon rogue_aeon_list = 9;</code>
     * @return this
     */
    public RogueHandbookData clearRogueAeonList() {
      bitField0_ &= ~0x00000004;
      rogueAeonList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueHandbookAeon rogue_aeon_list = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueAeonList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueHandbookAeonOuterClass.RogueHandbookAeon> getRogueAeonList() {
      return rogueAeonList;
    }

    /**
     * <code>repeated .RogueHandbookAeon rogue_aeon_list = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueHandbookAeonOuterClass.RogueHandbookAeon> getMutableRogueAeonList(
        ) {
      bitField0_ |= 0x00000004;
      return rogueAeonList;
    }

    /**
     * <code>repeated .RogueHandbookAeon rogue_aeon_list = 9;</code>
     * @param value the rogueAeonList to add
     * @return this
     */
    public RogueHandbookData addRogueAeonList(
        final RogueHandbookAeonOuterClass.RogueHandbookAeon value) {
      bitField0_ |= 0x00000004;
      rogueAeonList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueHandbookAeon rogue_aeon_list = 9;</code>
     * @param values the rogueAeonList to add
     * @return this
     */
    public RogueHandbookData addAllRogueAeonList(
        final RogueHandbookAeonOuterClass.RogueHandbookAeon... values) {
      bitField0_ |= 0x00000004;
      rogueAeonList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .RogueHandbookEvent rogue_event = 12;</code>
     * @return whether the rogueEvent field is set
     */
    public boolean hasRogueEvent() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .RogueHandbookEvent rogue_event = 12;</code>
     * @return this
     */
    public RogueHandbookData clearRogueEvent() {
      bitField0_ &= ~0x00000008;
      rogueEvent.clear();
      return this;
    }

    /**
     * <code>repeated .RogueHandbookEvent rogue_event = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueEvent()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueHandbookEventOuterClass.RogueHandbookEvent> getRogueEvent() {
      return rogueEvent;
    }

    /**
     * <code>repeated .RogueHandbookEvent rogue_event = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueHandbookEventOuterClass.RogueHandbookEvent> getMutableRogueEvent() {
      bitField0_ |= 0x00000008;
      return rogueEvent;
    }

    /**
     * <code>repeated .RogueHandbookEvent rogue_event = 12;</code>
     * @param value the rogueEvent to add
     * @return this
     */
    public RogueHandbookData addRogueEvent(
        final RogueHandbookEventOuterClass.RogueHandbookEvent value) {
      bitField0_ |= 0x00000008;
      rogueEvent.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueHandbookEvent rogue_event = 12;</code>
     * @param values the rogueEvent to add
     * @return this
     */
    public RogueHandbookData addAllRogueEvent(
        final RogueHandbookEventOuterClass.RogueHandbookEvent... values) {
      bitField0_ |= 0x00000008;
      rogueEvent.addAll(values);
      return this;
    }

    @Override
    public RogueHandbookData copyFrom(final RogueHandbookData other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        buffList.copyFrom(other.buffList);
        miracleList.copyFrom(other.miracleList);
        rogueAeonList.copyFrom(other.rogueAeonList);
        rogueEvent.copyFrom(other.rogueEvent);
      }
      return this;
    }

    @Override
    public RogueHandbookData mergeFrom(final RogueHandbookData other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBuffList()) {
        getMutableBuffList().addAll(other.buffList);
      }
      if (other.hasMiracleList()) {
        getMutableMiracleList().addAll(other.miracleList);
      }
      if (other.hasRogueAeonList()) {
        getMutableRogueAeonList().addAll(other.rogueAeonList);
      }
      if (other.hasRogueEvent()) {
        getMutableRogueEvent().addAll(other.rogueEvent);
      }
      return this;
    }

    @Override
    public RogueHandbookData clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      buffList.clear();
      miracleList.clear();
      rogueAeonList.clear();
      rogueEvent.clear();
      return this;
    }

    @Override
    public RogueHandbookData clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      buffList.clearQuick();
      miracleList.clearQuick();
      rogueAeonList.clearQuick();
      rogueEvent.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueHandbookData)) {
        return false;
      }
      RogueHandbookData other = (RogueHandbookData) o;
      return bitField0_ == other.bitField0_
        && (!hasBuffList() || buffList.equals(other.buffList))
        && (!hasMiracleList() || miracleList.equals(other.miracleList))
        && (!hasRogueAeonList() || rogueAeonList.equals(other.rogueAeonList))
        && (!hasRogueEvent() || rogueEvent.equals(other.rogueEvent));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < buffList.length(); i++) {
          output.writeRawByte((byte) 26);
          output.writeMessageNoTag(buffList.get(i));
        }
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < miracleList.length(); i++) {
          output.writeRawByte((byte) 34);
          output.writeMessageNoTag(miracleList.get(i));
        }
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < rogueAeonList.length(); i++) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(rogueAeonList.get(i));
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < rogueEvent.length(); i++) {
          output.writeRawByte((byte) 98);
          output.writeMessageNoTag(rogueEvent.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * buffList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(buffList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * miracleList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(miracleList);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * rogueAeonList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueAeonList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * rogueEvent.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueEvent);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueHandbookData mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 26: {
            // buffList
            tag = input.readRepeatedMessage(buffList, tag);
            bitField0_ |= 0x00000001;
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // miracleList
            tag = input.readRepeatedMessage(miracleList, tag);
            bitField0_ |= 0x00000002;
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // rogueAeonList
            tag = input.readRepeatedMessage(rogueAeonList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // rogueEvent
            tag = input.readRepeatedMessage(rogueEvent, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedMessage(FieldNames.buffList, buffList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.miracleList, miracleList);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.rogueAeonList, rogueAeonList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.rogueEvent, rogueEvent);
      }
      output.endObject();
    }

    @Override
    public RogueHandbookData mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1522789487:
          case 55792906: {
            if (input.isAtField(FieldNames.buffList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(buffList);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 760391855:
          case 2114937772: {
            if (input.isAtField(FieldNames.miracleList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(miracleList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1684933573:
          case -1375837643: {
            if (input.isAtField(FieldNames.rogueAeonList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(rogueAeonList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1148216096:
          case -505804811: {
            if (input.isAtField(FieldNames.rogueEvent)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(rogueEvent);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueHandbookData clone() {
      return new RogueHandbookData().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueHandbookData parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueHandbookData(), data).checkInitialized();
    }

    public static RogueHandbookData parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueHandbookData(), input).checkInitialized();
    }

    public static RogueHandbookData parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueHandbookData(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueHandbookData messages
     */
    public static MessageFactory<RogueHandbookData> getFactory() {
      return RogueHandbookDataFactory.INSTANCE;
    }

    private enum RogueHandbookDataFactory implements MessageFactory<RogueHandbookData> {
      INSTANCE;

      @Override
      public RogueHandbookData create() {
        return RogueHandbookData.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName buffList = FieldName.forField("buffList", "buff_list");

      static final FieldName miracleList = FieldName.forField("miracleList", "miracle_list");

      static final FieldName rogueAeonList = FieldName.forField("rogueAeonList", "rogue_aeon_list");

      static final FieldName rogueEvent = FieldName.forField("rogueEvent", "rogue_event");
    }
  }
}
