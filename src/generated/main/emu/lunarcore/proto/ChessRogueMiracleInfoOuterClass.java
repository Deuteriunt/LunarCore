// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueMiracleInfoOuterClass {
  /**
   * Protobuf type {@code ChessRogueMiracleInfo}
   */
  public static final class ChessRogueMiracleInfo extends ProtoMessage<ChessRogueMiracleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .ChessRogueMiracleData miracle_data = 11;</code>
     */
    private final ChessRogueMiracleDataOuterClass.ChessRogueMiracleData miracleData = ChessRogueMiracleDataOuterClass.ChessRogueMiracleData.newInstance();

    private ChessRogueMiracleInfo() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueMiracleInfo}
     */
    public static ChessRogueMiracleInfo newInstance() {
      return new ChessRogueMiracleInfo();
    }

    /**
     * <code>optional .ChessRogueMiracleData miracle_data = 11;</code>
     * @return whether the miracleData field is set
     */
    public boolean hasMiracleData() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .ChessRogueMiracleData miracle_data = 11;</code>
     * @return this
     */
    public ChessRogueMiracleInfo clearMiracleData() {
      bitField0_ &= ~0x00000001;
      miracleData.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueMiracleData miracle_data = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMiracleData()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueMiracleDataOuterClass.ChessRogueMiracleData getMiracleData() {
      return miracleData;
    }

    /**
     * <code>optional .ChessRogueMiracleData miracle_data = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueMiracleDataOuterClass.ChessRogueMiracleData getMutableMiracleData() {
      bitField0_ |= 0x00000001;
      return miracleData;
    }

    /**
     * <code>optional .ChessRogueMiracleData miracle_data = 11;</code>
     * @param value the miracleData to set
     * @return this
     */
    public ChessRogueMiracleInfo setMiracleData(
        final ChessRogueMiracleDataOuterClass.ChessRogueMiracleData value) {
      bitField0_ |= 0x00000001;
      miracleData.copyFrom(value);
      return this;
    }

    @Override
    public ChessRogueMiracleInfo copyFrom(final ChessRogueMiracleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        miracleData.copyFrom(other.miracleData);
      }
      return this;
    }

    @Override
    public ChessRogueMiracleInfo mergeFrom(final ChessRogueMiracleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMiracleData()) {
        getMutableMiracleData().mergeFrom(other.miracleData);
      }
      return this;
    }

    @Override
    public ChessRogueMiracleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      miracleData.clear();
      return this;
    }

    @Override
    public ChessRogueMiracleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      miracleData.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueMiracleInfo)) {
        return false;
      }
      ChessRogueMiracleInfo other = (ChessRogueMiracleInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasMiracleData() || miracleData.equals(other.miracleData));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 90);
        output.writeMessageNoTag(miracleData);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(miracleData);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueMiracleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 90: {
            // miracleData
            input.readMessage(miracleData);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.miracleData, miracleData);
      }
      output.endObject();
    }

    @Override
    public ChessRogueMiracleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 760145851:
          case 2114691768: {
            if (input.isAtField(FieldNames.miracleData)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(miracleData);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueMiracleInfo clone() {
      return new ChessRogueMiracleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueMiracleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueMiracleInfo(), data).checkInitialized();
    }

    public static ChessRogueMiracleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueMiracleInfo(), input).checkInitialized();
    }

    public static ChessRogueMiracleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueMiracleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueMiracleInfo messages
     */
    public static MessageFactory<ChessRogueMiracleInfo> getFactory() {
      return ChessRogueMiracleInfoFactory.INSTANCE;
    }

    private enum ChessRogueMiracleInfoFactory implements MessageFactory<ChessRogueMiracleInfo> {
      INSTANCE;

      @Override
      public ChessRogueMiracleInfo create() {
        return ChessRogueMiracleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName miracleData = FieldName.forField("miracleData", "miracle_data");
    }
  }
}
